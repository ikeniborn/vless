#!/bin/bash

# VLESS+Reality VPN - Master Test Runner
# –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞
# –í–µ—Ä—Å–∏—è: 1.0
# –î–∞—Ç–∞: 2025-09-19

set -euo pipefail

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
PROJECT_ROOT="/home/ikeniborn/Documents/Project/vless"
MASTER_LOG="/tmp/vless_master_test.log"
REPORT_FILE="$PROJECT_ROOT/tests/test_results.md"
TESTS_DIR="$PROJECT_ROOT/tests"

# –§—É–Ω–∫—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1" | tee -a "$MASTER_LOG"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1" | tee -a "$MASTER_LOG"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1" | tee -a "$MASTER_LOG"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1" | tee -a "$MASTER_LOG"
}

# –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
declare -A TESTS=(
    ["installation"]="test_installation.sh"
    ["user_management"]="test_user_management.sh"
    ["telegram_bot"]="test_telegram_bot.py"
    ["docker_services"]="test_docker_services.sh"
    ["security"]="test_security.sh"
    ["backup_restore"]="test_backup_restore.sh"
)

# –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤
declare -A TEST_RESULTS=()
declare -A TEST_DETAILS=()

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
run_single_test() {
    local test_name="$1"
    local test_script="$2"
    local test_path="$TESTS_DIR/$test_script"

    log_info "–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: $test_name"

    if [[ ! -f "$test_path" ]]; then
        log_error "–¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: $test_path"
        TEST_RESULTS["$test_name"]="NOT_FOUND"
        TEST_DETAILS["$test_name"]="–§–∞–π–ª —Ç–µ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω"
        return 1
    fi

    if [[ ! -x "$test_path" ]]; then
        log_error "–¢–µ—Å—Ç –Ω–µ –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π: $test_path"
        TEST_RESULTS["$test_name"]="NOT_EXECUTABLE"
        TEST_DETAILS["$test_name"]="–§–∞–π–ª —Ç–µ—Å—Ç–∞ –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"
        return 1
    fi

    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
    local test_output
    local test_exit_code

    if [[ "$test_script" == *.py ]]; then
        # Python —Ç–µ—Å—Ç
        test_output=$(timeout 120 python3 "$test_path" 2>&1) || test_exit_code=$?
    else
        # Bash —Ç–µ—Å—Ç
        test_output=$(timeout 120 bash "$test_path" 2>&1) || test_exit_code=$?
    fi

    test_exit_code=${test_exit_code:-0}

    if [[ $test_exit_code -eq 0 ]]; then
        log_success "–¢–µ—Å—Ç '$test_name' –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ"
        TEST_RESULTS["$test_name"]="PASSED"
        TEST_DETAILS["$test_name"]="–í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ"
    elif [[ $test_exit_code -eq 124 ]]; then
        log_error "–¢–µ—Å—Ç '$test_name' –ø—Ä–µ–≤—ã—Å–∏–ª –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è"
        TEST_RESULTS["$test_name"]="TIMEOUT"
        TEST_DETAILS["$test_name"]="–¢–µ—Å—Ç –ø—Ä–µ–≤—ã—Å–∏–ª –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è (120 —Å–µ–∫)"
    else
        log_error "–¢–µ—Å—Ç '$test_name' –ø—Ä–æ–≤–∞–ª–µ–Ω (–∫–æ–¥: $test_exit_code)"
        TEST_RESULTS["$test_name"]="FAILED"
        TEST_DETAILS["$test_name"]="–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π (–∫–æ–¥: $test_exit_code)"
    fi

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
    echo "=== –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞ $test_name ===" >> "$MASTER_LOG"
    echo "$test_output" >> "$MASTER_LOG"
    echo "=== –ö–æ–Ω–µ—Ü —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞ $test_name ===" >> "$MASTER_LOG"
    echo "" >> "$MASTER_LOG"

    return $test_exit_code
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
check_syntax() {
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –≤—Å–µ—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤..."

    local syntax_errors=0

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Bash —Å–∫—Ä–∏–ø—Ç–æ–≤
    while IFS= read -r -d '' bash_file; do
        if ! bash -n "$bash_file" 2>/dev/null; then
            log_error "–û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –≤ bash —Ñ–∞–π–ª–µ: $bash_file"
            ((syntax_errors++))
        fi
    done < <(find "$PROJECT_ROOT" -name "*.sh" -type f -print0)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Python —Å–∫—Ä–∏–ø—Ç–æ–≤
    while IFS= read -r -d '' python_file; do
        if ! python3 -m py_compile "$python_file" 2>/dev/null; then
            log_error "–û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –≤ Python —Ñ–∞–π–ª–µ: $python_file"
            ((syntax_errors++))
        fi
    done < <(find "$PROJECT_ROOT" -name "*.py" -type f -print0)

    if [[ $syntax_errors -eq 0 ]]; then
        log_success "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –±–µ–∑ –æ—à–∏–±–æ–∫"
        return 0
    else
        log_error "–ù–∞–π–¥–µ–Ω–æ –æ—à–∏–±–æ–∫ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞: $syntax_errors"
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞
generate_report() {
    log_info "–°–æ–∑–¥–∞–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞..."

    cat > "$REPORT_FILE" << EOF
# –û—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ VLESS+Reality VPN

**–î–∞—Ç–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:** $(date)
**–°–∏—Å—Ç–µ–º–∞:** $(uname -a)
**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** $(whoami)

## –û–±–∑–æ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

EOF

    local total_tests=0
    local passed_tests=0
    local failed_tests=0
    local timeout_tests=0
    local not_found_tests=0

    for test_name in "${!TEST_RESULTS[@]}"; do
        ((total_tests++))
        case "${TEST_RESULTS[$test_name]}" in
            "PASSED") ((passed_tests++)) ;;
            "FAILED") ((failed_tests++)) ;;
            "TIMEOUT") ((timeout_tests++)) ;;
            "NOT_FOUND"|"NOT_EXECUTABLE") ((not_found_tests++)) ;;
        esac
    done

    cat >> "$REPORT_FILE" << EOF
- **–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤:** $total_tests
- **–ü—Ä–æ–π–¥–µ–Ω–æ:** $passed_tests
- **–ü—Ä–æ–≤–∞–ª–µ–Ω–æ:** $failed_tests
- **–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è:** $timeout_tests
- **–ù–µ –Ω–∞–π–¥–µ–Ω–æ/–Ω–µ –∏—Å–ø–æ–ª–Ω—è–µ–º–æ:** $not_found_tests

## –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã

| –¢–µ—Å—Ç | –°—Ç–∞—Ç—É—Å | –û–ø–∏—Å–∞–Ω–∏–µ |
|------|--------|----------|
EOF

    for test_name in "${!TEST_RESULTS[@]}"; do
        local status="${TEST_RESULTS[$test_name]}"
        local details="${TEST_DETAILS[$test_name]}"

        local status_emoji
        case "$status" in
            "PASSED") status_emoji="‚úÖ" ;;
            "FAILED") status_emoji="‚ùå" ;;
            "TIMEOUT") status_emoji="‚è∞" ;;
            *) status_emoji="‚ùì" ;;
        esac

        echo "| $test_name | $status_emoji $status | $details |" >> "$REPORT_FILE"
    done

    cat >> "$REPORT_FILE" << EOF

## –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞

EOF

    if check_syntax; then
        echo "‚úÖ **–°–∏–Ω—Ç–∞–∫—Å–∏—Å –≤—Å–µ—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω**" >> "$REPORT_FILE"
    else
        echo "‚ùå **–ù–∞–π–¥–µ–Ω—ã –æ—à–∏–±–∫–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –≤ —Å–∫—Ä–∏–ø—Ç–∞—Ö**" >> "$REPORT_FILE"
    fi

    cat >> "$REPORT_FILE" << EOF

## –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞

\`\`\`
$(tree "$PROJECT_ROOT" -I '__pycache__|*.pyc' 2>/dev/null || find "$PROJECT_ROOT" -type f -name "*.sh" -o -name "*.py" -o -name "*.json" -o -name "*.yml" | head -20)
\`\`\`

## –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

EOF

    if [[ $failed_tests -gt 0 || $timeout_tests -gt 0 || $not_found_tests -gt 0 ]]; then
        cat >> "$REPORT_FILE" << EOF
### –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã

EOF
        for test_name in "${!TEST_RESULTS[@]}"; do
            if [[ "${TEST_RESULTS[$test_name]}" != "PASSED" ]]; then
                echo "- **$test_name**: ${TEST_DETAILS[$test_name]}" >> "$REPORT_FILE"
            fi
        done
    fi

    cat >> "$REPORT_FILE" << EOF

### –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã
2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º
3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç—ã –æ—Ç –∏–º–µ–Ω–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ \`$MASTER_LOG\`

## –ó–∞–∫–ª—é—á–µ–Ω–∏–µ

EOF

    if [[ $passed_tests -eq $total_tests && $total_tests -gt 0 ]]; then
        echo "üéâ **–í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é.**" >> "$REPORT_FILE"
    elif [[ $passed_tests -gt 0 ]]; then
        echo "‚ö†Ô∏è **–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏. –¢—Ä–µ–±—É–µ—Ç—Å—è –≤–Ω–∏–º–∞–Ω–∏–µ –∫ –ø—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã–º —Ç–µ—Å—Ç–∞–º.**" >> "$REPORT_FILE"
    else
        echo "üö® **–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã. –°–∏—Å—Ç–µ–º–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é.**" >> "$REPORT_FILE"
    fi

    log_success "–û—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: $REPORT_FILE"
}

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    log_info "–ù–∞—á–∞–ª–æ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è VLESS+Reality VPN"
    echo "–ú–∞—Å—Ç–µ—Ä-–ª–æ–≥: $MASTER_LOG" > "$MASTER_LOG"
    echo "–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: $(date)" >> "$MASTER_LOG"
    echo "========================================" >> "$MASTER_LOG"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
    check_syntax

    # –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
    for test_name in "${!TESTS[@]}"; do
        run_single_test "$test_name" "${TESTS[$test_name]}"
        echo "" # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
    done

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
    generate_report

    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    local total_tests=${#TESTS[@]}
    local passed_count=0

    for test_name in "${!TEST_RESULTS[@]}"; do
        if [[ "${TEST_RESULTS[$test_name]}" == "PASSED" ]]; then
            ((passed_count++))
        fi
    done

    echo ""
    echo "=========================================="
    echo "–ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø"
    echo "=========================================="
    echo "–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: $total_tests"
    echo "–ü—Ä–æ–π–¥–µ–Ω–æ: $passed_count"
    echo "–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: $((total_tests - passed_count))"
    echo "–û—Ç—á–µ—Ç: $REPORT_FILE"
    echo "–õ–æ–≥: $MASTER_LOG"
    echo "=========================================="

    if [[ $passed_count -eq $total_tests ]]; then
        log_success "–í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!"
        exit 0
    else
        log_error "–û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´ –í –¢–ï–°–¢–ê–•"
        exit 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∏–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞
if [[ ! -f "$PROJECT_ROOT/install.sh" ]]; then
    echo "–û—à–∏–±–∫–∞: –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞ –ø—Ä–æ–µ–∫—Ç–∞"
    echo "–û–∂–∏–¥–∞–µ–º—ã–π –∫–∞—Ç–∞–ª–æ–≥: $PROJECT_ROOT"
    exit 1
fi

# –ó–∞–ø—É—Å–∫ –≥–ª–∞–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main "$@"