<?xml version="1.0" encoding="UTF-8"?>
<plan>
    <tasks>
        <task id="1" priority="HIGH">
            <description>Модифицировать docker-compose.yml.tpl для автоматического выбора IP диапазона</description>
            <location>templates/docker-compose.yml.tpl</location>
            <changes>
                <change>Удалить секцию ipam с жестко заданным subnet</change>
                <change>Оставить только driver: bridge для сети</change>
                <change>Docker автоматически выберет свободный диапазон</change>
            </changes>
            <validation>
                - Шаблон не содержит жестко заданных IP диапазонов
                - Синтаксис docker-compose корректен
            </validation>
        </task>

        <task id="2" priority="HIGH">
            <description>Добавить функцию очистки старой сети в install.sh</description>
            <location>scripts/install.sh или lib/utils.sh</location>
            <changes>
                <change>Создать функцию cleanup_existing_network()</change>
                <change>Проверять существование сети vless-reality_vless-network</change>
                <change>Останавливать контейнеры использующие эту сеть</change>
                <change>Удалять сеть если она существует</change>
            </changes>
            <validation>
                - Функция корректно определяет существование сети
                - Безопасно удаляет сеть без потери данных
            </validation>
        </task>

        <task id="3" priority="MEDIUM">
            <description>Добавить функцию проверки сетевых конфликтов</description>
            <location>scripts/lib/utils.sh</location>
            <changes>
                <change>Создать функцию check_docker_networks()</change>
                <change>Выводить предупреждение если много сетей в системе</change>
                <change>Информировать о возможной очистке неиспользуемых сетей</change>
            </changes>
            <validation>
                - Функция информативна но не блокирует установку
            </validation>
        </task>

        <task id="4" priority="LOW">
            <description>Обновить скрипты управления для работы с новой сетевой конфигурацией</description>
            <location>scripts/user-manager.sh, scripts/update.sh</location>
            <changes>
                <change>Проверить что скрипты не зависят от конкретных IP адресов</change>
                <change>Убедиться что используют имена контейнеров а не IP</change>
            </changes>
            <validation>
                - Скрипты работают независимо от IP диапазона сети
            </validation>
        </task>
    </tasks>

    <execution_order>
        <step order="1" task_id="1">Изменить docker-compose.yml.tpl</step>
        <step order="2" task_id="2">Добавить очистку существующей сети</step>
        <step order="3" task_id="3">Добавить проверку сетевых конфликтов</step>
        <step order="4" task_id="4">Проверить совместимость других скриптов</step>
    </execution_order>

    <implementation_approach>
        <approach>
            <name>Автоматическое управление сетью</name>
            <description>
                1. Убираем жесткую привязку к IP диапазону
                2. Позволяем Docker автоматически управлять сетями
                3. Добавляем очистку при установке для избежания конфликтов
                4. Информируем пользователя о сетевой конфигурации
            </description>
        </approach>
    </implementation_approach>

    <code_samples>
        <sample id="1" task="1">
            <description>Новая конфигурация сети в docker-compose.yml.tpl</description>
            <code><![CDATA[
networks:
  vless-network:
    driver: bridge
            ]]></code>
        </sample>
        <sample id="2" task="2">
            <description>Функция очистки сети</description>
            <code><![CDATA[
cleanup_existing_network() {
    local network_name="vless-reality_vless-network"

    if docker network ls | grep -q "$network_name"; then
        print_warning "Found existing network: $network_name"

        # Check for running containers
        local containers=$(docker ps -q --filter network="$network_name" 2>/dev/null)
        if [ -n "$containers" ]; then
            print_info "Stopping containers using the network..."
            docker stop $containers 2>/dev/null || true
        fi

        # Remove the network
        print_info "Removing existing network..."
        docker network rm "$network_name" 2>/dev/null || true
        print_success "Network cleaned up"
    fi
}
            ]]></code>
        </sample>
    </code_samples>
</plan>