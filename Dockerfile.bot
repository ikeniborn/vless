# Dockerfile for VLESS VPN Telegram Bot
# Multi-stage build for optimized production image

# Build stage
FROM python:3.11-slim as builder

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

# Install system dependencies for building
RUN apt-get update && apt-get install -y \
    build-essential \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Create virtual environment
RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Copy requirements and install Python dependencies
COPY requirements.txt .
RUN pip install --upgrade pip wheel setuptools && \
    pip install -r requirements.txt

# Production stage
FROM python:3.11-slim as production

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PATH="/opt/venv/bin:$PATH"

# Install system runtime dependencies
RUN apt-get update && apt-get install -y \
    # Required for subprocess calls to shell scripts
    bash \
    # For system monitoring
    procps \
    # For disk usage monitoring
    coreutils \
    # For network monitoring
    net-tools \
    # For docker commands (if needed)
    curl \
    # For jq processing
    jq \
    # For QR code generation fallback
    qrencode \
    # For file operations
    file \
    # Timezone support
    tzdata \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Copy virtual environment from builder stage
COPY --from=builder /opt/venv /opt/venv

# Create non-root user for security
RUN useradd --create-home --shell /bin/bash --uid 1000 vlessbot

# Create necessary directories
RUN mkdir -p /opt/vless/logs \
             /opt/vless/users \
             /opt/vless/configs/users \
             /opt/vless/qrcodes \
             /opt/vless/backups \
             /app/modules \
    && chown -R vlessbot:vlessbot /opt/vless /app

# Set working directory
WORKDIR /app

# Copy application files
COPY --chown=vlessbot:vlessbot modules/telegram_bot.py /app/modules/
COPY --chown=vlessbot:vlessbot modules/user_management.sh /app/modules/
COPY --chown=vlessbot:vlessbot modules/common_utils.sh /app/modules/
COPY --chown=vlessbot:vlessbot modules/backup_restore.sh /app/modules/

# Copy configuration files
COPY --chown=vlessbot:vlessbot config/bot_config.env /app/config/

# Create entrypoint script
RUN cat > /app/entrypoint.sh << 'EOF'
#!/bin/bash

# Set default timezone if not specified
export TZ=${TIMEZONE:-UTC}

# Source environment variables if config file exists
if [[ -f /app/config/bot_config.env ]]; then
    set -a
    source /app/config/bot_config.env
    set +a
fi

# Validate required environment variables
if [[ -z "$TELEGRAM_BOT_TOKEN" ]]; then
    echo "ERROR: TELEGRAM_BOT_TOKEN is required"
    exit 1
fi

if [[ -z "$ADMIN_TELEGRAM_ID" ]]; then
    echo "ERROR: ADMIN_TELEGRAM_ID is required"
    exit 1
fi

# Create log directory if it doesn't exist
mkdir -p "$(dirname "$LOG_FILE")" 2>/dev/null || true

# Set permissions
chmod +x /app/modules/*.sh 2>/dev/null || true

# Log startup information
echo "Starting VLESS VPN Telegram Bot..."
echo "Python version: $(python --version)"
echo "Working directory: $(pwd)"
echo "User: $(whoami)"
echo "Environment: ${DEBUG_MODE:-false}"

# Start the bot
exec python /app/modules/telegram_bot.py "$@"
EOF

# Make entrypoint executable
RUN chmod +x /app/entrypoint.sh

# Switch to non-root user
USER vlessbot

# Create volume mounts for persistent data
VOLUME ["/opt/vless/users", "/opt/vless/logs", "/opt/vless/configs", "/opt/vless/qrcodes", "/opt/vless/backups"]

# Expose health check endpoint (if implemented)
EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD python -c "import sys; sys.exit(0)" || exit 1

# Set entrypoint
ENTRYPOINT ["/app/entrypoint.sh"]

# Default command
CMD []

# Labels for metadata
LABEL maintainer="VLESS VPN Project" \
      description="Telegram Bot for VLESS VPN Management" \
      version="1.0" \
      org.opencontainers.image.title="VLESS VPN Telegram Bot" \
      org.opencontainers.image.description="Telegram interface for managing VLESS VPN users and system" \
      org.opencontainers.image.version="1.0" \
      org.opencontainers.image.vendor="VLESS VPN Project" \
      org.opencontainers.image.licenses="MIT"