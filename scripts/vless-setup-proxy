#!/bin/bash
# cli/vless-setup-proxy
#
# VLESS v5.11 - Interactive Reverse Proxy Setup Wizard
# Guides user through complete reverse proxy configuration
#
# Features:
# - Domain validation (DNS mandatory via validate_dns_for_domain)
# - Certificate acquisition (unified workflow via acquire_certificate_for_domain)
# - Nginx config generation (security-hardened, localhost-only)
# - fail2ban multi-port protection
# - HAProxy SNI routing (NO UFW port opening required)
# - Subdomain-based access: https://domain (NO port number!)
# - v5.10: Advanced options wizard (OAuth2, WebSocket, CSP)
# - v5.11: Enhanced security headers (COOP, COEP, CORP, Expect-CT)
#
# Version: 5.11.0
# Author: VLESS Development Team
# Date: 2025-10-20

set -euo pipefail

# =============================================================================
# Configuration
# =============================================================================

INSTALL_PATH="/opt/vless"
LIB_PATH="${INSTALL_PATH}/lib"

# =============================================================================
# Colors & Formatting (defined BEFORE sourcing to avoid readonly conflicts)
# =============================================================================

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
MAGENTA='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m'
BOLD='\033[1m'

# Source library files
source "${LIB_PATH}/certificate_manager.sh"     # v4.3: DNS validation + unified cert acquisition
source "${LIB_PATH}/haproxy_config_manager.sh"  # v4.3: HAProxy dynamic routing
source "${LIB_PATH}/nginx_config_generator.sh"
# source "${LIB_PATH}/xray_http_inbound.sh"  # v5.3: Deprecated - nginx proxies directly to target
source "${LIB_PATH}/letsencrypt_integration.sh"
source "${LIB_PATH}/fail2ban_config.sh"
source "${LIB_PATH}/reverseproxy_db.sh"
source "${LIB_PATH}/docker_compose_manager.sh"

# Icons
ICON_INFO="‚ÑπÔ∏è"
ICON_SUCCESS="‚úÖ"
ICON_WARNING="‚ö†Ô∏è"
ICON_ERROR="‚ùå"
ICON_ROCKET="üöÄ"
ICON_LOCK="üîí"
ICON_GLOBE="üåê"
ICON_KEY="üîë"

# =============================================================================
# Helper Functions
# =============================================================================

print_header() {
    echo "" >&2
    echo -e "${CYAN}${BOLD}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}" >&2
    echo -e "${CYAN}${BOLD}  $1${NC}" >&2
    echo -e "${CYAN}${BOLD}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}" >&2
    echo "" >&2
}

print_step() {
    echo -e "${BLUE}${BOLD}‚ñ∂ $1${NC}" >&2
}

print_success() {
    echo -e "${GREEN}${ICON_SUCCESS} $1${NC}" >&2
}

print_error() {
    echo -e "${RED}${ICON_ERROR} $1${NC}" >&2
}

print_warning() {
    echo -e "${YELLOW}${ICON_WARNING} $1${NC}" >&2
}

print_info() {
    echo -e "${CYAN}${ICON_INFO} $1${NC}" >&2
}

# =============================================================================
# Validation Functions
# =============================================================================

validate_domain() {
    local domain="$1"

    # Basic regex validation
    if ! [[ "$domain" =~ ^[a-zA-Z0-9][a-zA-Z0-9.-]+[a-zA-Z0-9]$ ]]; then
        return 1
    fi

    # Length check
    if [ ${#domain} -lt 4 ] || [ ${#domain} -gt 253 ]; then
        return 1
    fi

    return 0
}

check_dns_resolution() {
    local domain="$1"
    local server_ip

    print_step "–ü—Ä–æ–≤–µ—Ä–∫–∞ DNS —Ä–µ–∑–æ–ª—é—Ü–∏–∏ –¥–ª—è $domain..."

    # Get server's public IP
    server_ip=$(curl -s https://api.ipify.org 2>/dev/null || curl -s https://ifconfig.me 2>/dev/null || echo "")

    if [[ -z "$server_ip" ]]; then
        print_error "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—É–±–ª–∏—á–Ω—ã–π IP —Å–µ—Ä–≤–µ—Ä–∞"
        return 1
    fi

    print_info "–ü—É–±–ª–∏—á–Ω—ã–π IP —Å–µ—Ä–≤–µ—Ä–∞: $server_ip"

    # Resolve domain
    local domain_ip
    domain_ip=$(dig +short "$domain" @8.8.8.8 2>/dev/null | tail -1)

    if [[ -z "$domain_ip" ]]; then
        print_error "–î–æ–º–µ–Ω $domain –Ω–µ —Ä–µ–∑–æ–ª–≤–∏—Ç—Å—è"
        print_warning "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–æ–∑–¥–∞–Ω–∞ A-–∑–∞–ø–∏—Å—å, —É–∫–∞–∑—ã–≤–∞—é—â–∞—è –Ω–∞ $server_ip"
        return 1
    fi

    print_info "–î–æ–º–µ–Ω —Ä–µ–∑–æ–ª–≤–∏—Ç—Å—è –≤: $domain_ip"

    # Check if IPs match
    if [[ "$domain_ip" != "$server_ip" ]]; then
        print_error "DNS –∑–∞–ø–∏—Å—å –Ω–µ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —ç—Ç–æ—Ç —Å–µ—Ä–≤–µ—Ä"
        print_error "  –û–∂–∏–¥–∞–µ—Ç—Å—è: $server_ip"
        print_error "  –ü–æ–ª—É—á–µ–Ω–æ:  $domain_ip"
        print_warning "–û–±–Ω–æ–≤–∏—Ç–µ A-–∑–∞–ø–∏—Å—å –¥–ª—è $domain ‚Üí $server_ip"
        return 1
    fi

    print_success "DNS —Ä–µ–∑–æ–ª—é—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞"
    return 0
}

validate_target_site() {
    local target="$1"

    print_step "–í–∞–ª–∏–¥–∞—Ü–∏—è —Ü–µ–ª–µ–≤–æ–≥–æ —Å–∞–π—Ç–∞: $target..."

    # Check reachability
    if ! curl -s -I --max-time 10 "https://${target}" > /dev/null 2>&1; then
        print_error "–¶–µ–ª–µ–≤–æ–π —Å–∞–π—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: https://${target}"
        return 1
    fi

    # Check TLS 1.3 support
    if ! curl -sI --tlsv1.3 --tls-max 1.3 --max-time 10 "https://${target}" > /dev/null 2>&1; then
        print_warning "–¶–µ–ª–µ–≤–æ–π —Å–∞–π—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç TLS 1.3"
        print_warning "–≠—Ç–æ –º–æ–∂–µ—Ç —Å–Ω–∏–∑–∏—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å, –Ω–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ"
    fi

    print_success "–¶–µ–ª–µ–≤–æ–π —Å–∞–π—Ç –≤–∞–ª–∏–¥–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω"
    return 0
}

check_port_available() {
    local port="$1"

    if sudo ss -tulnp | grep -q ":${port} "; then
        print_error "–ü–æ—Ä—Ç $port —É–∂–µ –∑–∞–Ω—è—Ç"
        sudo ss -tulnp | grep ":${port} "
        return 1
    fi

    print_success "–ü–æ—Ä—Ç $port –¥–æ—Å—Ç—É–ø–µ–Ω"
    return 0
}

# =============================================================================
# Interactive Input Functions
# =============================================================================

prompt_domain() {
    local domain

    print_header "–®–∞–≥ 1: –î–æ–º–µ–Ω –¥–ª—è Reverse Proxy"

    echo -e "${CYAN}–í–≤–µ–¥–∏—Ç–µ –¥–æ–º–µ–Ω –¥–ª—è reverse proxy (–Ω–∞–ø—Ä–∏–º–µ—Ä, proxy.example.com):${NC}" >&2
    echo -e "${YELLOW}–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:${NC}" >&2
    echo "  - –î–æ–º–µ–Ω –¥–æ–ª–∂–µ–Ω —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ IP —ç—Ç–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ (A-–∑–∞–ø–∏—Å—å)" >&2
    echo "  - –ë—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–µ–Ω Let's Encrypt —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç" >&2
    echo "" >&2

    while true; do
        read -p "–î–æ–º–µ–Ω: " domain

        if ! validate_domain "$domain"; then
            print_error "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–æ–º–µ–Ω–∞"
            continue
        fi

        # Check if domain already exists
        if get_proxy "$domain" > /dev/null 2>&1; then
            print_error "Reverse proxy –¥–ª—è –¥–æ–º–µ–Ω–∞ $domain —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
            echo "" >&2
            read -p "–•–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é? [y/N]: " -n 1 -r
            echo
            if [[ $REPLY =~ ^[Yy]$ ]]; then
                sudo vless-proxy show "$domain"
            fi
            continue
        fi

        # Check DNS
        if ! check_dns_resolution "$domain"; then
            echo "" >&2
            read -p "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ DNS –æ—à–∏–±–∫—É? [y/N]: " -n 1 -r
            echo
            if [[ ! $REPLY =~ ^[Yy]$ ]]; then
                continue
            fi
        fi

        break
    done

    echo "$domain"
}

prompt_target_site() {
    local target

    print_header "–®–∞–≥ 2: –¶–µ–ª–µ–≤–æ–π –°–∞–π—Ç (–ü—Ä–æ–∫—Å–∏—Ä—É–µ–º—ã–π)"

    echo -e "${CYAN}–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–µ–≤–æ–π —Å–∞–π—Ç –¥–ª—è –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, blocked-site.com):${NC}" >&2
    echo -e "${YELLOW}–ß—Ç–æ —ç—Ç–æ:${NC}" >&2
    echo "  - –°–∞–π—Ç, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–µ–Ω –¥–æ—Å—Ç—É–ø —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏" >&2
    echo "  - –í—Å–µ –∑–∞–ø—Ä–æ—Å—ã –±—É–¥—É—Ç –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ —ç—Ç–æ—Ç –¥–æ–º–µ–Ω" >&2
    echo "  - –ó–∞–ø—Ä–æ—Å—ã –Ω–∞ –¥—Ä—É–≥–∏–µ –¥–æ–º–µ–Ω—ã –±—É–¥—É—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã (–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å)" >&2
    echo "" >&2

    while true; do
        read -p "–¶–µ–ª–µ–≤–æ–π —Å–∞–π—Ç: " target

        if ! validate_domain "$target"; then
            print_error "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–æ–º–µ–Ω–∞"
            continue
        fi

        if ! validate_target_site "$target"; then
            echo "" >&2
            read -p "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –æ—à–∏–±–∫—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏? [y/N]: " -n 1 -r
            echo
            if [[ ! $REPLY =~ ^[Yy]$ ]]; then
                continue
            fi
        fi

        break
    done

    echo "$target"
}

prompt_port() {
    local port
    local proxy_count

    print_header "–®–∞–≥ 3: Nginx Backend Port (localhost-only)"

    proxy_count=$(get_proxy_count)

    echo -e "${CYAN}–í—ã–±–µ—Ä–∏—Ç–µ localhost-only –ø–æ—Ä—Ç –¥–ª—è nginx backend:${NC}" >&2
    echo -e "${YELLOW}–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ—Ä—Ç—ã: 9443-9452 (–≤—Å–µ–≥–æ 10 —Å–ª–æ—Ç–æ–≤)${NC}" >&2
    echo "  –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: $proxy_count/10" >&2
    echo "" >&2
    echo -e "${CYAN}${ICON_INFO} v4.3 HAProxy Architecture:${NC}" >&2
    echo "  - Nginx —Å–ª—É—à–∞–µ—Ç –Ω–∞ 127.0.0.1:<port> (localhost-only)" >&2
    echo "  - HAProxy –º–∞—Ä—à—Ä—É—Ç–∏–∑–∏—Ä—É–µ—Ç –ø–æ SNI —Å –ø–æ—Ä—Ç–∞ 443" >&2
    echo "  - –ü—É–±–ª–∏—á–Ω—ã–π –¥–æ—Å—Ç—É–ø: https://<domain> (–ë–ï–ó –Ω–æ–º–µ—Ä–∞ –ø–æ—Ä—Ç–∞!)" >&2
    echo "" >&2

    # Auto-suggest next available port (v4.3)
    local suggested_port
    if suggested_port=$(get_next_available_port 2>/dev/null); then
        echo -e "${GREEN}–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è (–∞–≤—Ç–æ-–≤—ã–±–æ—Ä): $suggested_port${NC}" >&2
    else
        # Fallback if get_next_available_port fails
        suggested_port=$((9443 + proxy_count))
        echo -e "${YELLOW}–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: $suggested_port${NC}" >&2
    fi

    echo "" >&2

    while true; do
        read -p "–ü–æ—Ä—Ç [$suggested_port]: " port
        port=${port:-$suggested_port}

        # Validate port range (v4.3: 9443-9452)
        if [ "$port" -lt 9443 ] || [ "$port" -gt 9452 ]; then
            print_error "–ü–æ—Ä—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 9443-9452"
            continue
        fi

        # Check if port is already occupied (database + nginx configs)
        # v5.8: Enhanced port detection - checks both DB and nginx configs to prevent conflicts
        local config_dir="/opt/vless/config/reverse-proxy"
        local db_file="/opt/vless/config/reverse_proxies.json"

        # Collect used ports from database
        local db_ports=""
        if [[ -f "$db_file" ]]; then
            db_ports=$(jq -r '.proxies[].port' "$db_file" 2>/dev/null | sort -n)
        fi

        # Collect used ports from nginx configs
        local nginx_ports=""
        if [[ -d "$config_dir" ]]; then
            nginx_ports=$(grep -h "listen.*:" "$config_dir"/*.conf 2>/dev/null | \
                          grep -oP 'listen\s+[\d.]+:\K\d+' | \
                          sort -n | uniq)
        fi

        # Merge both lists
        local all_ports=$(echo -e "${db_ports}\n${nginx_ports}" | sort -n | uniq | grep -v '^$')

        # Check if port is occupied
        if echo "$all_ports" | grep -q "^${port}$"; then
            print_error "–ü–æ—Ä—Ç $port —É–∂–µ –∑–∞–Ω—è—Ç –¥—Ä—É–≥–∏–º reverse proxy"
            print_info "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: sudo vless-proxy list"
            continue
        fi

        break
    done

    echo "$port"
}

prompt_letsencrypt_email() {
    local email

    print_header "–®–∞–≥ 4: Let's Encrypt Email"

    echo -e "${CYAN}–í–≤–µ–¥–∏—Ç–µ email –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π Let's Encrypt:${NC}" >&2
    echo -e "${YELLOW}–î–ª—è —á–µ–≥–æ:${NC}" >&2
    echo "  - –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞" >&2
    echo "  - –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è" >&2
    echo "  - Email –ù–ï –ø—É–±–ª–∏–∫—É–µ—Ç—Å—è, –æ—Å—Ç–∞—ë—Ç—Å—è –ø—Ä–∏–≤–∞—Ç–Ω—ã–º" >&2
    echo "" >&2

    while true; do
        read -p "Email: " email

        # Basic email validation
        if ! [[ "$email" =~ ^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$ ]]; then
            print_error "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email"
            continue
        fi

        break
    done

    echo "$email"
}

prompt_advanced_options() {
    print_header "–®–∞–≥ 5: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –û–ø—Ü–∏–∏ (v5.11)"

    echo -e "${CYAN}–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤–∞—à–µ–≥–æ reverse proxy:${NC}" >&2
    echo "" >&2

    # OAuth2 Support
    echo -e "${YELLOW}1. OAuth2 / Large Cookie Support${NC}" >&2
    echo "   –î–ª—è —Å–∞–π—Ç–æ–≤ —Å OAuth2, Google Auth, –∏–ª–∏ –±–æ–ª—å—à–∏–º–∏ cookies (>4kb)" >&2
    echo "   –£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –±—É—Ñ–µ—Ä—ã: 32k/16x32k/64k" >&2
    read -p "   –í–∫–ª—é—á–∏—Ç—å OAuth2 support? [Y/n]: " -n 1 -r oauth2_choice
    echo
    if [[ $oauth2_choice =~ ^[Nn]$ ]]; then
        export OAUTH2_SUPPORT="false"
    else
        export OAUTH2_SUPPORT="true"
    fi
    echo "" >&2

    # WebSocket Support
    echo -e "${YELLOW}2. WebSocket Support${NC}" >&2
    echo "   –î–ª—è real-time –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π (chat, dashboards, collaborative editing)" >&2
    echo "   –£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç timeouts: 3600s (1 hour)" >&2
    read -p "   –í–∫–ª—é—á–∏—Ç—å WebSocket support? [Y/n]: " -n 1 -r websocket_choice
    echo
    if [[ $websocket_choice =~ ^[Nn]$ ]]; then
        export ENABLE_WEBSOCKET="false"
    else
        export ENABLE_WEBSOCKET="true"
    fi
    echo "" >&2

    # CSP Header Handling
    echo -e "${YELLOW}3. Content Security Policy (CSP) Headers${NC}" >&2
    echo "   CSP –æ—Ç —Ü–µ–ª–µ–≤–æ–≥–æ —Å–∞–π—Ç–∞ –º–æ–∂–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—Å—É—Ä—Å—ã —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏-–¥–æ–º–µ–Ω" >&2
    echo "   –û–ø—Ü–∏–∏:" >&2
    echo "     - Strip (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è): –£–¥–∞–ª–∏—Ç—å CSP headers –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏" >&2
    echo "     - Keep: –°–æ—Ö—Ä–∞–Ω–∏—Ç—å CSP (–º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –Ω–µ–∫–æ—Ç–æ—Ä—ã–º–∏ —Å–∞–π—Ç–∞–º–∏)" >&2
    read -p "   Strip CSP headers? [Y/n]: " -n 1 -r csp_choice
    echo
    if [[ $csp_choice =~ ^[Nn]$ ]]; then
        export STRIP_CSP="false"
    else
        export STRIP_CSP="true"
    fi
    echo "" >&2

    # Enhanced Security Headers (v5.11)
    echo -e "${YELLOW}4. Enhanced Security Headers (v5.11)${NC}" >&2
    echo "   –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (COOP, COEP, CORP, Expect-CT)" >&2
    echo "   –£–ª—É—á—à–∞—é—Ç browser isolation –∏ –∑–∞—â–∏—Ç—É –æ—Ç –∞—Ç–∞–∫" >&2
    echo "   ${RED}–í–ù–ò–ú–ê–ù–ò–ï:${NC} –ú–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Å–∞–π—Ç–∞–º–∏, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–º–∏ cross-origin —Ä–µ—Å—É—Ä—Å—ã" >&2
    echo "   –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: OFF –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ —Å–∞–π—Ç–æ–≤" >&2
    read -p "   –í–∫–ª—é—á–∏—Ç—å Enhanced Security Headers? [y/N]: " -n 1 -r security_choice
    echo
    if [[ $security_choice =~ ^[Yy]$ ]]; then
        export ENHANCED_SECURITY_HEADERS="true"
    else
        export ENHANCED_SECURITY_HEADERS="false"
    fi
    echo "" >&2

    # Custom User-Agent (v5.13)
    echo -e "${YELLOW}5. Custom User-Agent (v5.13)${NC}" >&2
    echo "   –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–∞–π—Ç—ã –±–ª–æ–∫–∏—Ä—É—é—Ç –ø—Ä–æ–∫—Å–∏ –∑–∞–ø—Ä–æ—Å—ã (Cloudflare –∑–∞—â–∏—Ç–∞)" >&2
    echo "   –ü—Ä–∏–º–µ—Ä: claude.ai, chatgpt.com —Ç—Ä–µ–±—É—é—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π User-Agent" >&2
    echo "   –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: Mozilla/5.0 Chrome (—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä)" >&2
    echo -e "   ${YELLOW}–ü–†–ò–ú–ï–ß–ê–ù–ò–ï:${NC} –î–ª—è —Å–∞–π—Ç–æ–≤ —Å Cloudflare Bot Management –º–æ–∂–µ—Ç –Ω–µ –ø–æ–º–æ—á—å" >&2
    read -p "   –ò–∑–º–µ–Ω–∏—Ç—å User-Agent? [y/N]: " -n 1 -r ua_choice
    echo
    if [[ $ua_choice =~ ^[Yy]$ ]]; then
        echo -n "   –í–≤–µ–¥–∏—Ç–µ User-Agent (–∏–ª–∏ Enter –¥–ª—è default): " >&2
        read -r custom_ua
        if [[ -n "$custom_ua" ]]; then
            export CUSTOM_USER_AGENT="$custom_ua"
        else
            export CUSTOM_USER_AGENT="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36"
        fi
    else
        export CUSTOM_USER_AGENT="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36"
    fi
    echo "" >&2

    # Summary
    print_info "–í—ã–±—Ä–∞–Ω–Ω—ã–µ –æ–ø—Ü–∏–∏:"
    echo "  OAuth2 Support:          ${OAUTH2_SUPPORT}" >&2
    echo "  WebSocket Support:       ${ENABLE_WEBSOCKET}" >&2
    echo "  Strip CSP:               ${STRIP_CSP}" >&2
    echo "  Enhanced Security (NEW): ${ENHANCED_SECURITY_HEADERS}" >&2
    echo "  Custom User-Agent:       ${CUSTOM_USER_AGENT:0:50}..." >&2
    echo "" >&2
}

prompt_confirmation() {
    local domain="$1"
    local target="$2"
    local port="$3"
    local email="$4"

    print_header "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"

    echo -e "${CYAN}${BOLD}–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:${NC}" >&2
    echo "" >&2
    echo -e "  ${BOLD}–î–æ–º–µ–Ω:${NC}           $domain" >&2
    echo -e "  ${BOLD}–¶–µ–ª–µ–≤–æ–π —Å–∞–π—Ç:${NC}    $target" >&2
    echo -e "  ${BOLD}Backend –ø–æ—Ä—Ç:${NC}    $port (localhost-only)" >&2
    echo -e "  ${BOLD}Email:${NC}           $email" >&2
    echo "" >&2
    echo -e "  ${BOLD}–ü—É–±–ª–∏—á–Ω—ã–π URL:${NC}   ${GREEN}https://${domain}${NC}  ${YELLOW}(–ë–ï–ó –Ω–æ–º–µ—Ä–∞ –ø–æ—Ä—Ç–∞!)${NC}" >&2
    echo "" >&2
    echo -e "${CYAN}${BOLD}–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏ (v5.13):${NC}" >&2
    echo -e "  ${BOLD}OAuth2 Support:${NC}          ${OAUTH2_SUPPORT:-true}" >&2
    echo -e "  ${BOLD}WebSocket Support:${NC}       ${ENABLE_WEBSOCKET:-true}" >&2
    echo -e "  ${BOLD}Strip CSP Headers:${NC}       ${STRIP_CSP:-true}" >&2
    echo -e "  ${BOLD}Enhanced Security:${NC}       ${ENHANCED_SECURITY_HEADERS:-false}" >&2
    echo -e "  ${BOLD}Custom User-Agent:${NC}       ${CUSTOM_USER_AGENT:0:60}..." >&2
    echo "" >&2
    echo -e "${YELLOW}${BOLD}–ß—Ç–æ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–æ (v4.3):${NC}" >&2
    echo "  1. DNS validation (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ!)" >&2
    echo "  2. –ü–æ–ª—É—á–µ–Ω–∏–µ Let's Encrypt —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –¥–ª—è $domain" >&2
    echo "  3. –°–æ–∑–¥–∞–Ω–∏–µ HAProxy combined.pem (fullchain + privkey)" >&2
    echo "  4. –°–æ–∑–¥–∞–Ω–∏–µ Nginx reverse proxy –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (localhost:$port)" >&2
    echo "  5. –°–æ–∑–¥–∞–Ω–∏–µ Xray HTTP inbound (localhost:10080+)" >&2
    echo "  6. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ HAProxy SNI route: $domain ‚Üí nginx:$port" >&2
    echo "  7. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ fail2ban –∑–∞—â–∏—Ç—ã" >&2
    echo "  8. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTTP Basic Auth –∫—Ä–µ–¥–µ–Ω—à–µ–ª–æ–≤" >&2
    echo "" >&2
    echo -e "${CYAN}${ICON_INFO} v4.3 Architecture:${NC}" >&2
    echo "  - HAProxy (port 443) –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤—Å–µ HTTPS —Ç—Ä–∞—Ñ–∏–∫" >&2
    echo "  - SNI routing –ø–æ –∏–º–µ–Ω–∏ –¥–æ–º–µ–Ω–∞ (TLS passthrough –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)" >&2
    echo "  - Nginx backend —Å–ª—É—à–∞–µ—Ç –¢–û–õ–¨–ö–û –Ω–∞ 127.0.0.1:$port" >&2
    echo "  - UFW –ø–æ—Ä—Ç –ù–ï –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è (–Ω–µ –Ω—É–∂–µ–Ω, HAProxy —É–∂–µ –Ω–∞ 443)" >&2
    echo "" >&2

    read -p "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫—É? [y/N]: " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        print_warning "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"
        exit 0
    fi
}

# =============================================================================
# Installation Functions
# =============================================================================

setup_reverse_proxy() {
    local domain="$1"
    local target="$2"
    local port="$3"
    local email="$4"

    print_header "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Reverse Proxy"

    # Step 1: Unified Certificate Acquisition (v4.3)
    # Includes: DNS validation + certbot + HAProxy combined.pem + reload
    print_step "–ü–æ–ª—É—á–µ–Ω–∏–µ Let's Encrypt —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ (v4.3 unified workflow)..."
    if ! acquire_certificate_for_domain "$domain" "$email"; then
        print_error "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç"
        print_error "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ DNS: dig +short $domain"
        return 1
    fi

    # Step 2: Xray HTTP inbound (DEPRECATED in v5.3)
    # v5.3: Nginx proxies directly to target site via HTTPS (IPv4-only)
    # Xray inbound no longer needed for reverse proxy
    local xray_tag="N/A"
    local xray_port="N/A"

    # Step 3: Generate HTTP Basic Auth credentials
    print_step "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫—Ä–µ–¥–µ–Ω—à–µ–ª–æ–≤..."
    local username="user_$(openssl rand -hex 4)"
    local password=$(openssl rand -hex 16)
    local password_hash
    password_hash=$(htpasswd -nbB "$username" "$password" | cut -d: -f2)

    print_success "Username: $username"
    print_success "Password: $password"

    # Step 4: Generate Nginx configuration
    print_step "–°–æ–∑–¥–∞–Ω–∏–µ Nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."
    if ! generate_reverseproxy_nginx_config "$domain" "$target" "$port" "$username" "$password_hash"; then
        print_error "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å Nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"
        return 1
    fi

    # Step 4.5: Add rate limit zone (CRITICAL FIX v5.13)
    # This MUST be called after generate_reverseproxy_nginx_config
    # to add limit_req_zone directive to http_context.conf
    print_step "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ rate limit zone..."
    if ! add_rate_limit_zone "$domain"; then
        print_error "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å rate limit zone"
        return 1
    fi

    # Step 5: Add entry to database
    print_step "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ –ë–î..."
    local cert_expires
    cert_expires="$(date -u -d '+90 days' +"%Y-%m-%dT%H:%M:%SZ")"
    local notes="Created via vless-setup-proxy wizard"

    # add_proxy: domain, target_site, port, username, password, xray_port, xray_tag, cert_expires, target_ipv4, notes
    # target_ipv4 is resolved automatically inside add_proxy() if empty
    if ! add_proxy "$domain" "$target" "$port" "$username" "$password" "$xray_port" "$xray_tag" "$cert_expires" "" "$notes"; then
        print_error "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ –ë–î"
        return 1
    fi

    # Step 6: Add port to fail2ban
    print_step "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ fail2ban –∑–∞—â–∏—Ç—ã..."
    if ! add_port_to_jail "$port"; then
        print_warning "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø–æ—Ä—Ç –≤ fail2ban (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ)"
    else
        reload_fail2ban
    fi

    # Step 7: Add port to docker-compose.yml (nginx localhost binding)
    print_step "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç–∞ –≤ docker-compose.yml..."
    if ! add_nginx_port "$port"; then
        print_error "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø–æ—Ä—Ç –≤ docker-compose.yml"
        print_warning "–ü–æ—Ä—Ç –ø—Ä–∏–¥—ë—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é"
    else
        print_success "–ü–æ—Ä—Ç $port –¥–æ–±–∞–≤–ª–µ–Ω –≤ docker-compose.yml"
    fi

    # Step 8: Add HAProxy SNI route (v4.3)
    print_step "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ HAProxy SNI route..."
    if ! add_reverse_proxy_route "$domain" "$port"; then
        print_error "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å HAProxy route"
        print_warning "–ú–∞—Ä—à—Ä—É—Ç –ø—Ä–∏–¥—ë—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é"
    else
        print_success "HAProxy route –¥–æ–±–∞–≤–ª–µ–Ω: $domain ‚Üí nginx:$port"
    fi

    # Step 9: Reload services
    print_step "–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..."
    reload_nginx_container  # Docker compose restart with new port
    # Note: reload_xray() not needed (v5.3+: nginx proxies directly to target, no Xray HTTP inbound)

    # Step 10: Display success message
    print_header "${ICON_SUCCESS} Reverse Proxy –£—Å–ø–µ—à–Ω–æ –ù–∞—Å—Ç—Ä–æ–µ–Ω!"

    echo "" >&2
    echo -e "${GREEN}${BOLD}Reverse Proxy –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!${NC}" >&2
    echo "" >&2
    echo -e "${CYAN}${BOLD}–î–µ—Ç–∞–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (v4.3):${NC}" >&2
    echo -e "  ${BOLD}URL:${NC}      ${GREEN}https://${domain}${NC}  ${YELLOW}(–ë–ï–ó –Ω–æ–º–µ—Ä–∞ –ø–æ—Ä—Ç–∞!)${NC}" >&2
    echo -e "  ${BOLD}Backend:${NC}  127.0.0.1:${port} (localhost-only)" >&2
    echo -e "  ${BOLD}Username:${NC} $username" >&2
    echo -e "  ${BOLD}Password:${NC} $password" >&2
    echo "" >&2
    echo -e "${YELLOW}${BOLD}–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:${NC}" >&2
    echo "  1. –û—Ç–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä" >&2
    echo "  2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ –∞–¥—Ä–µ—Å—É: ${GREEN}${BOLD}https://${domain}${NC}" >&2
    echo "  3. –í–≤–µ–¥–∏—Ç–µ username/password –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ" >&2
    echo "  4. –í—ã –±—É–¥–µ—Ç–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ ${target}" >&2
    echo "" >&2
    echo -e "${CYAN}${ICON_INFO} v4.3 HAProxy Routing:${NC}" >&2
    echo "  - HAProxy –ø—Ä–∏–Ω–∏–º–∞–µ—Ç HTTPS –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –ø–æ—Ä—Ç—É 443" >&2
    echo "  - SNI-based routing: –ø–æ –∏–º–µ–Ω–∏ –¥–æ–º–µ–Ω–∞ ($domain)" >&2
    echo "  - Nginx backend —Å–ª—É—à–∞–µ—Ç —Ç–æ–ª—å–∫–æ localhost (–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–∑–≤–Ω–µ)" >&2
    echo "" >&2
    echo -e "${CYAN}–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:${NC}" >&2
    echo "  sudo vless-proxy show ${domain}        # –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏" >&2
    echo "  sudo vless-proxy remove ${domain}      # –£–¥–∞–ª–∏—Ç—å" >&2
    echo "  sudo vless-proxy renew-cert ${domain}  # –û–±–Ω–æ–≤–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç" >&2
    echo "" >&2

    return 0
}

# =============================================================================
# Main Execution
# =============================================================================

main() {
    # Check if running as root
    if [ "$EUID" -ne 0 ]; then
        print_error "–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω —Å sudo"
        exit 1
    fi

    # Check if VLESS is installed
    if [ ! -d "$INSTALL_PATH" ]; then
        print_error "VLESS –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É."
        exit 1
    fi

    # Initialize database if not exists
    init_database

    # Print welcome banner
    clear
    print_header "${ICON_ROCKET} VLESS v4.3 - Reverse Proxy Setup Wizard (HAProxy Unified)"

    echo -e "${CYAN}–≠—Ç–æ—Ç wizard –ø–æ–º–æ–∂–µ—Ç –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å reverse proxy –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Å–∞–π—Ç–∞–º.${NC}" >&2
    echo -e "${YELLOW}v4.3: Unified HAProxy architecture - subdomain access –±–µ–∑ –Ω–æ–º–µ—Ä–∞ –ø–æ—Ä—Ç–∞!${NC}" >&2
    echo "" >&2

    # Collect parameters
    domain=$(prompt_domain)
    target=$(prompt_target_site)
    port=$(prompt_port)
    email=$(prompt_letsencrypt_email)

    # v5.10: Advanced options (OAuth2, WebSocket, CSP)
    prompt_advanced_options

    # Confirmation
    prompt_confirmation "$domain" "$target" "$port" "$email"

    # Execute setup (success message printed inside function)
    if ! setup_reverse_proxy "$domain" "$target" "$port" "$email"; then
        print_error "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–∞–º–∏"
        exit 1
    fi
}

# Run main function
main "$@"
