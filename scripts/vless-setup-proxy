#!/bin/bash
# cli/vless-setup-proxy
#
# VLESS v4.3 - Interactive Reverse Proxy Setup Wizard (HAProxy Unified)
# Guides user through complete reverse proxy configuration
#
# Features:
# - Domain validation (DNS mandatory via validate_dns_for_domain)
# - Certificate acquisition (unified workflow via acquire_certificate_for_domain)
# - Nginx config generation (security-hardened, localhost-only)
# - Xray HTTP inbound configuration
# - fail2ban multi-port protection
# - HAProxy SNI routing (NO UFW port opening required)
# - Subdomain-based access: https://domain (NO port number!)
#
# Version: 4.3.0
# Author: VLESS Development Team
# Date: 2025-10-18

set -euo pipefail

# =============================================================================
# Configuration
# =============================================================================

INSTALL_PATH="/opt/vless"
LIB_PATH="${INSTALL_PATH}/lib"

# =============================================================================
# Colors & Formatting (defined BEFORE sourcing to avoid readonly conflicts)
# =============================================================================

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
MAGENTA='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m'
BOLD='\033[1m'

# Source library files
source "${LIB_PATH}/certificate_manager.sh"     # v4.3: DNS validation + unified cert acquisition
source "${LIB_PATH}/haproxy_config_manager.sh"  # v4.3: HAProxy dynamic routing
source "${LIB_PATH}/nginx_config_generator.sh"
source "${LIB_PATH}/xray_http_inbound.sh"
source "${LIB_PATH}/letsencrypt_integration.sh"
source "${LIB_PATH}/fail2ban_config.sh"
source "${LIB_PATH}/reverseproxy_db.sh"
source "${LIB_PATH}/docker_compose_manager.sh"

# Icons
ICON_INFO="‚ÑπÔ∏è"
ICON_SUCCESS="‚úÖ"
ICON_WARNING="‚ö†Ô∏è"
ICON_ERROR="‚ùå"
ICON_ROCKET="üöÄ"
ICON_LOCK="üîí"
ICON_GLOBE="üåê"
ICON_KEY="üîë"

# =============================================================================
# Helper Functions
# =============================================================================

print_header() {
    echo ""
    echo -e "${CYAN}${BOLD}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
    echo -e "${CYAN}${BOLD}  $1${NC}"
    echo -e "${CYAN}${BOLD}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
    echo ""
}

print_step() {
    echo -e "${BLUE}${BOLD}‚ñ∂ $1${NC}"
}

print_success() {
    echo -e "${GREEN}${ICON_SUCCESS} $1${NC}"
}

print_error() {
    echo -e "${RED}${ICON_ERROR} $1${NC}" >&2
}

print_warning() {
    echo -e "${YELLOW}${ICON_WARNING} $1${NC}"
}

print_info() {
    echo -e "${CYAN}${ICON_INFO} $1${NC}"
}

# =============================================================================
# Validation Functions
# =============================================================================

validate_domain() {
    local domain="$1"

    # Basic regex validation
    if ! [[ "$domain" =~ ^[a-zA-Z0-9][a-zA-Z0-9.-]+[a-zA-Z0-9]$ ]]; then
        return 1
    fi

    # Length check
    if [ ${#domain} -lt 4 ] || [ ${#domain} -gt 253 ]; then
        return 1
    fi

    return 0
}

check_dns_resolution() {
    local domain="$1"
    local server_ip

    print_step "–ü—Ä–æ–≤–µ—Ä–∫–∞ DNS —Ä–µ–∑–æ–ª—é—Ü–∏–∏ –¥–ª—è $domain..."

    # Get server's public IP
    server_ip=$(curl -s https://api.ipify.org || curl -s https://ifconfig.me || echo "")

    if [[ -z "$server_ip" ]]; then
        print_error "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—É–±–ª–∏—á–Ω—ã–π IP —Å–µ—Ä–≤–µ—Ä–∞"
        return 1
    fi

    print_info "–ü—É–±–ª–∏—á–Ω—ã–π IP —Å–µ—Ä–≤–µ—Ä–∞: $server_ip"

    # Resolve domain
    local domain_ip
    domain_ip=$(dig +short "$domain" @8.8.8.8 | tail -1)

    if [[ -z "$domain_ip" ]]; then
        print_error "–î–æ–º–µ–Ω $domain –Ω–µ —Ä–µ–∑–æ–ª–≤–∏—Ç—Å—è"
        print_warning "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–æ–∑–¥–∞–Ω–∞ A-–∑–∞–ø–∏—Å—å, —É–∫–∞–∑—ã–≤–∞—é—â–∞—è –Ω–∞ $server_ip"
        return 1
    fi

    print_info "–î–æ–º–µ–Ω —Ä–µ–∑–æ–ª–≤–∏—Ç—Å—è –≤: $domain_ip"

    # Check if IPs match
    if [[ "$domain_ip" != "$server_ip" ]]; then
        print_error "DNS –∑–∞–ø–∏—Å—å –Ω–µ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —ç—Ç–æ—Ç —Å–µ—Ä–≤–µ—Ä"
        print_error "  –û–∂–∏–¥–∞–µ—Ç—Å—è: $server_ip"
        print_error "  –ü–æ–ª—É—á–µ–Ω–æ:  $domain_ip"
        print_warning "–û–±–Ω–æ–≤–∏—Ç–µ A-–∑–∞–ø–∏—Å—å –¥–ª—è $domain ‚Üí $server_ip"
        return 1
    fi

    print_success "DNS —Ä–µ–∑–æ–ª—é—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞"
    return 0
}

validate_target_site() {
    local target="$1"

    print_step "–í–∞–ª–∏–¥–∞—Ü–∏—è —Ü–µ–ª–µ–≤–æ–≥–æ —Å–∞–π—Ç–∞: $target..."

    # Check reachability
    if ! curl -s -I --max-time 10 "https://${target}" > /dev/null 2>&1; then
        print_error "–¶–µ–ª–µ–≤–æ–π —Å–∞–π—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: https://${target}"
        return 1
    fi

    # Check TLS 1.3 support
    if ! curl -sI --tlsv1.3 --tls-max 1.3 --max-time 10 "https://${target}" > /dev/null 2>&1; then
        print_warning "–¶–µ–ª–µ–≤–æ–π —Å–∞–π—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç TLS 1.3"
        print_warning "–≠—Ç–æ –º–æ–∂–µ—Ç —Å–Ω–∏–∑–∏—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å, –Ω–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ"
    fi

    print_success "–¶–µ–ª–µ–≤–æ–π —Å–∞–π—Ç –≤–∞–ª–∏–¥–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω"
    return 0
}

check_port_available() {
    local port="$1"

    if sudo ss -tulnp | grep -q ":${port} "; then
        print_error "–ü–æ—Ä—Ç $port —É–∂–µ –∑–∞–Ω—è—Ç"
        sudo ss -tulnp | grep ":${port} "
        return 1
    fi

    print_success "–ü–æ—Ä—Ç $port –¥–æ—Å—Ç—É–ø–µ–Ω"
    return 0
}

# =============================================================================
# Interactive Input Functions
# =============================================================================

prompt_domain() {
    local domain

    print_header "–®–∞–≥ 1: –î–æ–º–µ–Ω –¥–ª—è Reverse Proxy"

    echo -e "${CYAN}–í–≤–µ–¥–∏—Ç–µ –¥–æ–º–µ–Ω –¥–ª—è reverse proxy (–Ω–∞–ø—Ä–∏–º–µ—Ä, proxy.example.com):${NC}"
    echo -e "${YELLOW}–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:${NC}"
    echo "  - –î–æ–º–µ–Ω –¥–æ–ª–∂–µ–Ω —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ IP —ç—Ç–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ (A-–∑–∞–ø–∏—Å—å)"
    echo "  - –ë—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–µ–Ω Let's Encrypt —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç"
    echo ""

    while true; do
        read -p "–î–æ–º–µ–Ω: " domain

        if ! validate_domain "$domain"; then
            print_error "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–æ–º–µ–Ω–∞"
            continue
        fi

        # Check if domain already exists
        if get_proxy "$domain" > /dev/null 2>&1; then
            print_error "Reverse proxy –¥–ª—è –¥–æ–º–µ–Ω–∞ $domain —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
            echo ""
            read -p "–•–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é? [y/N]: " -n 1 -r
            echo
            if [[ $REPLY =~ ^[Yy]$ ]]; then
                sudo vless-proxy show "$domain"
            fi
            continue
        fi

        # Check DNS
        if ! check_dns_resolution "$domain"; then
            echo ""
            read -p "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ DNS –æ—à–∏–±–∫—É? [y/N]: " -n 1 -r
            echo
            if [[ ! $REPLY =~ ^[Yy]$ ]]; then
                continue
            fi
        fi

        break
    done

    echo "$domain"
}

prompt_target_site() {
    local target

    print_header "–®–∞–≥ 2: –¶–µ–ª–µ–≤–æ–π –°–∞–π—Ç (–ü—Ä–æ–∫—Å–∏—Ä—É–µ–º—ã–π)"

    echo -e "${CYAN}–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–µ–≤–æ–π —Å–∞–π—Ç –¥–ª—è –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, blocked-site.com):${NC}"
    echo -e "${YELLOW}–ß—Ç–æ —ç—Ç–æ:${NC}"
    echo "  - –°–∞–π—Ç, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–µ–Ω –¥–æ—Å—Ç—É–ø —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏"
    echo "  - –í—Å–µ –∑–∞–ø—Ä–æ—Å—ã –±—É–¥—É—Ç –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ —ç—Ç–æ—Ç –¥–æ–º–µ–Ω"
    echo "  - –ó–∞–ø—Ä–æ—Å—ã –Ω–∞ –¥—Ä—É–≥–∏–µ –¥–æ–º–µ–Ω—ã –±—É–¥—É—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã (–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å)"
    echo ""

    while true; do
        read -p "–¶–µ–ª–µ–≤–æ–π —Å–∞–π—Ç: " target

        if ! validate_domain "$target"; then
            print_error "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–æ–º–µ–Ω–∞"
            continue
        fi

        if ! validate_target_site "$target"; then
            echo ""
            read -p "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –æ—à–∏–±–∫—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏? [y/N]: " -n 1 -r
            echo
            if [[ ! $REPLY =~ ^[Yy]$ ]]; then
                continue
            fi
        fi

        break
    done

    echo "$target"
}

prompt_port() {
    local port
    local proxy_count

    print_header "–®–∞–≥ 3: Nginx Backend Port (localhost-only)"

    proxy_count=$(get_proxy_count)

    echo -e "${CYAN}–í—ã–±–µ—Ä–∏—Ç–µ localhost-only –ø–æ—Ä—Ç –¥–ª—è nginx backend:${NC}"
    echo -e "${YELLOW}–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ—Ä—Ç—ã: 9443-9452 (–≤—Å–µ–≥–æ 10 —Å–ª–æ—Ç–æ–≤)${NC}"
    echo "  –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: $proxy_count/10"
    echo ""
    echo -e "${CYAN}${ICON_INFO} v4.3 HAProxy Architecture:${NC}"
    echo "  - Nginx —Å–ª—É—à–∞–µ—Ç –Ω–∞ 127.0.0.1:<port> (localhost-only)"
    echo "  - HAProxy –º–∞—Ä—à—Ä—É—Ç–∏–∑–∏—Ä—É–µ—Ç –ø–æ SNI —Å –ø–æ—Ä—Ç–∞ 443"
    echo "  - –ü—É–±–ª–∏—á–Ω—ã–π –¥–æ—Å—Ç—É–ø: https://<domain> (–ë–ï–ó –Ω–æ–º–µ—Ä–∞ –ø–æ—Ä—Ç–∞!)"
    echo ""

    # Auto-suggest next available port (v4.3)
    local suggested_port
    if suggested_port=$(get_next_available_port 2>/dev/null); then
        echo -e "${GREEN}–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è (–∞–≤—Ç–æ-–≤—ã–±–æ—Ä): $suggested_port${NC}"
    else
        # Fallback if get_next_available_port fails
        suggested_port=$((9443 + proxy_count))
        echo -e "${YELLOW}–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: $suggested_port${NC}"
    fi

    echo ""

    while true; do
        read -p "–ü–æ—Ä—Ç [$suggested_port]: " port
        port=${port:-$suggested_port}

        # Validate port range (v4.3: 9443-9452)
        if [ "$port" -lt 9443 ] || [ "$port" -gt 9452 ]; then
            print_error "–ü–æ—Ä—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 9443-9452"
            continue
        fi

        # Check if port is available (should not be bound externally)
        # Port binding check relaxed since nginx binds to localhost only
        break
    done

    echo "$port"
}

prompt_letsencrypt_email() {
    local email

    print_header "–®–∞–≥ 4: Let's Encrypt Email"

    echo -e "${CYAN}–í–≤–µ–¥–∏—Ç–µ email –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π Let's Encrypt:${NC}"
    echo -e "${YELLOW}–î–ª—è —á–µ–≥–æ:${NC}"
    echo "  - –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞"
    echo "  - –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"
    echo "  - Email –ù–ï –ø—É–±–ª–∏–∫—É–µ—Ç—Å—è, –æ—Å—Ç–∞—ë—Ç—Å—è –ø—Ä–∏–≤–∞—Ç–Ω—ã–º"
    echo ""

    while true; do
        read -p "Email: " email

        # Basic email validation
        if ! [[ "$email" =~ ^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$ ]]; then
            print_error "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email"
            continue
        fi

        break
    done

    echo "$email"
}

prompt_confirmation() {
    local domain="$1"
    local target="$2"
    local port="$3"
    local email="$4"

    print_header "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"

    echo -e "${CYAN}${BOLD}–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:${NC}"
    echo ""
    echo -e "  ${BOLD}–î–æ–º–µ–Ω:${NC}           $domain"
    echo -e "  ${BOLD}–¶–µ–ª–µ–≤–æ–π —Å–∞–π—Ç:${NC}    $target"
    echo -e "  ${BOLD}Backend –ø–æ—Ä—Ç:${NC}    $port (localhost-only)"
    echo -e "  ${BOLD}Email:${NC}           $email"
    echo ""
    echo -e "  ${BOLD}–ü—É–±–ª–∏—á–Ω—ã–π URL:${NC}   ${GREEN}https://${domain}${NC}  ${YELLOW}(–ë–ï–ó –Ω–æ–º–µ—Ä–∞ –ø–æ—Ä—Ç–∞!)${NC}"
    echo ""
    echo -e "${YELLOW}${BOLD}–ß—Ç–æ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–æ (v4.3):${NC}"
    echo "  1. DNS validation (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ!)"
    echo "  2. –ü–æ–ª—É—á–µ–Ω–∏–µ Let's Encrypt —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –¥–ª—è $domain"
    echo "  3. –°–æ–∑–¥–∞–Ω–∏–µ HAProxy combined.pem (fullchain + privkey)"
    echo "  4. –°–æ–∑–¥–∞–Ω–∏–µ Nginx reverse proxy –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (localhost:$port)"
    echo "  5. –°–æ–∑–¥–∞–Ω–∏–µ Xray HTTP inbound (localhost:10080+)"
    echo "  6. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ HAProxy SNI route: $domain ‚Üí nginx:$port"
    echo "  7. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ fail2ban –∑–∞—â–∏—Ç—ã"
    echo "  8. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTTP Basic Auth –∫—Ä–µ–¥–µ–Ω—à–µ–ª–æ–≤"
    echo ""
    echo -e "${CYAN}${ICON_INFO} v4.3 Architecture:${NC}"
    echo "  - HAProxy (port 443) –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤—Å–µ HTTPS —Ç—Ä–∞—Ñ–∏–∫"
    echo "  - SNI routing –ø–æ –∏–º–µ–Ω–∏ –¥–æ–º–µ–Ω–∞ (TLS passthrough –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)"
    echo "  - Nginx backend —Å–ª—É—à–∞–µ—Ç –¢–û–õ–¨–ö–û –Ω–∞ 127.0.0.1:$port"
    echo "  - UFW –ø–æ—Ä—Ç –ù–ï –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è (–Ω–µ –Ω—É–∂–µ–Ω, HAProxy —É–∂–µ –Ω–∞ 443)"
    echo ""

    read -p "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫—É? [y/N]: " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        print_warning "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"
        exit 0
    fi
}

# =============================================================================
# Installation Functions
# =============================================================================

setup_reverse_proxy() {
    local domain="$1"
    local target="$2"
    local port="$3"
    local email="$4"

    print_header "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Reverse Proxy"

    # Step 1: Unified Certificate Acquisition (v4.3)
    # Includes: DNS validation + certbot + HAProxy combined.pem + reload
    print_step "–ü–æ–ª—É—á–µ–Ω–∏–µ Let's Encrypt —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ (v4.3 unified workflow)..."
    if ! acquire_certificate_for_domain "$domain" "$email"; then
        print_error "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç"
        print_error "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ DNS: dig +short $domain"
        return 1
    fi

    # Step 2: Add Xray HTTP inbound
    print_step "–°–æ–∑–¥–∞–Ω–∏–µ Xray HTTP inbound..."
    local inbound_info
    if ! inbound_info=$(add_reverseproxy_inbound "$domain" "$target"); then
        print_error "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å Xray inbound"
        return 1
    fi

    local inbound_id
    local xray_port
    read -r inbound_id xray_port <<< "$inbound_info"

    print_success "Xray inbound —Å–æ–∑–¥–∞–Ω: reverse-proxy-${inbound_id} (localhost:${xray_port})"

    # Step 3: Generate HTTP Basic Auth credentials
    print_step "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫—Ä–µ–¥–µ–Ω—à–µ–ª–æ–≤..."
    local username="user_$(openssl rand -hex 4)"
    local password=$(openssl rand -hex 16)
    local password_hash
    password_hash=$(htpasswd -nbB "$username" "$password" | cut -d: -f2)

    print_success "Username: $username"
    print_success "Password: $password"

    # Step 4: Generate Nginx configuration
    print_step "–°–æ–∑–¥–∞–Ω–∏–µ Nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."
    if ! generate_reverseproxy_nginx_config "$domain" "$target" "$port" "$xray_port" "$username" "$password_hash"; then
        print_error "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å Nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"
        return 1
    fi

    # Step 5: Add entry to database
    print_step "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ –ë–î..."
    local proxy_json
    proxy_json=$(cat <<EOF
{
  "id": ${inbound_id},
  "domain": "${domain}",
  "target_site": "${target}",
  "port": ${port},
  "username": "${username}",
  "password_hash": "${password_hash}",
  "xray_inbound_port": ${xray_port},
  "xray_inbound_tag": "reverse-proxy-${inbound_id}",
  "nginx_config_path": "/opt/vless/config/reverse-proxy/${domain}.conf",
  "htpasswd_path": "/opt/vless/config/reverse-proxy/.htpasswd-${domain}",
  "certificate_path": "/etc/letsencrypt/live/${domain}/",
  "certificate_issued": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
  "certificate_expires": "$(date -u -d '+90 days' +"%Y-%m-%dT%H:%M:%SZ")",
  "last_renewed": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
  "fail2ban_enabled": true,
  "created_at": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
  "enabled": true,
  "notes": "Created via vless-setup-proxy wizard"
}
EOF
)

    if ! add_proxy "$proxy_json"; then
        print_error "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ –ë–î"
        return 1
    fi

    # Step 6: Add port to fail2ban
    print_step "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ fail2ban –∑–∞—â–∏—Ç—ã..."
    if ! add_port_to_jail "$port"; then
        print_warning "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø–æ—Ä—Ç –≤ fail2ban (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ)"
    else
        reload_fail2ban
    fi

    # Step 7: Add port to docker-compose.yml (nginx localhost binding)
    print_step "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç–∞ –≤ docker-compose.yml..."
    if ! add_nginx_port "$port"; then
        print_error "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø–æ—Ä—Ç –≤ docker-compose.yml"
        print_warning "–ü–æ—Ä—Ç –ø—Ä–∏–¥—ë—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é"
    else
        print_success "–ü–æ—Ä—Ç $port –¥–æ–±–∞–≤–ª–µ–Ω –≤ docker-compose.yml"
    fi

    # Step 8: Add HAProxy SNI route (v4.3)
    print_step "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ HAProxy SNI route..."
    if ! add_reverse_proxy_route "$domain" "$port"; then
        print_error "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å HAProxy route"
        print_warning "–ú–∞—Ä—à—Ä—É—Ç –ø—Ä–∏–¥—ë—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é"
    else
        print_success "HAProxy route –¥–æ–±–∞–≤–ª–µ–Ω: $domain ‚Üí nginx:$port"
    fi

    # Step 9: Reload services
    print_step "–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..."
    reload_nginx_container  # Docker compose restart with new port
    reload_xray

    return 0
}

# =============================================================================
# Main Execution
# =============================================================================

main() {
    # Check if running as root
    if [ "$EUID" -ne 0 ]; then
        print_error "–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω —Å sudo"
        exit 1
    fi

    # Check if VLESS is installed
    if [ ! -d "$INSTALL_PATH" ]; then
        print_error "VLESS –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É."
        exit 1
    fi

    # Initialize database if not exists
    init_database

    # Print welcome banner
    clear
    print_header "${ICON_ROCKET} VLESS v4.3 - Reverse Proxy Setup Wizard (HAProxy Unified)"

    echo -e "${CYAN}–≠—Ç–æ—Ç wizard –ø–æ–º–æ–∂–µ—Ç –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å reverse proxy –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Å–∞–π—Ç–∞–º.${NC}"
    echo -e "${YELLOW}v4.3: Unified HAProxy architecture - subdomain access –±–µ–∑ –Ω–æ–º–µ—Ä–∞ –ø–æ—Ä—Ç–∞!${NC}"
    echo ""

    # Collect parameters
    domain=$(prompt_domain)
    target=$(prompt_target_site)
    port=$(prompt_port)
    email=$(prompt_letsencrypt_email)

    # Confirmation
    prompt_confirmation "$domain" "$target" "$port" "$email"

    # Execute setup
    if setup_reverse_proxy "$domain" "$target" "$port" "$email"; then
        print_header "${ICON_SUCCESS} Reverse Proxy –£—Å–ø–µ—à–Ω–æ –ù–∞—Å—Ç—Ä–æ–µ–Ω!"

        echo ""
        echo -e "${GREEN}${BOLD}Reverse Proxy –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!${NC}"
        echo ""
        echo -e "${CYAN}${BOLD}–î–µ—Ç–∞–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (v4.3):${NC}"
        echo -e "  ${BOLD}URL:${NC}      ${GREEN}https://${domain}${NC}  ${YELLOW}(–ë–ï–ó –Ω–æ–º–µ—Ä–∞ –ø–æ—Ä—Ç–∞!)${NC}"
        echo -e "  ${BOLD}Backend:${NC}  127.0.0.1:${port} (localhost-only)"
        echo -e "  ${BOLD}Username:${NC} $username"
        echo -e "  ${BOLD}Password:${NC} $password"
        echo ""
        echo -e "${YELLOW}${BOLD}–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:${NC}"
        echo "  1. –û—Ç–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä"
        echo "  2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ –∞–¥—Ä–µ—Å—É: ${GREEN}${BOLD}https://${domain}${NC}"
        echo "  3. –í–≤–µ–¥–∏—Ç–µ username/password –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ"
        echo "  4. –í—ã –±—É–¥–µ—Ç–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ ${target}"
        echo ""
        echo -e "${CYAN}${ICON_INFO} v4.3 HAProxy Routing:${NC}"
        echo "  - HAProxy –ø—Ä–∏–Ω–∏–º–∞–µ—Ç HTTPS –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –ø–æ—Ä—Ç—É 443"
        echo "  - SNI-based routing: –ø–æ –∏–º–µ–Ω–∏ –¥–æ–º–µ–Ω–∞ ($domain)"
        echo "  - Nginx backend —Å–ª—É—à–∞–µ—Ç —Ç–æ–ª—å–∫–æ localhost (–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–∑–≤–Ω–µ)"
        echo ""
        echo -e "${CYAN}–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:${NC}"
        echo "  sudo vless-proxy show ${domain}        # –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏"
        echo "  sudo vless-proxy remove ${domain}      # –£–¥–∞–ª–∏—Ç—å"
        echo "  sudo vless-proxy renew-cert ${domain}  # –û–±–Ω–æ–≤–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç"
        echo ""

    else
        print_error "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–∞–º–∏"
        exit 1
    fi
}

# Run main function
main "$@"
