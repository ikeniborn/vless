#!/bin/bash
# cli/vless-proxy
#
# VLESS v4.2 - Reverse Proxy Management Tool
# Comprehensive CLI for managing reverse proxy configurations
#
# Commands:
#   add                 - Create new reverse proxy (calls scripts/vless-setup-proxy)
#   list                - List all reverse proxies
#   show <domain>       - Show detailed configuration
#   remove <domain>     - Remove reverse proxy
#   renew-cert <domain> - Renew Let's Encrypt certificate
#   enable <domain>     - Enable reverse proxy
#   disable <domain>    - Disable reverse proxy
#   check-certs         - Check all certificate expiry dates
#
# Version: 4.2.0
# Author: VLESS Development Team
# Date: 2025-10-17

set -euo pipefail

# =============================================================================
# Configuration
# =============================================================================

INSTALL_PATH="/opt/vless"
LIB_PATH="${INSTALL_PATH}/lib"

# Source library files
source "${LIB_PATH}/nginx_config_generator.sh"
source "${LIB_PATH}/xray_http_inbound.sh"
source "${LIB_PATH}/letsencrypt_integration.sh"
source "${LIB_PATH}/fail2ban_config.sh"
source "${LIB_PATH}/reverseproxy_db.sh"
source "${LIB_PATH}/docker_compose_manager.sh"

# =============================================================================
# Colors & Formatting
# =============================================================================

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
MAGENTA='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color
BOLD='\033[1m'
DIM='\033[2m'

# Icons
ICON_INFO="‚ÑπÔ∏è"
ICON_SUCCESS="‚úÖ"
ICON_WARNING="‚ö†Ô∏è"
ICON_ERROR="‚ùå"
ICON_GLOBE="üåê"
ICON_LOCK="üîí"
ICON_KEY="üîë"
ICON_CLOCK="‚è∞"

# =============================================================================
# Helper Functions
# =============================================================================

print_header() {
    echo ""
    echo -e "${CYAN}${BOLD}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
    echo -e "${CYAN}${BOLD}  $1${NC}"
    echo -e "${CYAN}${BOLD}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
    echo ""
}

print_success() {
    echo -e "${GREEN}${ICON_SUCCESS} $1${NC}"
}

print_error() {
    echo -e "${RED}${ICON_ERROR} $1${NC}" >&2
}

print_warning() {
    echo -e "${YELLOW}${ICON_WARNING} $1${NC}"
}

print_info() {
    echo -e "${CYAN}${ICON_INFO} $1${NC}"
}

# =============================================================================
# Command: add (alias to vless-setup-proxy)
# =============================================================================

cmd_add() {
    if [ ! -f "${INSTALL_PATH}/scripts/vless-setup-proxy" ]; then
        print_error "vless-setup-proxy –Ω–µ –Ω–∞–π–¥–µ–Ω"
        exit 1
    fi

    exec "${INSTALL_PATH}/scripts/vless-setup-proxy"
}

# =============================================================================
# Command: list
# =============================================================================

cmd_list() {
    print_header "${ICON_GLOBE} –°–ø–∏—Å–æ–∫ Reverse Proxies"

    local proxy_count
    proxy_count=$(get_proxy_count)

    if [ "$proxy_count" -eq 0 ]; then
        print_info "–ù–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö reverse proxies"
        echo ""
        echo "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: sudo vless-proxy add"
        return 0
    fi

    echo -e "${CYAN}${BOLD}–ù–∞–π–¥–µ–Ω–æ: $proxy_count proxy (–º–∞–∫—Å. 10)${NC}"
    echo ""

    # Table header
    printf "${BOLD}%-4s %-30s %-25s %-8s %-10s${NC}\n" "ID" "–î–û–ú–ï–ù" "–¶–ï–õ–ï–í–û–ô –°–ê–ô–¢" "–ü–û–†–¢" "–°–¢–ê–¢–£–°"
    echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"

    # List all proxies
    list_proxies | jq -r '. | "\(.id)|\(.domain)|\(.target_site)|\(.port)|\(.enabled)"' | while IFS='|' read -r id domain target port enabled; do
        local status_icon
        local status_color

        if [ "$enabled" = "true" ]; then
            status_icon="${GREEN}${ICON_SUCCESS}${NC}"
            status_color="${GREEN}"
        else
            status_icon="${RED}${ICON_WARNING}${NC}"
            status_color="${RED}"
        fi

        printf "%-4s %-30s %-25s %-8s ${status_color}%-10s${NC}\n" \
            "$id" \
            "$domain" \
            "$target" \
            "$port" \
            "$([ "$enabled" = "true" ] && echo "enabled" || echo "disabled")"
    done

    echo ""
    print_info "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: sudo vless-proxy show <domain> –¥–ª—è –¥–µ—Ç–∞–ª–µ–π"
}

# =============================================================================
# Command: show <domain>
# =============================================================================

cmd_show() {
    local domain="$1"

    if [[ -z "$domain" ]]; then
        print_error "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: vless-proxy show <domain>"
        exit 1
    fi

    # Get proxy from database
    local proxy_json
    if ! proxy_json=$(get_proxy "$domain"); then
        print_error "Reverse proxy –¥–ª—è –¥–æ–º–µ–Ω–∞ '$domain' –Ω–µ –Ω–∞–π–¥–µ–Ω"
        exit 1
    fi

    print_header "${ICON_GLOBE} –î–µ—Ç–∞–ª–∏ Reverse Proxy: $domain"

    # Parse JSON
    local id target port username xray_port xray_tag cert_expires enabled notes
    id=$(echo "$proxy_json" | jq -r '.id')
    target=$(echo "$proxy_json" | jq -r '.target_site')
    port=$(echo "$proxy_json" | jq -r '.port')
    username=$(echo "$proxy_json" | jq -r '.username')
    xray_port=$(echo "$proxy_json" | jq -r '.xray_inbound_port')
    xray_tag=$(echo "$proxy_json" | jq -r '.xray_inbound_tag')
    cert_expires=$(echo "$proxy_json" | jq -r '.certificate_expires')
    enabled=$(echo "$proxy_json" | jq -r '.enabled')
    notes=$(echo "$proxy_json" | jq -r '.notes // "–ù–µ—Ç"')

    # Calculate days until cert expiry
    local expires_epoch
    local current_epoch
    local days_left
    expires_epoch=$(date -d "$cert_expires" +%s 2>/dev/null || echo "0")
    current_epoch=$(date +%s)
    days_left=$(( (expires_epoch - current_epoch) / 86400 ))

    local cert_status_color="${GREEN}"
    if [ "$days_left" -lt 30 ]; then
        cert_status_color="${YELLOW}"
    fi
    if [ "$days_left" -lt 7 ]; then
        cert_status_color="${RED}"
    fi

    # Display configuration
    echo -e "${CYAN}${BOLD}–û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:${NC}"
    echo -e "  ID:                 ${BOLD}$id${NC}"
    echo -e "  –î–æ–º–µ–Ω:              ${BOLD}$domain${NC}"
    echo -e "  –¶–µ–ª–µ–≤–æ–π —Å–∞–π—Ç:       ${BOLD}$target${NC}"
    echo -e "  –ü—É–±–ª–∏—á–Ω—ã–π –ø–æ—Ä—Ç:     ${BOLD}$port${NC}"
    echo -e "  –°—Ç–∞—Ç—É—Å:             $([ "$enabled" = "true" ] && echo "${GREEN}${ICON_SUCCESS} Enabled${NC}" || echo "${RED}${ICON_WARNING} Disabled${NC}")"
    echo ""

    echo -e "${CYAN}${BOLD}–î–æ—Å—Ç—É–ø:${NC}"
    echo -e "  URL:                ${BOLD}https://${domain}:${port}${NC}"
    echo -e "  Username:           ${BOLD}$username${NC}"
    echo -e "  Password:           ${DIM}(—Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ .htpasswd)${NC}"
    echo ""

    echo -e "${CYAN}${BOLD}Xray Configuration:${NC}"
    echo -e "  Inbound Tag:        ${BOLD}$xray_tag${NC}"
    echo -e "  Inbound Port:       ${BOLD}$xray_port${NC} (localhost only)"
    echo ""

    echo -e "${CYAN}${BOLD}Let's Encrypt Certificate:${NC}"
    echo -e "  –ò—Å—Ç–µ–∫–∞–µ—Ç:           ${cert_status_color}${BOLD}$cert_expires${NC} (${days_left} –¥–Ω–µ–π)"
    echo -e "  –ü—É—Ç—å:               ${DIM}/etc/letsencrypt/live/${domain}/${NC}"
    echo ""

    if [ "$days_left" -lt 30 ]; then
        print_warning "–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –∏—Å—Ç–µ–∫–∞–µ—Ç –º–µ–Ω–µ–µ —á–µ–º —á–µ—Ä–µ–∑ 30 –¥–Ω–µ–π!"
        echo -e "  ${YELLOW}–í—ã–ø–æ–ª–Ω–∏—Ç–µ: sudo vless-proxy renew-cert $domain${NC}"
        echo ""
    fi

    echo -e "${CYAN}${BOLD}–ó–∞–º–µ—Ç–∫–∏:${NC}"
    echo -e "  $notes"
    echo ""

    # Test connectivity
    echo -e "${CYAN}${BOLD}–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏:${NC}"

    # Check if Nginx is listening on port
    if sudo ss -tulnp | grep -q ":${port} "; then
        print_success "Nginx —Å–ª—É—à–∞–µ—Ç –Ω–∞ –ø–æ—Ä—Ç—É $port"
    else
        print_error "Nginx –ù–ï —Å–ª—É—à–∞–µ—Ç –Ω–∞ –ø–æ—Ä—Ç—É $port"
    fi

    # Check if Xray inbound exists
    if jq -e ".inbounds[] | select(.tag == \"${xray_tag}\")" /opt/vless/config/config.json > /dev/null 2>&1; then
        print_success "Xray inbound $xray_tag –∞–∫—Ç–∏–≤–µ–Ω"
    else
        print_error "Xray inbound $xray_tag –ù–ï –ù–ê–ô–î–ï–ù"
    fi

    # Check certificate validity
    if validate_certificate "$domain" > /dev/null 2>&1; then
        print_success "–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –≤–∞–ª–∏–¥–µ–Ω"
    else
        print_error "–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –ù–ï –≤–∞–ª–∏–¥–µ–Ω –∏–ª–∏ –∏—Å—Ç—ë–∫"
    fi

    echo ""
}

# =============================================================================
# Command: remove <domain>
# =============================================================================

cmd_remove() {
    local domain="$1"

    if [[ -z "$domain" ]]; then
        print_error "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: vless-proxy remove <domain>"
        exit 1
    fi

    # Check if proxy exists
    local proxy_json
    if ! proxy_json=$(get_proxy "$domain"); then
        print_error "Reverse proxy –¥–ª—è –¥–æ–º–µ–Ω–∞ '$domain' –Ω–µ –Ω–∞–π–¥–µ–Ω"
        exit 1
    fi

    print_header "${ICON_WARNING} –£–¥–∞–ª–µ–Ω–∏–µ Reverse Proxy: $domain"

    # Parse JSON
    local port xray_tag
    port=$(echo "$proxy_json" | jq -r '.port')
    xray_tag=$(echo "$proxy_json" | jq -r '.xray_inbound_tag')

    # Show what will be removed
    echo -e "${YELLOW}${BOLD}–ë—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ:${NC}"
    echo "  - Nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è"
    echo "  - Xray HTTP inbound ($xray_tag)"
    echo "  - fail2ban –ø—Ä–∞–≤–∏–ª–æ –¥–ª—è –ø–æ—Ä—Ç–∞ $port"
    echo "  - UFW –ø—Ä–∞–≤–∏–ª–æ –¥–ª—è –ø–æ—Ä—Ç–∞ $port"
    echo "  - .htpasswd —Ñ–∞–π–ª"
    echo "  - –ó–∞–ø–∏—Å—å –∏–∑ –ë–î"
    echo ""
    echo -e "${RED}${BOLD}‚ö†Ô∏è  Let's Encrypt —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –ù–ï –±—É–¥–µ—Ç —É–¥–∞–ª—ë–Ω (–º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ø–æ–≤—Ç–æ—Ä–Ω–æ)${NC}"
    echo ""

    read -p "–í—ã —É–≤–µ—Ä–µ–Ω—ã? –í–≤–µ–¥–∏—Ç–µ '$domain' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: " confirmation

    if [ "$confirmation" != "$domain" ]; then
        print_warning "–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ"
        exit 0
    fi

    # Start removal
    print_info "–ù–∞—á–∏–Ω–∞—é —É–¥–∞–ª–µ–Ω–∏–µ..."

    # 1. Remove Nginx config
    if remove_reverseproxy_config "$domain"; then
        print_success "Nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞"
    else
        print_warning "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å Nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"
    fi

    # 2. Remove Xray inbound
    if remove_reverseproxy_inbound "$xray_tag"; then
        print_success "Xray inbound —É–¥–∞–ª—ë–Ω"
    else
        print_warning "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å Xray inbound"
    fi

    # 3. Remove fail2ban port
    if remove_port_from_jail "$port"; then
        reload_fail2ban
        print_success "fail2ban –ø—Ä–∞–≤–∏–ª–æ —É–¥–∞–ª–µ–Ω–æ"
    else
        print_warning "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å fail2ban –ø—Ä–∞–≤–∏–ª–æ"
    fi

    # 4. Remove UFW rule
    if sudo ufw delete allow "${port}/tcp"; then
        print_success "UFW –ø—Ä–∞–≤–∏–ª–æ —É–¥–∞–ª–µ–Ω–æ"
    else
        print_warning "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å UFW –ø—Ä–∞–≤–∏–ª–æ"
    fi

    # 5. Remove from database
    if remove_proxy "$domain"; then
        print_success "–ó–∞–ø–∏—Å—å –∏–∑ –ë–î —É–¥–∞–ª–µ–Ω–∞"
    else
        print_error "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å –∏–∑ –ë–î"
    fi

    # 5.5. Remove port from docker-compose.yml
    print_info "–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç–∞ –∏–∑ docker-compose.yml..."
    if ! remove_nginx_port "$port"; then
        print_warning "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ—Ä—Ç –∏–∑ docker-compose.yml"
    else
        print_success "–ü–æ—Ä—Ç $port —É–¥–∞–ª—ë–Ω –∏–∑ docker-compose.yml"
    fi

    # 6. Reload services
    reload_nginx_container  # Docker compose restart with removed port
    reload_xray

    print_header "${ICON_SUCCESS} Reverse Proxy –£–¥–∞–ª—ë–Ω"

    echo ""
    echo -e "${GREEN}Reverse proxy –¥–ª—è '$domain' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω${NC}"
    echo ""
    echo -e "${CYAN}–ü—Ä–∏–º–µ—á–∞–Ω–∏—è:${NC}"
    echo "  - –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ /etc/letsencrypt/live/${domain}/"
    echo "  - –î–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞: sudo certbot delete --cert-name $domain"
    echo ""
}

# =============================================================================
# Command: renew-cert <domain>
# =============================================================================

cmd_renew_cert() {
    local domain="$1"

    if [[ -z "$domain" ]]; then
        print_error "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: vless-proxy renew-cert <domain>"
        exit 1
    fi

    # Check if proxy exists
    if ! get_proxy "$domain" > /dev/null 2>&1; then
        print_error "Reverse proxy –¥–ª—è –¥–æ–º–µ–Ω–∞ '$domain' –Ω–µ –Ω–∞–π–¥–µ–Ω"
        exit 1
    fi

    print_header "${ICON_LOCK} –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞: $domain"

    print_info "–ù–∞—á–∏–Ω–∞—é –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞..."

    if renew_certificate "$domain"; then
        # Update database with new expiry date
        local new_expiry
        new_expiry=$(date -u -d '+90 days' +"%Y-%m-%dT%H:%M:%SZ")
        local renewed_at
        renewed_at=$(date -u +"%Y-%m-%dT%H:%M:%SZ")

        update_certificate_info "$domain" "$new_expiry" "$renewed_at"

        print_success "–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω"
        print_info "–ù–æ–≤–∞—è –¥–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è: $new_expiry"
    else
        print_error "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç"
        exit 1
    fi
}

# =============================================================================
# Command: enable <domain>
# =============================================================================

cmd_enable() {
    local domain="$1"

    if [[ -z "$domain" ]]; then
        print_error "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: vless-proxy enable <domain>"
        exit 1
    fi

    print_info "–ê–∫—Ç–∏–≤–∞—Ü–∏—è reverse proxy –¥–ª—è $domain..."

    # TODO: Implement enable logic
    # - Symlink Nginx config back if removed
    # - Re-add UFW rule
    # - Update database enabled=true

    print_warning "–ö–æ–º–∞–Ω–¥–∞ enable –µ—â—ë –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ (–±—É–¥–µ—Ç –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏)"
}

# =============================================================================
# Command: disable <domain>
# =============================================================================

cmd_disable() {
    local domain="$1"

    if [[ -z "$domain" ]]; then
        print_error "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: vless-proxy disable <domain>"
        exit 1
    fi

    print_info "–î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è reverse proxy –¥–ª—è $domain..."

    # TODO: Implement disable logic
    # - Remove Nginx config symlink (keep file)
    # - Remove UFW rule
    # - Update database enabled=false

    print_warning "–ö–æ–º–∞–Ω–¥–∞ disable –µ—â—ë –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ (–±—É–¥–µ—Ç –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏)"
}

# =============================================================================
# Command: check-certs
# =============================================================================

cmd_check_certs() {
    print_header "${ICON_CLOCK} –ü—Ä–æ–≤–µ—Ä–∫–∞ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤"

    local proxy_count
    proxy_count=$(get_proxy_count)

    if [ "$proxy_count" -eq 0 ]; then
        print_info "–ù–µ—Ç reverse proxies –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"
        return 0
    fi

    echo -e "${CYAN}${BOLD}–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –¥–ª—è –≤—Å–µ—Ö reverse proxies...${NC}"
    echo ""

    # Table header
    printf "${BOLD}%-30s %-25s %-15s${NC}\n" "–î–û–ú–ï–ù" "–ò–°–¢–ï–ö–ê–ï–¢" "–°–¢–ê–¢–£–°"
    echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"

    local critical_count=0
    local warning_count=0

    list_proxies | jq -r '. | "\(.domain)|\(.certificate_expires)"' | while IFS='|' read -r domain cert_expires; do
        # Calculate days left
        local expires_epoch
        local current_epoch
        local days_left
        expires_epoch=$(date -d "$cert_expires" +%s 2>/dev/null || echo "0")
        current_epoch=$(date +%s)
        days_left=$(( (expires_epoch - current_epoch) / 86400 ))

        local status
        local status_color="${GREEN}"

        if [ "$days_left" -lt 0 ]; then
            status="EXPIRED"
            status_color="${RED}"
            ((critical_count++))
        elif [ "$days_left" -lt 7 ]; then
            status="CRITICAL"
            status_color="${RED}"
            ((critical_count++))
        elif [ "$days_left" -lt 30 ]; then
            status="WARNING"
            status_color="${YELLOW}"
            ((warning_count++))
        else
            status="OK"
            status_color="${GREEN}"
        fi

        printf "%-30s %-25s ${status_color}%-15s${NC} (${days_left} –¥–Ω–µ–π)\n" \
            "$domain" \
            "$cert_expires" \
            "$status"
    done

    echo ""

    if [ "$critical_count" -gt 0 ]; then
        print_error "$critical_count —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –∏—Å—Ç–µ–∫–ª–∏ –∏–ª–∏ –∏—Å—Ç–µ–∫–∞—é—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 7 –¥–Ω–µ–π!"
        echo -e "${RED}–í—ã–ø–æ–ª–Ω–∏—Ç–µ: sudo vless-proxy renew-cert <domain>${NC}"
    elif [ "$warning_count" -gt 0 ]; then
        print_warning "$warning_count —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –∏—Å—Ç–µ–∫–∞—é—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –¥–Ω–µ–π"
        echo -e "${YELLOW}–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –∑–∞—Ä–∞–Ω–µ–µ${NC}"
    else
        print_success "–í—Å–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –≤–∞–ª–∏–¥–Ω—ã"
    fi

    echo ""
}

# =============================================================================
# Usage / Help
# =============================================================================

show_usage() {
    cat <<EOF
${BOLD}VLESS v4.2 - Reverse Proxy Management Tool${NC}

${CYAN}${BOLD}–ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï:${NC}
  sudo vless-proxy <command> [options]

${CYAN}${BOLD}–ö–û–ú–ê–ù–î–´:${NC}
  ${BOLD}add${NC}                    –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π reverse proxy (–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π wizard)
  ${BOLD}list${NC}                   –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö reverse proxies
  ${BOLD}show <domain>${NC}          –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ reverse proxy
  ${BOLD}remove <domain>${NC}        –£–¥–∞–ª–∏—Ç—å reverse proxy
  ${BOLD}renew-cert <domain>${NC}    –û–±–Ω–æ–≤–∏—Ç—å Let's Encrypt —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
  ${BOLD}enable <domain>${NC}        –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å reverse proxy
  ${BOLD}disable <domain>${NC}       –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å reverse proxy
  ${BOLD}check-certs${NC}            –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –≤—Å–µ—Ö —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤

${CYAN}${BOLD}–ü–†–ò–ú–ï–†–´:${NC}
  sudo vless-proxy add
  sudo vless-proxy list
  sudo vless-proxy show proxy.example.com
  sudo vless-proxy remove proxy.example.com
  sudo vless-proxy renew-cert proxy.example.com
  sudo vless-proxy check-certs

${CYAN}${BOLD}–ü–û–î–†–û–ë–ù–û–°–¢–ò:${NC}
  –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: /opt/vless/docs/REVERSE_PROXY_GUIDE.md

EOF
}

# =============================================================================
# Main Execution
# =============================================================================

main() {
    # Check if running as root
    if [ "$EUID" -ne 0 ]; then
        print_error "–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω —Å sudo"
        exit 1
    fi

    # Check if VLESS is installed
    if [ ! -d "$INSTALL_PATH" ]; then
        print_error "VLESS –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É."
        exit 1
    fi

    # Initialize database if not exists
    init_database

    # Parse command
    local command="${1:-}"

    case "$command" in
        add)
            cmd_add
            ;;
        list)
            cmd_list
            ;;
        show)
            cmd_show "${2:-}"
            ;;
        remove)
            cmd_remove "${2:-}"
            ;;
        renew-cert)
            cmd_renew_cert "${2:-}"
            ;;
        enable)
            cmd_enable "${2:-}"
            ;;
        disable)
            cmd_disable "${2:-}"
            ;;
        check-certs)
            cmd_check_certs
            ;;
        help|--help|-h)
            show_usage
            ;;
        "")
            print_error "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
            echo ""
            show_usage
            exit 1
            ;;
        *)
            print_error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: $command"
            echo ""
            show_usage
            exit 1
            ;;
    esac
}

# Run main function
main "$@"
