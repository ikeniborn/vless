<?xml version="1.0" encoding="UTF-8"?>
<plan>
    <header>
        <title>План исправления ошибки "WHITE: unbound variable"</title>
        <file>modules/common_utils.sh</file>
        <error_line>57</error_line>
        <priority>High</priority>
        <estimated_time>30 минут</estimated_time>
        <created>2025-09-21</created>
    </header>

    <problem_analysis>
        <description>
            При выполнении install.sh возникает ошибка "WHITE: unbound variable" на строке 57
            в функции print_header() файла modules/common_utils.sh
        </description>
        <root_cause>
            <item>Скрипт использует строгий режим set -euo pipefail</item>
            <item>Цветовые переменные определяются условно только при проверке RED (строка 28)</item>
            <item>Если RED уже определена в другом контексте, блок определения переменных пропускается</item>
            <item>WHITE может остаться неопределенной, что вызывает ошибку при использовании в print_header</item>
        </root_cause>
        <affected_functions>
            <function name="print_header" line="48"/>
            <function name="show_progress" line="357"/>
            <function name="spinner" line="376"/>
            <function name="show_system_info" line="425"/>
        </affected_functions>
    </problem_analysis>

    <solution_strategy>
        <approach>Проверка и определение каждой цветовой переменной индивидуально</approach>
        <justification>
            Позволяет гибко определять только недостающие переменные без дублирования
            уже определенных, обеспечивая совместимость с другими модулями
        </justification>
    </solution_strategy>

    <implementation_steps>
        <step number="1" priority="critical">
            <title>Замена условной проверки цветовых переменных</title>
            <location>
                <file>modules/common_utils.sh</file>
                <lines>28-38</lines>
            </location>
            <action>
                <description>
                    Заменить единую проверку на RED индивидуальными проверками для каждой переменной
                </description>
                <old_code>
if [[ -z "${RED:-}" ]]; then
    readonly RED='\033[0;31m'
    readonly GREEN='\033[0;32m'
    readonly YELLOW='\033[1;33m'
    readonly BLUE='\033[0;34m'
    readonly CYAN='\033[0;36m'
    readonly PURPLE='\033[0;35m'
    readonly WHITE='\033[1;37m'
    readonly BOLD='\033[1m'
    readonly NC='\033[0m'
fi
                </old_code>
                <new_code>
# Color definitions - check each variable individually
[[ -z "${RED:-}" ]] && readonly RED='\033[0;31m'
[[ -z "${GREEN:-}" ]] && readonly GREEN='\033[0;32m'
[[ -z "${YELLOW:-}" ]] && readonly YELLOW='\033[1;33m'
[[ -z "${BLUE:-}" ]] && readonly BLUE='\033[0;34m'
[[ -z "${CYAN:-}" ]] && readonly CYAN='\033[0;36m'
[[ -z "${PURPLE:-}" ]] && readonly PURPLE='\033[0;35m'
[[ -z "${WHITE:-}" ]] && readonly WHITE='\033[1;37m'
[[ -z "${BOLD:-}" ]] && readonly BOLD='\033[1m'
[[ -z "${NC:-}" ]] && readonly NC='\033[0m'
                </new_code>
            </action>
            <validation>
                <test>bash -n modules/common_utils.sh</test>
                <test>echo ${WHITE:-"NOT_DEFINED"}</test>
            </validation>
        </step>

        <step number="2" priority="high">
            <title>Добавление защитных проверок в функции вывода</title>
            <location>
                <file>modules/common_utils.sh</file>
                <lines>48-62</lines>
            </location>
            <action>
                <description>
                    Добавить защитные проверки переменных в функцию print_header
                    для предотвращения ошибок в будущем
                </description>
                <modification>
                    Добавить в начало print_header проверку:
                    # Ensure color variables are defined
                    local white_color="${WHITE:-\033[1;37m}"
                    local blue_color="${BLUE:-\033[0;34m}"
                    local nc_color="${NC:-\033[0m}"
                    local bold_color="${BOLD:-\033[1m}"
                </modification>
            </action>
        </step>

        <step number="3" priority="medium">
            <title>Обновление других функций вывода</title>
            <location>
                <file>modules/common_utils.sh</file>
                <lines>357-390</lines>
            </location>
            <action>
                <description>
                    Применить аналогичную защиту к функциям show_progress и spinner
                </description>
                <functions>
                    <function name="show_progress">
                        Добавить: local cyan_color="${CYAN:-\033[0;36m}"
                        Заменить ${CYAN} на ${cyan_color}
                    </function>
                    <function name="spinner">
                        Добавить: local cyan_color="${CYAN:-\033[0;36m}"
                        Заменить ${CYAN} на ${cyan_color}
                    </function>
                </functions>
            </action>
        </step>

        <step number="4" priority="low">
            <title>Добавление функции проверки цветовых переменных</title>
            <location>
                <file>modules/common_utils.sh</file>
                <lines>После строки 467</lines>
            </location>
            <action>
                <description>
                    Создать утилитарную функцию для проверки определения всех цветовых переменных
                </description>
                <new_function>
# Check if all color variables are properly defined
check_color_variables() {
    local required_colors=("RED" "GREEN" "YELLOW" "BLUE" "CYAN" "PURPLE" "WHITE" "BOLD" "NC")
    local missing_colors=()

    for color in "${required_colors[@]}"; do
        if [[ -z "${!color:-}" ]]; then
            missing_colors+=("$color")
        fi
    done

    if [[ ${#missing_colors[@]} -gt 0 ]]; then
        echo "WARNING: Missing color variables: ${missing_colors[*]}" >&2
        return 1
    fi

    return 0
}
                </new_function>
            </action>
        </step>
    </implementation_steps>

    <compatibility_checks>
        <check number="1">
            <title>Проверка совместимости с install.sh</title>
            <action>
                Убедиться, что install.sh не определяет цветовые переменные до загрузки common_utils.sh
            </action>
            <files>
                <file>install.sh</file>
            </files>
            <command>grep -n "RED\|WHITE\|GREEN" install.sh</command>
        </check>

        <check number="2">
            <title>Проверка других модулей проекта</title>
            <action>
                Проверить все модули на использование цветовых переменных
            </action>
            <files>
                <file>modules/*.sh</file>
            </files>
            <command>grep -r "WHITE\|RED\|GREEN" modules/ --include="*.sh"</command>
        </check>

        <check number="3">
            <title>Проверка экспорта переменных</title>
            <action>
                Убедиться, что все цветовые переменные правильно экспортируются
            </action>
            <location>
                <file>modules/common_utils.sh</file>
                <line>510</line>
            </location>
            <validation>Проверить строку экспорта цветовых констант</validation>
        </check>
    </compatibility_checks>

    <testing_plan>
        <test number="1" type="syntax">
            <title>Проверка синтаксиса</title>
            <command>bash -n modules/common_utils.sh</command>
            <expected_result>Отсутствие синтаксических ошибок</expected_result>
        </test>

        <test number="2" type="variable_definition">
            <title>Проверка определения переменных</title>
            <command>
source modules/common_utils.sh && echo "WHITE=${WHITE:-UNDEFINED}"
            </command>
            <expected_result>WHITE должна быть определена с корректным значением</expected_result>
        </test>

        <test number="3" type="function_execution">
            <title>Тест функции print_header</title>
            <command>
source modules/common_utils.sh && print_header "Test Header"
            </command>
            <expected_result>Корректный вывод заголовка без ошибок</expected_result>
        </test>

        <test number="4" type="integration">
            <title>Тест интеграции с install.sh</title>
            <command>bash -n install.sh</command>
            <expected_result>Отсутствие ошибок "unbound variable"</expected_result>
        </test>

        <test number="5" type="color_compatibility">
            <title>Тест предопределенных переменных</title>
            <setup>
                # Симуляция предопределенной RED
                export RED='\033[0;31m'
                source modules/common_utils.sh
                print_header "Test with predefined RED"
            </setup>
            <expected_result>Корректная работа с частично предопределенными переменными</expected_result>
        </test>

        <test number="6" type="eperm_protection">
            <title>Проверка EPERM protection</title>
            <command>
timeout 10 bash -c "source modules/common_utils.sh && print_header 'EPERM Test'"
            </command>
            <expected_result>Корректное завершение без зависания процесса</expected_result>
        </test>
    </testing_plan>

    <rollback_plan>
        <backup>
            <action>Создать резервную копию перед изменениями</action>
            <command>cp modules/common_utils.sh modules/common_utils.sh.backup.$(date +%Y%m%d_%H%M%S)</command>
        </backup>
        <restore>
            <action>В случае проблем восстановить из резервной копии</action>
            <command>cp modules/common_utils.sh.backup.* modules/common_utils.sh</command>
        </restore>
        <verification>
            <action>Проверить работоспособность после восстановления</action>
            <command>bash -n modules/common_utils.sh && source modules/common_utils.sh</command>
        </verification>
    </rollback_plan>

    <post_implementation>
        <documentation>
            <update_files>
                <file>docs/troubleshooting.md</file>
                <file>CLAUDE.md</file>
            </update_files>
            <add_section>Исправление ошибок цветовых переменных</add_section>
        </documentation>
        <monitoring>
            <action>Добавить проверку в тестовый suite</action>
            <file>tests/test_common_utils.sh</file>
            <test_case>test_color_variables_definition</test_case>
        </monitoring>
        <best_practices>
            <rule>Всегда проверять определение переменных перед использованием</rule>
            <rule>Использовать ${VAR:-default} паттерн для безопасного доступа</rule>
            <rule>Тестировать совместимость при изменении общих модулей</rule>
        </best_practices>
    </post_implementation>

    <success_criteria>
        <criterion>install.sh запускается без ошибки "WHITE: unbound variable"</criterion>
        <criterion>Все функции вывода работают корректно</criterion>
        <criterion>Совместимость с существующими модулями сохранена</criterion>
        <criterion>Тесты проходят успешно</criterion>
        <criterion>Не нарушена EPERM protection система</criterion>
    </success_criteria>

    <risk_assessment>
        <risk level="low">
            <description>Изменение может повлиять на другие модули</description>
            <mitigation>Тщательное тестирование всех модулей перед развертыванием</mitigation>
        </risk>
        <risk level="low">
            <description>Возможны конфликты с предопределенными переменными</description>
            <mitigation>Использование индивидуальных проверок для каждой переменной</mitigation>
        </risk>
        <risk level="minimal">
            <description>Синтаксические ошибки</description>
            <mitigation>Проверка bash -n перед применением изменений</mitigation>
        </risk>
    </risk_assessment>

    <timeline>
        <phase name="Preparation" duration="5 min">
            <task>Создание резервной копии файла</task>
            <task>Анализ зависимостей</task>
        </phase>
        <phase name="Implementation" duration="15 min">
            <task>Изменение логики определения переменных</task>
            <task>Добавление защитных проверок</task>
            <task>Обновление функций вывода</task>
        </phase>
        <phase name="Testing" duration="10 min">
            <task>Синтаксическая проверка</task>
            <task>Функциональное тестирование</task>
            <task>Интеграционные тесты</task>
        </phase>
    </timeline>
</plan>