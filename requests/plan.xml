<?xml version="1.0" encoding="UTF-8"?>
<plan>
    <title>VLESS Docker Services Fix - Detailed Implementation Plan</title>
    <description>Comprehensive plan to fix Docker services issues including permissions, docker-compose.yml mismatch, and auto-start functionality</description>
    <version>1.0</version>
    <created_date>2025-09-24</created_date>

    <problem_summary>
        <issue id="1">Docker-compose.yml version mismatch between repository (modern security-hardened) and system (legacy basic)</issue>
        <issue id="2">Permission conflicts: vless user (UID=995, GID=982) vs container expectations (user: "1000:1000")</issue>
        <issue id="3">No automatic service startup after installation completion</issue>
        <issue id="4">Missing health check validation after container startup</issue>
    </problem_summary>

    <solution_approach>
        <strategy>Fix installer modules for automatic configuration (Selected Solution #3)</strategy>
        <rationale>Provides systematic solution that prevents future occurrences and improves user experience</rationale>
    </solution_approach>

    <phases>
        <phase id="1" name="Immediate Fix">
            <description>Resolve current service startup issues to restore functionality</description>
            <priority>Critical</priority>
            <estimated_time>15 minutes</estimated_time>

            <tasks>
                <task id="1.1">
                    <name>Update system docker-compose.yml</name>
                    <description>Replace old docker-compose.yml with updated version from repository</description>
                    <files_modified>
                        <file>/opt/vless/docker-compose.yml</file>
                    </files_modified>
                    <commands>
                        <command>sudo cp /home/ikeniborn/Documents/Project/vless/config/docker-compose.yml /opt/vless/docker-compose.yml</command>
                        <command>sudo chown vless:vless /opt/vless/docker-compose.yml</command>
                        <command>sudo chmod 644 /opt/vless/docker-compose.yml</command>
                    </commands>
                    <validation>
                        <check>Verify file copied and has correct ownership</check>
                        <check>Validate docker-compose syntax with docker-compose config</check>
                    </validation>
                </task>

                <task id="1.2">
                    <name>Fix container user permissions</name>
                    <description>Adjust user directive in docker-compose.yml to match vless system user UID</description>
                    <approach>Change user: "1000:1000" to user: "995:982" to match system vless user</approach>
                    <files_modified>
                        <file>/opt/vless/docker-compose.yml</file>
                    </files_modified>
                    <implementation>
                        <step>Edit docker-compose.yml xray service user directive</step>
                        <step>Change from user: "1000:1000" to user: "995:982"</step>
                        <step>Maintain security hardening features from new version</step>
                    </implementation>
                </task>

                <task id="1.3">
                    <name>Fix file permissions for container access</name>
                    <description>Ensure config files are readable by container user</description>
                    <files_modified>
                        <file>/opt/vless/config/config.json</file>
                        <file>/opt/vless/config/</file>
                        <file>/opt/vless/logs/</file>
                        <file>/opt/vless/certs/</file>
                    </files_modified>
                    <commands>
                        <command>sudo chmod 644 /opt/vless/config/config.json</command>
                        <command>sudo chmod 755 /opt/vless/config /opt/vless/logs /opt/vless/certs</command>
                        <command>sudo chown -R vless:vless /opt/vless/config /opt/vless/logs /opt/vless/certs</command>
                    </commands>
                </task>

                <task id="1.4">
                    <name>Test service startup</name>
                    <description>Start services and verify functionality</description>
                    <commands>
                        <command>cd /opt/vless && sudo -u vless docker-compose down</command>
                        <command>cd /opt/vless && sudo -u vless docker-compose up -d</command>
                    </commands>
                    <validation>
                        <check>Verify vless-xray container starts without errors</check>
                        <check>Check container logs for successful startup</check>
                        <check>Confirm xray config.json is readable by container</check>
                        <check>Validate health checks pass</check>
                    </validation>
                </task>
            </tasks>
        </phase>

        <phase id="2" name="Installer Module Updates">
            <description>Fix installer modules to handle permissions and docker-compose.yml management correctly</description>
            <priority>High</priority>
            <estimated_time>45 minutes</estimated_time>

            <tasks>
                <task id="2.1">
                    <name>Enhance container_management.sh</name>
                    <description>Add functions for proper permission handling and docker-compose.yml management</description>
                    <files_modified>
                        <file>/home/ikeniborn/Documents/Project/vless/modules/container_management.sh</file>
                    </files_modified>

                    <new_functions>
                        <function name="ensure_docker_compose_updated">
                            <description>Check and update docker-compose.yml if repository version is newer</description>
                            <parameters>
                                <param>source_file: Path to repository docker-compose.yml</param>
                                <param>target_file: Path to system docker-compose.yml</param>
                            </parameters>
                            <logic>
                                <step>Compare file timestamps/checksums</step>
                                <step>Backup existing file if different</step>
                                <step>Copy new version and adjust user UID/GID</step>
                                <step>Set proper ownership and permissions</step>
                            </logic>
                        </function>

                        <function name="fix_container_permissions">
                            <description>Adjust docker-compose.yml user directives to match system user</description>
                            <parameters>
                                <param>compose_file: Path to docker-compose.yml</param>
                                <param>system_user: Target system user name</param>
                            </parameters>
                            <logic>
                                <step>Get system user UID and GID</step>
                                <step>Update user directives in docker-compose.yml</step>
                                <step>Validate yaml syntax</step>
                                <step>Set proper file ownership</step>
                            </logic>
                        </function>

                        <function name="ensure_proper_file_permissions">
                            <description>Set correct permissions for all container-accessed files</description>
                            <parameters>
                                <param>base_dir: Base directory (/opt/vless)</param>
                                <param>system_user: System user name</param>
                            </parameters>
                            <logic>
                                <step>Set directory permissions (755)</step>
                                <step>Set config file permissions (644)</step>
                                <step>Set log directory permissions (755)</step>
                                <step>Set certificate directory permissions (755)</step>
                                <step>Ensure proper ownership</step>
                            </logic>
                        </function>

                        <function name="start_services_with_health_check">
                            <description>Start services and wait for health validation</description>
                            <logic>
                                <step>Start containers with docker-compose up -d</step>
                                <step>Wait for containers to reach running state</step>
                                <step>Perform health checks with retries</step>
                                <step>Log status and any issues</step>
                                <step>Return success/failure status</step>
                            </logic>
                        </function>
                    </new_functions>

                    <modifications>
                        <modification location="prepare_system_environment()">
                            <change>Add call to ensure_docker_compose_updated()</change>
                            <change>Add call to fix_container_permissions()</change>
                            <change>Replace manual ownership setting with ensure_proper_file_permissions()</change>
                        </modification>

                        <modification location="start_services()">
                            <change>Replace basic startup with start_services_with_health_check()</change>
                            <change>Add comprehensive error handling and logging</change>
                        </modification>
                    </modifications>
                </task>

                <task id="2.2">
                    <name>Update docker_setup.sh module</name>
                    <description>Add post-installation container deployment</description>
                    <files_modified>
                        <file>/home/ikeniborn/Documents/Project/vless/modules/docker_setup.sh</file>
                    </files_modified>

                    <modifications>
                        <modification location="install_docker_complete()">
                            <change>Add call to configure container environment after Docker installation</change>
                            <change>Trigger container_management setup if VLESS system detected</change>
                        </modification>
                    </modifications>

                    <new_functions>
                        <function name="post_docker_vless_setup">
                            <description>Configure VLESS containers after Docker installation</description>
                            <logic>
                                <step>Check if /opt/vless exists</step>
                                <step>Call container_management.sh prepare_system_environment</step>
                                <step>Attempt to start services if configuration exists</step>
                            </logic>
                        </function>
                    </new_functions>
                </task>

                <task id="2.3">
                    <name>Update phase integration script</name>
                    <description>Ensure Phase 2 includes service startup</description>
                    <files_modified>
                        <file>/home/ikeniborn/Documents/Project/vless/modules/phase4_integration.sh</file>
                    </files_modified>

                    <modifications>
                        <modification location="run_phase_2()">
                            <change>Add service startup after VLESS server implementation</change>
                            <change>Include health check validation</change>
                            <change>Log startup status</change>
                        </modification>
                    </modifications>
                </task>
            </tasks>
        </phase>

        <phase id="3" name="Installation Process Enhancement">
            <description>Improve main installer to handle service startup automatically</description>
            <priority>High</priority>
            <estimated_time>30 minutes</estimated_time>

            <tasks>
                <task id="3.1">
                    <name>Enhance install.sh main script</name>
                    <description>Add automatic service startup and validation after installation</description>
                    <files_modified>
                        <file>/home/ikeniborn/Documents/Project/vless/install.sh</file>
                    </files_modified>

                    <modifications>
                        <modification location="end of installation process">
                            <change>Add post-installation service startup</change>
                            <change>Include service health validation</change>
                            <change>Display service status to user</change>
                            <change>Provide troubleshooting guidance if services fail</change>
                        </modification>
                    </modifications>

                    <new_sections>
                        <section name="post_installation_startup">
                            <description>Handle service startup after successful installation</description>
                            <logic>
                                <step>Call container_management.sh to start services</step>
                                <step>Wait for health checks to pass</step>
                                <step>Display service status</step>
                                <step>Show user connection information if successful</step>
                            </logic>
                        </section>
                    </new_sections>
                </task>
            </tasks>
        </phase>

        <phase id="4" name="Testing and Validation">
            <description>Comprehensive testing of fixes and enhancements</description>
            <priority>Medium</priority>
            <estimated_time>60 minutes</estimated_time>

            <tasks>
                <task id="4.1">
                    <name>Create comprehensive test suite</name>
                    <description>Develop tests for permission handling and service startup</description>
                    <files_created>
                        <file>/home/ikeniborn/Documents/Project/vless/tests/test_docker_services_fix.sh</file>
                    </files_created>

                    <test_categories>
                        <category name="Permission Tests">
                            <test>Verify vless user UID/GID detection</test>
                            <test>Test docker-compose.yml user directive updates</test>
                            <test>Validate file permission corrections</test>
                        </category>

                        <category name="Docker Compose Management">
                            <test>Test docker-compose.yml version detection</test>
                            <test>Verify file update and backup processes</test>
                            <test>Validate YAML syntax after modifications</test>
                        </category>

                        <category name="Service Startup Tests">
                            <test>Test container startup with correct permissions</test>
                            <test>Verify health check functionality</test>
                            <test>Test service recovery from failures</test>
                        </category>

                        <category name="Integration Tests">
                            <test>Full installer run with service startup</test>
                            <test>Test upgrade scenarios (existing installation)</test>
                            <test>Verify backward compatibility</test>
                        </category>
                    </test_categories>
                </task>

                <task id="4.2">
                    <name>Manual testing procedures</name>
                    <description>Step-by-step manual validation procedures</description>
                    <procedures>
                        <procedure name="Fresh Installation Test">
                            <step>Clean test environment setup</step>
                            <step>Run installer with new enhancements</step>
                            <step>Verify automatic service startup</step>
                            <step>Check container logs for errors</step>
                            <step>Test VLESS connection functionality</step>
                        </procedure>

                        <procedure name="Existing Installation Upgrade">
                            <step>Test with current broken installation</step>
                            <step>Run container_management.sh fixes</step>
                            <step>Verify service recovery</step>
                            <step>Check for regression issues</step>
                        </procedure>

                        <procedure name="Permission Edge Cases">
                            <step>Test with different system user UIDs</step>
                            <step>Verify handling of permission conflicts</step>
                            <step>Test recovery from permission errors</step>
                        </procedure>
                    </procedures>
                </task>
            </tasks>
        </phase>

        <phase id="5" name="Documentation and Maintenance">
            <description>Update documentation and add maintenance utilities</description>
            <priority>Low</priority>
            <estimated_time>30 minutes</estimated_time>

            <tasks>
                <task id="5.1">
                    <name>Update troubleshooting documentation</name>
                    <description>Add common issues and solutions related to Docker services</description>
                    <files_modified>
                        <file>/home/ikeniborn/Documents/Project/vless/docs/troubleshooting.md</file>
                    </files_modified>

                    <sections_to_add>
                        <section name="Docker Services Issues">
                            <subsection>Container startup failures</subsection>
                            <subsection>Permission-related errors</subsection>
                            <subsection>Docker-compose.yml mismatches</subsection>
                            <subsection>Health check failures</subsection>
                        </section>
                    </sections_to_add>
                </task>

                <task id="5.2">
                    <name>Add maintenance utilities</name>
                    <description>Create utilities for ongoing maintenance of Docker services</description>
                    <files_created>
                        <file>/home/ikeniborn/Documents/Project/vless/scripts/fix_docker_services.sh</file>
                    </files_created>

                    <utilities>
                        <utility name="fix_docker_services.sh">
                            <description>Standalone script to fix common Docker service issues</description>
                            <functions>
                                <function>Detect and fix permission issues</function>
                                <function>Update docker-compose.yml if needed</function>
                                <function>Restart services with health validation</function>
                                <function>Generate diagnostic report</function>
                            </functions>
                        </utility>
                    </utilities>
                </task>
            </tasks>
        </phase>
    </phases>

    <implementation_details>
        <code_changes>
            <file path="/home/ikeniborn/Documents/Project/vless/modules/container_management.sh">
                <change location="after line 127" type="addition">
                    <code><![CDATA[
# Ensure docker-compose.yml is up to date
ensure_docker_compose_updated() {
    local source_file="$1"
    local target_file="$2"
    local system_user="${3:-vless}"

    log_info "Checking docker-compose.yml version..."

    if [[ ! -f "$source_file" ]]; then
        log_warn "Source docker-compose.yml not found: $source_file"
        return 1
    fi

    # Check if update is needed
    local needs_update=false
    if [[ ! -f "$target_file" ]]; then
        needs_update=true
        log_info "Target docker-compose.yml does not exist, will create"
    else
        # Compare checksums
        local source_checksum=$(sha256sum "$source_file" | cut -d' ' -f1)
        local target_checksum=$(sha256sum "$target_file" | cut -d' ' -f1)

        if [[ "$source_checksum" != "$target_checksum" ]]; then
            needs_update=true
            log_info "docker-compose.yml versions differ, will update"
        fi
    fi

    if [[ "$needs_update" == "true" ]]; then
        # Backup existing file
        if [[ -f "$target_file" ]]; then
            backup_file "$target_file"
        fi

        # Copy and update
        cp "$source_file" "$target_file"
        fix_container_permissions "$target_file" "$system_user"

        log_success "docker-compose.yml updated successfully"
    else
        log_info "docker-compose.yml is up to date"
    fi
}

# Fix container user permissions in docker-compose.yml
fix_container_permissions() {
    local compose_file="$1"
    local system_user="${2:-vless}"

    log_info "Fixing container permissions for user: $system_user"

    # Get system user UID and GID
    local user_info
    if ! user_info=$(id "$system_user" 2>/dev/null); then
        log_error "System user not found: $system_user"
        return 1
    fi

    local uid=$(echo "$user_info" | grep -o 'uid=[0-9]*' | cut -d'=' -f2)
    local gid=$(echo "$user_info" | grep -o 'gid=[0-9]*' | cut -d'=' -f2)

    log_debug "System user $system_user has UID=$uid, GID=$gid"

    # Update user directive in docker-compose.yml
    if grep -q 'user:.*"[0-9]*:[0-9]*"' "$compose_file"; then
        sed -i "s/user: \"[0-9]*:[0-9]*\"/user: \"$uid:$gid\"/" "$compose_file"
        log_info "Updated container user to $uid:$gid"
    else
        log_debug "No user directive found in docker-compose.yml"
    fi

    # Validate YAML syntax
    if command_exists docker-compose; then
        if docker-compose -f "$compose_file" config >/dev/null 2>&1; then
            log_success "docker-compose.yml syntax validated"
        else
            log_error "docker-compose.yml syntax validation failed"
            return 1
        fi
    fi

    # Set proper ownership
    chown "$system_user:$system_user" "$compose_file"
    chmod 644 "$compose_file"
}

# Ensure proper file permissions for containers
ensure_proper_file_permissions() {
    local base_dir="$1"
    local system_user="${2:-vless}"

    log_info "Setting proper file permissions for containers..."

    local directories=(
        "$base_dir/config"
        "$base_dir/logs"
        "$base_dir/certs"
    )

    # Set directory permissions
    for dir in "${directories[@]}"; do
        if [[ -d "$dir" ]]; then
            chmod 755 "$dir"
            chown -R "$system_user:$system_user" "$dir"
            log_debug "Set permissions for directory: $dir"
        fi
    done

    # Set specific file permissions
    local config_file="$base_dir/config/config.json"
    if [[ -f "$config_file" ]]; then
        chmod 644 "$config_file"
        chown "$system_user:$system_user" "$config_file"
        log_debug "Set permissions for config file: $config_file"
    fi

    log_success "File permissions configured correctly"
}

# Start services with comprehensive health checking
start_services_with_health_check() {
    local service="${1:-}"
    local max_wait="${2:-120}"

    log_info "Starting services with health validation..."

    # Start services
    if [[ -n "$service" ]]; then
        if ! safe_docker_compose "$START_TIMEOUT" up -d "$service"; then
            log_error "Failed to start service: $service"
            return 1
        fi
    else
        if ! safe_docker_compose "$START_TIMEOUT" up -d; then
            log_error "Failed to start services"
            return 1
        fi
    fi

    # Wait for containers to be in running state
    log_info "Waiting for containers to reach running state..."
    local wait_time=0
    while [[ $wait_time -lt $max_wait ]]; do
        local all_running=true
        local containers=("vless-xray" "vless-nginx" "vless-watchtower")

        for container in "${containers[@]}"; do
            if [[ -n "$service" && "$container" != "vless-$service" ]]; then
                continue
            fi

            local state
            state=$(docker inspect --format='{{.State.Status}}' "$container" 2>/dev/null || echo "not_found")

            if [[ "$state" != "running" ]]; then
                all_running=false
                log_debug "Container $container state: $state"
                break
            fi
        done

        if [[ "$all_running" == "true" ]]; then
            log_success "All containers are running"
            break
        fi

        sleep 5
        wait_time=$((wait_time + 5))
    done

    if [[ $wait_time -ge $max_wait ]]; then
        log_error "Timeout waiting for containers to start"
        return 1
    fi

    # Perform health checks
    log_info "Performing health checks..."
    if ! wait_for_services_healthy "$max_wait"; then
        log_error "Health check validation failed"
        return 1
    fi

    log_success "Services started and validated successfully"
    return 0
}
                    ]]></code>
                </change>

                <change location="line 139" type="modification">
                    <old_code>    prepare_system_environment</old_code>
                    <new_code>    prepare_system_environment

    # Update docker-compose.yml if needed
    ensure_docker_compose_updated "$COMPOSE_FILE" "$SYSTEM_COMPOSE_FILE"

    # Ensure proper permissions
    ensure_proper_file_permissions "/opt/vless"</new_code>
                </change>

                <change location="line 160-164" type="modification">
                    <old_code>    # Wait for services to be healthy
    wait_for_services_healthy

    log_success "Services started successfully"
    show_service_status</old_code>
                    <new_code>    # Start services with comprehensive health checking
    if ! start_services_with_health_check "$service"; then
        log_error "Failed to start and validate services"
        return 1
    fi

    log_success "Services started and validated successfully"
    show_service_status</new_code>
                </change>
            </file>
        </code_changes>

        <configuration_updates>
            <update target="/opt/vless/docker-compose.yml">
                <change>Update user directive from "1000:1000" to "995:982" (vless user UID/GID)</change>
                <change>Keep all security hardening features from repository version</change>
                <change>Ensure proper volume mounts and network configuration</change>
            </update>
        </configuration_updates>
    </implementation_details>

    <testing_strategy>
        <test_environments>
            <environment name="Current System">
                <description>Test fixes on current broken installation</description>
                <validation>
                    <check>Services start without errors</check>
                    <check>Health checks pass</check>
                    <check>Container logs show successful startup</check>
                    <check>VLESS functionality works</check>
                </validation>
            </environment>

            <environment name="Fresh Installation">
                <description>Test complete installer with new enhancements</description>
                <validation>
                    <check>Automatic service startup after installation</check>
                    <check>Correct permissions set during installation</check>
                    <check>No manual intervention required</check>
                </validation>
            </environment>

            <environment name="Upgrade Scenario">
                <description>Test upgrade from old to new docker-compose.yml</description>
                <validation>
                    <check>Backup of old configuration</check>
                    <check>Successful migration to new format</check>
                    <check>No service interruption</check>
                </validation>
            </environment>
        </test_environments>

        <test_procedures>
            <procedure name="Immediate Fix Testing">
                <step>Apply Phase 1 changes (docker-compose.yml update and permission fixes)</step>
                <step>Start services and verify logs</step>
                <step>Test VLESS connection</step>
                <step>Monitor for 10 minutes to ensure stability</step>
            </procedure>

            <procedure name="Installer Enhancement Testing">
                <step>Create clean test environment</step>
                <step>Run enhanced installer</step>
                <step>Verify automatic service startup</step>
                <step>Check for any error messages or warnings</step>
                <step>Validate final system state</step>
            </procedure>

            <procedure name="Edge Case Testing">
                <step>Test with different user UIDs</step>
                <step>Test with corrupted docker-compose.yml</step>
                <step>Test with Docker service down</step>
                <step>Test recovery from various failure states</step>
            </procedure>
        </test_procedures>
    </testing_strategy>

    <rollback_procedure>
        <description>Steps to revert changes if issues occur during implementation</description>
        <steps>
            <step id="1">
                <action>Stop all running containers</action>
                <command>cd /opt/vless && sudo docker-compose down</command>
            </step>

            <step id="2">
                <action>Restore original docker-compose.yml</action>
                <command>sudo cp /opt/vless/docker-compose.yml.backup /opt/vless/docker-compose.yml</command>
                <note>Backup is created automatically by backup_file() function</note>
            </step>

            <step id="3">
                <action>Restore module files if modified</action>
                <command>git checkout HEAD -- modules/container_management.sh</command>
                <command>git checkout HEAD -- modules/docker_setup.sh</command>
            </step>

            <step id="4">
                <action>Restore file permissions to original state</action>
                <command>sudo chown -R vless:vless /opt/vless/</command>
                <command>sudo chmod 755 /opt/vless/config /opt/vless/logs /opt/vless/certs</command>
                <command>sudo chmod 644 /opt/vless/config/config.json</command>
            </step>

            <step id="5">
                <action>Start services with original configuration</action>
                <command>cd /opt/vless && sudo docker-compose up -d</command>
            </step>
        </steps>

        <validation>
            <check>Verify services return to previous state</check>
            <check>Check container logs for startup issues</check>
            <check>Confirm no data loss occurred</check>
        </validation>
    </rollback_procedure>

    <success_criteria>
        <immediate_goals>
            <goal>Docker services start successfully without manual intervention</goal>
            <goal>Container permissions allow proper access to configuration files</goal>
            <goal>Health checks pass consistently</goal>
            <goal>VLESS functionality works end-to-end</goal>
        </immediate_goals>

        <long_term_goals>
            <goal>New installations automatically start services</goal>
            <goal>Installer handles permission conflicts automatically</goal>
            <goal>System is resilient to docker-compose.yml updates</goal>
            <goal>Comprehensive error handling and recovery</goal>
        </long_term_goals>

        <quality_metrics>
            <metric>Zero manual intervention required for service startup</metric>
            <metric>Service startup time under 60 seconds</metric>
            <metric>Health checks pass within 30 seconds</metric>
            <metric>95% success rate for automated installations</metric>
        </quality_metrics>
    </success_criteria>

    <timeline>
        <milestones>
            <milestone date="2025-09-24 immediate" phase="1">
                <deliverable>Services restored and functional</deliverable>
                <deliverable>Immediate user issues resolved</deliverable>
            </milestone>

            <milestone date="2025-09-24 +2 hours" phase="2-3">
                <deliverable>Enhanced installer modules completed</deliverable>
                <deliverable>Automatic service startup implemented</deliverable>
            </milestone>

            <milestone date="2025-09-24 +4 hours" phase="4">
                <deliverable>Comprehensive testing completed</deliverable>
                <deliverable>All edge cases validated</deliverable>
            </milestone>

            <milestone date="2025-09-24 +5 hours" phase="5">
                <deliverable>Documentation updated</deliverable>
                <deliverable>Maintenance utilities created</deliverable>
            </milestone>
        </milestones>

        <critical_path>
            <task>Phase 1: Immediate service restoration (blocking user)</task>
            <task>Phase 2: Installer enhancements (prevents future issues)</task>
            <task>Phase 4: Testing validation (ensures reliability)</task>
        </critical_path>
    </timeline>

    <risk_assessment>
        <risks>
            <risk level="low" impact="medium">
                <description>Permission changes might affect other system components</description>
                <mitigation>Create backups before changes, test in isolated environment</mitigation>
            </risk>

            <risk level="medium" impact="high">
                <description>Docker-compose.yml updates might introduce new issues</description>
                <mitigation>Comprehensive testing, rollback procedure available</mitigation>
            </risk>

            <risk level="low" impact="low">
                <description>Service startup timing issues in different environments</description>
                <mitigation>Configurable timeouts, robust retry logic</mitigation>
            </risk>
        </risks>

        <contingencies>
            <contingency scenario="Services fail to start after fixes">
                <action>Execute rollback procedure</action>
                <action>Analyze logs for specific failure points</action>
                <action>Apply targeted fixes rather than wholesale changes</action>
            </contingency>

            <contingency scenario="Permission conflicts persist">
                <action>Investigate alternative containerization approaches</action>
                <action>Consider privileged container execution as temporary measure</action>
                <action>Document specific environment requirements</action>
            </contingency>
        </contingencies>
    </risk_assessment>

    <maintenance_considerations>
        <ongoing_tasks>
            <task>Monitor service startup success rates</task>
            <task>Update docker-compose.yml management for future repository changes</task>
            <task>Maintain compatibility with Docker version updates</task>
            <task>Review and update permission handling for new security requirements</task>
        </ongoing_tasks>

        <monitoring_recommendations>
            <recommendation>Add service startup monitoring to health check system</recommendation>
            <recommendation>Log permission-related issues for trend analysis</recommendation>
            <recommendation>Create alerts for docker-compose.yml version mismatches</recommendation>
        </monitoring_recommendations>
    </maintenance_considerations>
</plan>