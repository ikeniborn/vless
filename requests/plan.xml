<?xml version="1.0" encoding="UTF-8"?>
<implementation_plan>
    <project_info>
        <name>VLESS+Reality VPN Management System</name>
        <description>Comprehensive implementation plan for a modular bash-based VLESS+Reality VPN management system</description>
        <version>1.0.0</version>
        <target_systems>Ubuntu 20.04+, Debian 10+</target_systems>
    </project_info>

    <technical_architecture>
        <core_technologies>
            <technology name="Bash" version="5.0+" purpose="Main system scripting language"/>
            <technology name="Docker" version="20.10+" purpose="Container runtime"/>
            <technology name="Docker Compose" version="2.0+" purpose="Multi-container orchestration"/>
            <technology name="Xray-core" version="latest" purpose="VLESS+Reality protocol implementation"/>
            <technology name="Python" version="3.8+" purpose="QR code generation and Telegram bot"/>
            <technology name="UFW" version="0.36+" purpose="Firewall management"/>
        </core_technologies>

        <security_framework>
            <encryption>VLESS protocol with Reality TLS masking</encryption>
            <authentication>UUID-based client identification</authentication>
            <firewall>UFW with minimal port exposure (443, 22)</firewall>
            <certificates>Reality uses real TLS certificates from target domains</certificates>
        </security_framework>
    </technical_architecture>

    <file_structure>
        <root_directory path="/home/ikeniborn/Documents/Project/vless">
            <main_script>
                <file path="install.sh" purpose="Main installation entry point"/>
            </main_script>

            <modules_directory path="modules/">
                <file path="common_utils.sh" purpose="Common utilities and logging functions"/>
                <file path="system_update.sh" purpose="System update and preparation"/>
                <file path="docker_setup.sh" purpose="Docker and Docker Compose installation"/>
                <file path="config_templates.sh" purpose="Configuration template generation"/>
                <file path="container_management.sh" purpose="Docker container lifecycle management"/>
                <file path="user_management.sh" purpose="VLESS user CRUD operations"/>
                <file path="user_database.sh" purpose="JSON-based user database operations"/>
                <file path="ufw_config.sh" purpose="UFW firewall configuration"/>
                <file path="cert_management.sh" purpose="TLS certificate management"/>
                <file path="backup_restore.sh" purpose="Backup and restore operations"/>
                <file path="monitoring.sh" purpose="Service monitoring and health checks"/>
                <file path="maintenance_utils.sh" purpose="System maintenance tasks"/>
                <file path="security_hardening.sh" purpose="System security hardening"/>
                <file path="logging_setup.sh" purpose="Centralized logging configuration"/>
                <file path="qr_generator.py" purpose="QR code generation for client configs"/>
                <file path="telegram_bot.py" purpose="Telegram bot for remote management"/>
                <file path="telegram_bot_manager.sh" purpose="Telegram bot deployment and management"/>
                <file path="phase4_integration.sh" purpose="Phase 4 security integration"/>
            </modules_directory>

            <config_directory path="config/">
                <file path="docker-compose.yml" purpose="Docker Compose service definitions"/>
                <file path="xray_config_template.json" purpose="Xray-core configuration template"/>
                <file path="vless-vpn.service" purpose="Systemd service definition"/>
                <file path="bot_config.env" purpose="Telegram bot environment configuration"/>
            </config_directory>

            <tests_directory path="tests/">
                <file path="run_all_tests.sh" purpose="Master test runner"/>
                <file path="test_phase1_integration.sh" purpose="Phase 1 integration tests"/>
                <file path="test_phase2_integration.sh" purpose="Phase 2 integration tests"/>
                <file path="test_phase3_integration.sh" purpose="Phase 3 integration tests"/>
                <file path="test_phase4_security.sh" purpose="Phase 4 security tests"/>
                <file path="test_phase5_integration.sh" purpose="Phase 5 integration tests"/>
                <file path="test_common_utils.sh" purpose="Common utilities unit tests"/>
                <file path="test_user_management.sh" purpose="User management unit tests"/>
                <file path="test_docker_services.sh" purpose="Docker services tests"/>
                <file path="test_backup_restore.sh" purpose="Backup/restore functionality tests"/>
                <file path="test_security_hardening.sh" purpose="Security hardening tests"/>
                <file path="test_monitoring.sh" purpose="Monitoring functionality tests"/>
                <file path="test_cert_management.sh" purpose="Certificate management tests"/>
                <file path="test_telegram_bot_integration.py" purpose="Telegram bot integration tests"/>
                <file path="test_results_aggregator.sh" purpose="Test results aggregation"/>
                <subdirectory path="results/" purpose="Test output logs and reports"/>
            </tests_directory>

            <docs_directory path="docs/">
                <file path="installation.md" purpose="Installation guide"/>
                <file path="user_guide.md" purpose="User operation manual"/>
                <file path="api_reference.md" purpose="API and function reference"/>
                <file path="troubleshooting.md" purpose="Common issues and solutions"/>
            </docs_directory>

            <deployment_scripts>
                <file path="deploy_telegram_bot.sh" purpose="Telegram bot deployment script"/>
                <file path="requirements.txt" purpose="Python dependencies"/>
            </deployment_scripts>
        </root_directory>

        <system_directories>
            <directory path="/opt/vless" purpose="Main system installation directory">
                <subdirectory path="config" purpose="Xray configuration files"/>
                <subdirectory path="users" purpose="User database and profiles"/>
                <subdirectory path="logs" purpose="Service logs"/>
                <subdirectory path="backup" purpose="Backup storage"/>
                <subdirectory path="certs" purpose="TLS certificates"/>
            </directory>
        </system_directories>
    </file_structure>

    <implementation_phases>
        <phase id="1" name="Core Infrastructure Setup">
            <description>Establish basic system infrastructure and utilities</description>
            <duration>2-3 days</duration>
            <dependencies>None</dependencies>

            <tasks>
                <task id="1.1" priority="HIGH">
                    <name>Create project directory structure</name>
                    <description>Initialize all required directories and basic file structure</description>
                    <deliverables>
                        <file>modules/ directory with placeholder files</file>
                        <file>config/ directory</file>
                        <file>tests/ directory</file>
                        <file>docs/ directory</file>
                    </deliverables>
                </task>

                <task id="1.2" priority="HIGH">
                    <name>Implement common utilities module</name>
                    <description>Core logging, error handling, and utility functions</description>
                    <technical_specs>
                        <spec>Colored logging with timestamp and log levels</spec>
                        <spec>Error handling with exit codes</spec>
                        <spec>Input validation functions</spec>
                        <spec>System information detection</spec>
                        <spec>Network connectivity checks</spec>
                    </technical_specs>
                    <deliverables>
                        <file>modules/common_utils.sh</file>
                    </deliverables>
                </task>

                <task id="1.3" priority="HIGH">
                    <name>System update module</name>
                    <description>Automated system updates and package management</description>
                    <technical_specs>
                        <spec>Distribution detection (Ubuntu/Debian)</spec>
                        <spec>Package manager update (apt)</spec>
                        <spec>Essential package installation</spec>
                        <spec>System reboot handling if required</spec>
                    </technical_specs>
                    <deliverables>
                        <file>modules/system_update.sh</file>
                    </deliverables>
                </task>

                <task id="1.4" priority="HIGH">
                    <name>Docker setup module</name>
                    <description>Docker and Docker Compose installation and configuration</description>
                    <technical_specs>
                        <spec>Docker Engine installation via official repository</spec>
                        <spec>Docker Compose installation (latest version)</spec>
                        <spec>User permissions configuration</spec>
                        <spec>Docker daemon startup verification</spec>
                        <spec>Version compatibility checks</spec>
                    </technical_specs>
                    <deliverables>
                        <file>modules/docker_setup.sh</file>
                    </deliverables>
                </task>

                <task id="1.5" priority="MEDIUM">
                    <name>Main installation script</name>
                    <description>Entry point script with menu system</description>
                    <technical_specs>
                        <spec>Interactive menu interface</spec>
                        <spec>Root privilege verification</spec>
                        <spec>System compatibility checks</spec>
                        <spec>Phase-based installation flow</spec>
                    </technical_specs>
                    <deliverables>
                        <file>install.sh</file>
                    </deliverables>
                </task>
            </tasks>

            <testing_requirements>
                <test type="unit">Test common utilities functions</test>
                <test type="unit">Test system update on clean system</test>
                <test type="unit">Test Docker installation process</test>
                <test type="integration">Complete Phase 1 installation flow</test>
            </testing_requirements>
        </phase>

        <phase id="2" name="VLESS Server Implementation">
            <description>Core VLESS+Reality server deployment</description>
            <duration>3-4 days</duration>
            <dependencies>Phase 1</dependencies>

            <tasks>
                <task id="2.1" priority="HIGH">
                    <name>Configuration template generation</name>
                    <description>Generate Xray-core configuration with Reality support</description>
                    <technical_specs>
                        <spec>VLESS inbound configuration with Reality</spec>
                        <spec>SNI-based traffic routing</spec>
                        <spec>Fallback configuration for unrecognized traffic</spec>
                        <spec>UUID generation for server keys</spec>
                        <spec>Dynamic port configuration</spec>
                        <spec>Log level and file configuration</spec>
                    </technical_specs>
                    <deliverables>
                        <file>modules/config_templates.sh</file>
                        <file>config/xray_config_template.json</file>
                    </deliverables>
                </task>

                <task id="2.2" priority="HIGH">
                    <name>Docker Compose configuration</name>
                    <description>Multi-service Docker orchestration setup</description>
                    <technical_specs>
                        <spec>Xray-core service with latest image</spec>
                        <spec>Volume mounts for configs and logs</spec>
                        <spec>Network configuration with bridge mode</spec>
                        <spec>Port mapping for VLESS (443) and fallback (80)</spec>
                        <spec>Restart policies and health checks</spec>
                        <spec>Environment variable configuration</spec>
                    </technical_specs>
                    <deliverables>
                        <file>config/docker-compose.yml</file>
                    </deliverables>
                </task>

                <task id="2.3" priority="HIGH">
                    <name>Container management module</name>
                    <description>Docker container lifecycle management</description>
                    <technical_specs>
                        <spec>Service startup and shutdown procedures</spec>
                        <spec>Configuration reload without downtime</spec>
                        <spec>Health status monitoring</spec>
                        <spec>Log collection and rotation</spec>
                        <spec>Container update procedures</spec>
                    </technical_specs>
                    <deliverables>
                        <file>modules/container_management.sh</file>
                    </deliverables>
                </task>

                <task id="2.4" priority="MEDIUM">
                    <name>Certificate management</name>
                    <description>TLS certificate handling for Reality</description>
                    <technical_specs>
                        <spec>Target domain certificate extraction</spec>
                        <spec>Certificate validation and verification</spec>
                        <spec>Automatic certificate renewal detection</spec>
                        <spec>Fallback certificate configuration</spec>
                    </technical_specs>
                    <deliverables>
                        <file>modules/cert_management.sh</file>
                    </deliverables>
                </task>

                <task id="2.5" priority="MEDIUM">
                    <name>Systemd service integration</name>
                    <description>System service configuration for auto-start</description>
                    <technical_specs>
                        <spec>Systemd unit file creation</spec>
                        <spec>Service dependency management</spec>
                        <spec>Automatic startup on boot</spec>
                        <spec>Service status monitoring</spec>
                    </technical_specs>
                    <deliverables>
                        <file>config/vless-vpn.service</file>
                    </deliverables>
                </task>
            </tasks>

            <testing_requirements>
                <test type="unit">Test configuration template generation</test>
                <test type="unit">Test Docker container startup</test>
                <test type="unit">Test certificate management functions</test>
                <test type="integration">Complete VLESS server deployment</test>
                <test type="functional">VLESS connection test with test client</test>
            </testing_requirements>
        </phase>

        <phase id="3" name="User Management System">
            <description>Comprehensive user CRUD operations and client configuration</description>
            <duration>3-4 days</duration>
            <dependencies>Phase 2</dependencies>

            <tasks>
                <task id="3.1" priority="HIGH">
                    <name>User database implementation</name>
                    <description>JSON-based user database with CRUD operations</description>
                    <technical_specs>
                        <spec>JSON schema for user records</spec>
                        <spec>UUID generation and validation</spec>
                        <spec>User metadata (creation date, last activity)</spec>
                        <spec>Database backup and recovery</spec>
                        <spec>Concurrent access protection</spec>
                        <spec>Database integrity validation</spec>
                    </technical_specs>
                    <deliverables>
                        <file>modules/user_database.sh</file>
                    </deliverables>
                </task>

                <task id="3.2" priority="HIGH">
                    <name>User management operations</name>
                    <description>High-level user management interface</description>
                    <technical_specs>
                        <spec>Add user with automatic UUID generation</spec>
                        <spec>Remove user with cleanup</spec>
                        <spec>List users with statistics</spec>
                        <spec>User search and filtering</spec>
                        <spec>Bulk user operations</spec>
                        <spec>User traffic statistics (if available)</spec>
                    </technical_specs>
                    <deliverables>
                        <file>modules/user_management.sh</file>
                    </deliverables>
                </task>

                <task id="3.3" priority="HIGH">
                    <name>Client configuration generation</name>
                    <description>Generate client configuration files and connection strings</description>
                    <technical_specs>
                        <spec>VLESS URL generation (vless://)</spec>
                        <spec>JSON configuration for v2ray clients</spec>
                        <spec>Configuration validation</spec>
                        <spec>Multiple client format support</spec>
                        <spec>Server endpoint auto-detection</spec>
                    </technical_specs>
                    <deliverables>
                        <file>modules/client_config.sh</file>
                    </deliverables>
                </task>

                <task id="3.4" priority="MEDIUM">
                    <name>QR code generator</name>
                    <description>Python-based QR code generation for mobile clients</description>
                    <technical_specs>
                        <spec>QR code generation from VLESS URLs</spec>
                        <spec>PNG output with customizable size</spec>
                        <spec>Batch QR code generation</spec>
                        <spec>ASCII QR code for terminal display</spec>
                        <spec>Error correction level configuration</spec>
                    </technical_specs>
                    <deliverables>
                        <file>modules/qr_generator.py</file>
                        <file>requirements.txt</file>
                    </deliverables>
                </task>

                <task id="3.5" priority="LOW">
                    <name>User import/export functionality</name>
                    <description>Import and export user configurations</description>
                    <technical_specs>
                        <spec>CSV export for user lists</spec>
                        <spec>JSON export with full user data</spec>
                        <spec>Bulk import from external sources</spec>
                        <spec>Configuration migration tools</spec>
                    </technical_specs>
                    <deliverables>
                        <file>modules/user_import_export.sh</file>
                    </deliverables>
                </task>
            </tasks>

            <testing_requirements>
                <test type="unit">Test user database CRUD operations</test>
                <test type="unit">Test UUID generation and validation</test>
                <test type="unit">Test QR code generation</test>
                <test type="integration">Complete user lifecycle test</test>
                <test type="functional">Client connection test with generated config</test>
            </testing_requirements>
        </phase>

        <phase id="4" name="Security and Monitoring">
            <description>System security hardening and comprehensive monitoring</description>
            <duration>2-3 days</duration>
            <dependencies>Phase 3</dependencies>

            <tasks>
                <task id="4.1" priority="HIGH">
                    <name>UFW firewall configuration</name>
                    <description>Automated firewall setup with minimal attack surface</description>
                    <technical_specs>
                        <spec>Default deny all incoming traffic</spec>
                        <spec>Allow SSH (port 22) with rate limiting</spec>
                        <spec>Allow VLESS (port 443)</spec>
                        <spec>Allow HTTP fallback (port 80) if needed</spec>
                        <spec>Existing rule conflict detection</spec>
                        <spec>Firewall rule backup and restore</spec>
                    </technical_specs>
                    <deliverables>
                        <file>modules/ufw_config.sh</file>
                    </deliverables>
                </task>

                <task id="4.2" priority="HIGH">
                    <name>System security hardening</name>
                    <description>Implement security best practices</description>
                    <technical_specs>
                        <spec>SSH configuration hardening</spec>
                        <spec>Disable unnecessary services</spec>
                        <spec>File permission auditing</spec>
                        <spec>System user security</spec>
                        <spec>Network security parameters</spec>
                        <spec>Log file security</spec>
                    </technical_specs>
                    <deliverables>
                        <file>modules/security_hardening.sh</file>
                    </deliverables>
                </task>

                <task id="4.3" priority="HIGH">
                    <name>Centralized logging system</name>
                    <description>Comprehensive logging and log management</description>
                    <technical_specs>
                        <spec>Structured logging with log levels</spec>
                        <spec>Log rotation configuration</spec>
                        <spec>System log integration</spec>
                        <spec>Security event logging</spec>
                        <spec>Log file encryption for sensitive data</spec>
                        <spec>Remote log shipping capability</spec>
                    </technical_specs>
                    <deliverables>
                        <file>modules/logging_setup.sh</file>
                    </deliverables>
                </task>

                <task id="4.4" priority="MEDIUM">
                    <name>Service monitoring and health checks</name>
                    <description>Real-time service monitoring and alerting</description>
                    <technical_specs>
                        <spec>Xray service health monitoring</spec>
                        <spec>Docker container status checks</spec>
                        <spec>Network connectivity monitoring</spec>
                        <spec>Resource usage monitoring (CPU, memory, disk)</spec>
                        <spec>Performance metrics collection</spec>
                        <spec>Email/webhook alerting</spec>
                    </technical_specs>
                    <deliverables>
                        <file>modules/monitoring.sh</file>
                    </deliverables>
                </task>

                <task id="4.5" priority="MEDIUM">
                    <name>Security audit and compliance</name>
                    <description>Automated security auditing</description>
                    <technical_specs>
                        <spec>System vulnerability scanning</spec>
                        <spec>Configuration compliance checking</spec>
                        <spec>Access control auditing</spec>
                        <spec>Network security assessment</spec>
                        <spec>Security report generation</spec>
                    </technical_specs>
                    <deliverables>
                        <file>modules/security_audit.sh</file>
                    </deliverables>
                </task>
            </tasks>

            <testing_requirements>
                <test type="unit">Test UFW firewall rules</test>
                <test type="unit">Test security hardening measures</test>
                <test type="unit">Test monitoring functionality</test>
                <test type="security">Security vulnerability assessment</test>
                <test type="integration">Complete security implementation test</test>
            </testing_requirements>
        </phase>

        <phase id="5" name="Advanced Features and Automation">
            <description>Backup/restore, automation, and remote management</description>
            <duration>3-4 days</duration>
            <dependencies>Phase 4</dependencies>

            <tasks>
                <task id="5.1" priority="HIGH">
                    <name>Backup and restore system</name>
                    <description>Comprehensive backup and disaster recovery</description>
                    <technical_specs>
                        <spec>Full system configuration backup</spec>
                        <spec>User database backup with encryption</spec>
                        <spec>Incremental backup support</spec>
                        <spec>Automated backup scheduling</spec>
                        <spec>Remote backup storage (S3, FTP, etc.)</spec>
                        <spec>Point-in-time restore capability</spec>
                        <spec>Backup integrity verification</spec>
                    </technical_specs>
                    <deliverables>
                        <file>modules/backup_restore.sh</file>
                    </deliverables>
                </task>

                <task id="5.2" priority="HIGH">
                    <name>System maintenance utilities</name>
                    <description>Automated maintenance and optimization</description>
                    <technical_specs>
                        <spec>Automatic system updates</spec>
                        <spec>Log file cleanup and rotation</spec>
                        <spec>Docker image updates</spec>
                        <spec>Database optimization</spec>
                        <spec>Disk space management</spec>
                        <spec>Performance tuning</spec>
                    </technical_specs>
                    <deliverables>
                        <file>modules/maintenance_utils.sh</file>
                    </deliverables>
                </task>

                <task id="5.3" priority="MEDIUM">
                    <name>Telegram bot implementation</name>
                    <description>Remote management via Telegram bot</description>
                    <technical_specs>
                        <spec>User authentication and authorization</spec>
                        <spec>Remote user management commands</spec>
                        <spec>Server status monitoring</spec>
                        <spec>Configuration generation and QR codes</spec>
                        <spec>Alert notifications</spec>
                        <spec>Security command logging</spec>
                    </technical_specs>
                    <deliverables>
                        <file>modules/telegram_bot.py</file>
                        <file>modules/telegram_bot_manager.sh</file>
                        <file>config/bot_config.env</file>
                        <file>deploy_telegram_bot.sh</file>
                    </deliverables>
                </task>

                <task id="5.4" priority="MEDIUM">
                    <name>System reinstallation and migration</name>
                    <description>Safe system reinstallation with data preservation</description>
                    <technical_specs>
                        <spec>Pre-reinstall data backup</spec>
                        <spec>Clean system preparation</spec>
                        <spec>Selective component reinstallation</spec>
                        <spec>Configuration migration</spec>
                        <spec>Service validation after reinstall</spec>
                    </technical_specs>
                    <deliverables>
                        <file>modules/system_reinstall.sh</file>
                    </deliverables>
                </task>

                <task id="5.5" priority="LOW">
                    <name>System removal and cleanup</name>
                    <description>Complete system removal with data wiping</description>
                    <technical_specs>
                        <spec>Service shutdown and cleanup</spec>
                        <spec>Docker container and image removal</spec>
                        <spec>Configuration file cleanup</spec>
                        <spec>System file restoration</spec>
                        <spec>Secure data wiping options</spec>
                    </technical_specs>
                    <deliverables>
                        <file>modules/system_removal.sh</file>
                    </deliverables>
                </task>
            </tasks>

            <testing_requirements>
                <test type="unit">Test backup creation and restoration</test>
                <test type="unit">Test maintenance utilities</test>
                <test type="unit">Test Telegram bot functionality</test>
                <test type="integration">Complete backup/restore cycle test</test>
                <test type="integration">System reinstallation test</test>
            </testing_requirements>
        </phase>

        <phase id="6" name="Testing and Documentation">
            <description>Comprehensive testing suite and documentation</description>
            <duration>2-3 days</duration>
            <dependencies>Phase 5</dependencies>

            <tasks>
                <task id="6.1" priority="HIGH">
                    <name>Unit test implementation</name>
                    <description>Individual module testing</description>
                    <technical_specs>
                        <spec>Test framework setup (bats or custom)</spec>
                        <spec>Mock external dependencies</spec>
                        <spec>Function-level testing</spec>
                        <spec>Edge case and error handling tests</spec>
                        <spec>Code coverage reporting</spec>
                    </technical_specs>
                    <deliverables>
                        <file>tests/test_common_utils.sh</file>
                        <file>tests/test_user_management.sh</file>
                        <file>tests/test_docker_services.sh</file>
                        <file>tests/test_backup_restore.sh</file>
                        <file>tests/test_security_hardening.sh</file>
                        <file>tests/test_monitoring.sh</file>
                        <file>tests/test_cert_management.sh</file>
                    </deliverables>
                </task>

                <task id="6.2" priority="HIGH">
                    <name>Integration test implementation</name>
                    <description>End-to-end system testing</description>
                    <technical_specs>
                        <spec>Phase-based integration testing</spec>
                        <spec>Cross-module interaction testing</spec>
                        <spec>System state validation</spec>
                        <spec>Performance benchmarking</spec>
                        <spec>Load testing capabilities</spec>
                    </technical_specs>
                    <deliverables>
                        <file>tests/test_phase1_integration.sh</file>
                        <file>tests/test_phase2_integration.sh</file>
                        <file>tests/test_phase3_integration.sh</file>
                        <file>tests/test_phase4_security.sh</file>
                        <file>tests/test_phase5_integration.sh</file>
                    </deliverables>
                </task>

                <task id="6.3" priority="HIGH">
                    <name>Test automation and reporting</name>
                    <description>Automated test execution and reporting</description>
                    <technical_specs>
                        <spec>Master test runner with parallel execution</spec>
                        <spec>Test result aggregation</spec>
                        <spec>HTML/JSON test reports</spec>
                        <spec>Continuous integration compatibility</spec>
                        <spec>Test failure analysis</spec>
                    </technical_specs>
                    <deliverables>
                        <file>tests/run_all_tests.sh</file>
                        <file>tests/test_results_aggregator.sh</file>
                    </deliverables>
                </task>

                <task id="6.4" priority="MEDIUM">
                    <name>Telegram bot testing</name>
                    <description>Telegram bot functionality testing</description>
                    <technical_specs>
                        <spec>Bot command testing</spec>
                        <spec>Authentication flow testing</spec>
                        <spec>Message formatting validation</spec>
                        <spec>Error handling testing</spec>
                    </technical_specs>
                    <deliverables>
                        <file>tests/test_telegram_bot_integration.py</file>
                    </deliverables>
                </task>

                <task id="6.5" priority="MEDIUM">
                    <name>Documentation creation</name>
                    <description>Comprehensive system documentation</description>
                    <technical_specs>
                        <spec>Installation and setup guide</spec>
                        <spec>User operation manual</spec>
                        <spec>API reference documentation</spec>
                        <spec>Troubleshooting guide</spec>
                        <spec>Architecture documentation</spec>
                        <spec>Security best practices guide</spec>
                    </technical_specs>
                    <deliverables>
                        <file>docs/installation.md</file>
                        <file>docs/user_guide.md</file>
                        <file>docs/api_reference.md</file>
                        <file>docs/troubleshooting.md</file>
                    </deliverables>
                </task>
            </tasks>

            <testing_requirements>
                <test type="unit">All individual module tests pass</test>
                <test type="integration">All phase integration tests pass</test>
                <test type="system">Complete system deployment test</test>
                <test type="performance">Performance benchmarks meet requirements</test>
                <test type="security">Security compliance validation</test>
            </testing_requirements>
        </phase>
    </implementation_phases>

    <dependencies_and_order>
        <dependency>
            <phase>1</phase>
            <requires>None</requires>
            <description>Foundation phase - establishes basic infrastructure</description>
        </dependency>
        <dependency>
            <phase>2</phase>
            <requires>Phase 1</requires>
            <description>Requires Docker setup and common utilities</description>
        </dependency>
        <dependency>
            <phase>3</phase>
            <requires>Phase 2</requires>
            <description>Requires functional VLESS server</description>
        </dependency>
        <dependency>
            <phase>4</phase>
            <requires>Phase 3</requires>
            <description>Requires user management for security context</description>
        </dependency>
        <dependency>
            <phase>5</phase>
            <requires>Phase 4</requires>
            <description>Requires secure baseline for advanced features</description>
        </dependency>
        <dependency>
            <phase>6</phase>
            <requires>Phase 5</requires>
            <description>Requires complete implementation for testing</description>
        </dependency>
    </dependencies_and_order>

    <technical_specifications>
        <vless_configuration>
            <protocol>VLESS</protocol>
            <transport>TCP with Reality TLS</transport>
            <security>Reality (TLS masquerading)</security>
            <fallback>HTTP server on port 80</fallback>
            <uuid_version>4 (random)</uuid_version>
            <encryption>None (handled by Reality TLS)</encryption>
        </vless_configuration>

        <reality_configuration>
            <target_domains>
                <domain>www.microsoft.com</domain>
                <domain>www.google.com</domain>
                <domain>www.cloudflare.com</domain>
            </target_domains>
            <short_id>Random 2-8 hex characters</short_id>
            <public_key>X25519 public key for Reality handshake</public_key>
            <private_key>X25519 private key for Reality handshake</private_key>
        </reality_configuration>

        <docker_configuration>
            <base_image>teddysun/xray:latest</base_image>
            <network_mode>bridge</network_mode>
            <restart_policy>unless-stopped</restart_policy>
            <health_check>
                <interval>30s</interval>
                <timeout>10s</timeout>
                <retries>3</retries>
            </health_check>
        </docker_configuration>

        <security_requirements>
            <firewall>UFW with deny-by-default policy</firewall>
            <ssh_hardening>Key-based authentication only</ssh_hardening>
            <file_permissions>Restrictive permissions on config files (600)</file_permissions>
            <logging>Comprehensive audit logging</logging>
            <updates>Automatic security updates enabled</updates>
        </security_requirements>

        <performance_requirements>
            <startup_time>Less than 30 seconds</startup_time>
            <memory_usage>Less than 512MB under normal load</memory_usage>
            <connection_capacity>1000+ concurrent connections</connection_capacity>
            <throughput>Limited by server bandwidth</throughput>
        </performance_requirements>
    </technical_specifications>

    <testing_strategy>
        <unit_testing>
            <framework>Bash Unit Testing Framework (bats-core)</framework>
            <coverage_target>90%+ function coverage</coverage_target>
            <test_types>
                <type>Function input/output validation</type>
                <type>Error condition handling</type>
                <type>Edge case scenarios</type>
                <type>Mock external dependencies</type>
            </test_types>
        </unit_testing>

        <integration_testing>
            <test_environments>
                <environment>Ubuntu 20.04 LTS clean install</environment>
                <environment>Ubuntu 22.04 LTS clean install</environment>
                <environment>Debian 11 clean install</environment>
            </test_environments>
            <test_scenarios>
                <scenario>Fresh installation on clean system</scenario>
                <scenario>Installation over existing Docker setup</scenario>
                <scenario>User management operations</scenario>
                <scenario>System backup and restore</scenario>
                <scenario>Service restart and recovery</scenario>
                <scenario>Security hardening validation</scenario>
            </test_scenarios>
        </integration_testing>

        <performance_testing>
            <load_testing>
                <tool>Custom load testing scripts</tool>
                <metrics>Connection establishment time, throughput, error rate</metrics>
                <targets>100, 500, 1000 concurrent connections</targets>
            </load_testing>
            <stress_testing>
                <scenarios>Resource exhaustion, high connection churn, extended uptime</scenarios>
            </stress_testing>
        </performance_testing>

        <security_testing>
            <vulnerability_scanning>
                <tools>Custom security audit scripts</tools>
                <scope>Configuration files, network exposure, privilege escalation</scope>
            </vulnerability_scanning>
            <penetration_testing>
                <scenarios>DPI detection, traffic analysis, connection tracking</scenarios>
            </penetration_testing>
        </security_testing>
    </testing_strategy>

    <quality_assurance>
        <code_standards>
            <shell_scripting>
                <standard>Shellcheck compliance</standard>
                <style>Google Shell Style Guide</standard>
                <documentation>Inline comments for complex logic</documentation>
            </shell_scripting>
            <error_handling>
                <requirement>All functions must return appropriate exit codes</requirement>
                <requirement>Error messages must be clear and actionable</requirement>
                <requirement>All external command failures must be handled</requirement>
            </error_handling>
        </code_standards>

        <review_process>
            <stages>
                <stage>Static analysis (shellcheck, syntax validation)</stage>
                <stage>Unit test execution</stage>
                <stage>Integration test execution</stage>
                <stage>Security review</stage>
                <stage>Performance validation</stage>
            </stages>
        </review_process>
    </quality_assurance>

    <deployment_strategy>
        <rollout_approach>
            <type>Blue-green deployment</type>
            <description>Deploy new version alongside existing, switch after validation</description>
        </rollout_approach>

        <rollback_procedure>
            <steps>
                <step>Stop new version services</step>
                <step>Restore previous configuration</step>
                <step>Restart original services</step>
                <step>Validate service health</step>
            </steps>
        </rollback_procedure>

        <monitoring>
            <health_checks>Service availability, response time, error rates</health_checks>
            <alerts>Email, webhook, Telegram notifications</alerts>
            <metrics>Connection count, throughput, resource usage</metrics>
        </monitoring>
    </deployment_strategy>

    <maintenance_plan>
        <regular_tasks>
            <task frequency="daily">
                <name>Service health check</name>
                <automation>Automated via monitoring script</automation>
            </task>
            <task frequency="weekly">
                <name>Log file rotation and cleanup</name>
                <automation>Automated via maintenance script</automation>
            </task>
            <task frequency="monthly">
                <name>Security audit and updates</name>
                <automation>Semi-automated with manual review</automation>
            </task>
            <task frequency="quarterly">
                <name>Full system backup and disaster recovery test</name>
                <automation>Manual execution with automated validation</automation>
            </task>
        </regular_tasks>

        <update_procedures>
            <xray_updates>
                <frequency>As needed for security patches</frequency>
                <process>Automated Docker image update with rollback capability</process>
            </xray_updates>
            <system_updates>
                <frequency>Monthly for non-security, immediate for security</frequency>
                <process>Automated with manual approval for major updates</process>
            </system_updates>
        </update_procedures>
    </maintenance_plan>

    <risk_assessment>
        <technical_risks>
            <risk impact="HIGH" probability="LOW">
                <name>Xray-core vulnerability</name>
                <mitigation>Regular updates, security monitoring, traffic analysis</mitigation>
            </risk>
            <risk impact="MEDIUM" probability="MEDIUM">
                <name>Reality detection by DPI</name>
                <mitigation>Multiple target domains, traffic patterns, fallback mechanisms</mitigation>
            </risk>
            <risk impact="LOW" probability="HIGH">
                <name>Docker container failure</name>
                <mitigation>Health checks, automatic restart, monitoring alerts</mitigation>
            </risk>
        </technical_risks>

        <operational_risks>
            <risk impact="HIGH" probability="LOW">
                <name>Complete system compromise</name>
                <mitigation>Security hardening, access controls, audit logging</mitigation>
            </risk>
            <risk impact="MEDIUM" probability="LOW">
                <name>Data loss during updates</name>
                <mitigation>Automated backups, rollback procedures, data validation</mitigation>
            </risk>
        </operational_risks>
    </risk_assessment>

    <success_criteria>
        <functional_criteria>
            <criterion>100% of core functionality tests pass</criterion>
            <criterion>All integration tests pass on target platforms</criterion>
            <criterion>Security audit reports no critical vulnerabilities</criterion>
            <criterion>Performance benchmarks meet specified requirements</criterion>
        </functional_criteria>

        <operational_criteria>
            <criterion>Installation completes in under 10 minutes on clean system</criterion>
            <criterion>Service startup time under 30 seconds</criterion>
            <criterion>99%+ uptime over 30-day test period</criterion>
            <criterion>Backup and restore procedures complete successfully</criterion>
        </operational_criteria>

        <user_experience_criteria>
            <criterion>Clear documentation with step-by-step instructions</criterion>
            <criterion>Intuitive command-line interface</criterion>
            <criterion>Comprehensive error messages and troubleshooting guidance</criterion>
            <criterion>Successful client connection on first attempt</criterion>
        </user_experience_criteria>
    </success_criteria>
</implementation_plan>