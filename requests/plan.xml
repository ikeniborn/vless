<?xml version="1.0" encoding="UTF-8"?>
<implementation_plan>
  <project>
    <name>VLESS+Reality VPN Service</name>
    <stage>Stage 3: User Management</stage>
    <date>2025-01-25</date>
    <version>1.0.0</version>
  </project>

  <overview>
    <description>Implementation plan for Stage 3: User Management functionality in the VLESS+Reality VPN project. This stage will add comprehensive user management capabilities including add, remove, list, and client configuration generation for up to 10 concurrent users.</description>
    <prerequisites>
      <prerequisite>Stage 1: Basic Infrastructure (Completed)</prerequisite>
      <prerequisite>Stage 2: Configuration Generation (Completed)</prerequisite>
      <prerequisite>Docker CE and Docker Compose installed</prerequisite>
      <prerequisite>Project directory structure established</prerequisite>
    </prerequisites>
  </overview>

  <implementation_tasks>
    <task id="T1" priority="high" estimated_hours="3">
      <name>User Database Management Functions</name>
      <description>Implement core user database operations for managing the users.db file</description>
      <deliverables>
        <deliverable>init_user_database() function</deliverable>
        <deliverable>add_user_to_database() function</deliverable>
        <deliverable>remove_user_from_database() function</deliverable>
        <deliverable>user_exists() function</deliverable>
        <deliverable>get_user_info() function</deliverable>
      </deliverables>
      <implementation_details>
        <function name="init_user_database">
          <signature>init_user_database()</signature>
          <purpose>Initialize users.db file if it doesn't exist</purpose>
          <logic>
            <step>Check if data/users.db exists</step>
            <step>Create file with proper permissions (600)</step>
            <step>Add header comment with format specification</step>
          </logic>
        </function>
        <function name="add_user_to_database">
          <signature>add_user_to_database(username, uuid, short_id)</signature>
          <purpose>Add new user record to database</purpose>
          <logic>
            <step>Validate input parameters</step>
            <step>Check for duplicate username</step>
            <step>Create user record: username:uuid:shortId:created_date:active</step>
            <step>Append to users.db with proper locking</step>
            <step>Set file permissions to 600</step>
          </logic>
        </function>
        <function name="remove_user_from_database">
          <signature>remove_user_from_database(username)</signature>
          <purpose>Remove user record from database</purpose>
          <logic>
            <step>Validate username exists</step>
            <step>Create temporary file</step>
            <step>Copy all records except target user</step>
            <step>Replace original file atomically</step>
            <step>Set proper permissions</step>
          </logic>
        </function>
        <function name="user_exists">
          <signature>user_exists(username)</signature>
          <purpose>Check if username already exists</purpose>
          <returns>0 if exists, 1 if not found</returns>
        </function>
        <function name="get_user_info">
          <signature>get_user_info(username)</signature>
          <purpose>Retrieve user information from database</purpose>
          <returns>User record fields as variables</returns>
        </function>
      </implementation_details>
      <integration_points>
        <point>Uses existing log_message() for consistent logging</point>
        <point>Uses PROJECT_ROOT constant for file paths</point>
        <point>Integrates with error handling trap mechanism</point>
      </integration_points>
      <testing>
        <test>Test database initialization</test>
        <test>Test user addition with valid data</test>
        <test>Test duplicate user prevention</test>
        <test>Test user removal</test>
        <test>Test user existence check</test>
        <test>Test file permission enforcement</test>
      </testing>
    </task>

    <task id="T2" priority="high" estimated_hours="2">
      <name>Input Validation Functions</name>
      <description>Implement robust input validation for usernames and system checks</description>
      <deliverables>
        <deliverable>validate_username() function</deliverable>
        <deliverable>sanitize_input() function</deliverable>
        <deliverable>check_user_limit() function</deliverable>
      </deliverables>
      <implementation_details>
        <function name="validate_username">
          <signature>validate_username(username)</signature>
          <purpose>Validate username format and constraints</purpose>
          <validation_rules>
            <rule>3-32 characters length</rule>
            <rule>Alphanumeric characters only</rule>
            <rule>Underscore and dash allowed</rule>
            <rule>Must start with alphanumeric</rule>
            <rule>Case insensitive duplicate check</rule>
          </validation_rules>
          <regex>^[a-zA-Z0-9][a-zA-Z0-9_-]{2,31}$</regex>
        </function>
        <function name="sanitize_input">
          <signature>sanitize_input(input)</signature>
          <purpose>Sanitize user input to prevent injection attacks</purpose>
          <logic>
            <step>Remove dangerous characters</step>
            <step>Trim whitespace</step>
            <step>Escape special characters</step>
          </logic>
        </function>
        <function name="check_user_limit">
          <signature>check_user_limit()</signature>
          <purpose>Ensure maximum user count (10) is not exceeded</purpose>
          <returns>0 if under limit, 1 if at limit</returns>
        </function>
      </implementation_details>
      <testing>
        <test>Test valid username formats</test>
        <test>Test invalid username formats</test>
        <test>Test username length limits</test>
        <test>Test special character handling</test>
        <test>Test user limit enforcement</test>
      </testing>
    </task>

    <task id="T3" priority="high" estimated_hours="4">
      <name>Server Configuration Management</name>
      <description>Implement functions to update server.json configuration when users are added/removed</description>
      <deliverables>
        <deliverable>update_server_config() function</deliverable>
        <deliverable>add_client_to_server() function</deliverable>
        <deliverable>remove_client_from_server() function</deliverable>
        <deliverable>backup_server_config() function</deliverable>
        <deliverable>validate_server_config() function</deliverable>
      </deliverables>
      <implementation_details>
        <function name="update_server_config">
          <signature>update_server_config(action, username, uuid, short_id)</signature>
          <purpose>Main function to update server configuration</purpose>
          <parameters>
            <param name="action">add|remove</param>
            <param name="username">User identifier</param>
            <param name="uuid">User UUID (for add action)</param>
            <param name="short_id">User shortId (for add action)</param>
          </parameters>
          <logic>
            <step>Backup current server.json</step>
            <step>Call appropriate add/remove function</step>
            <step>Validate updated configuration</step>
            <step>Restore from backup if validation fails</step>
          </logic>
        </function>
        <function name="add_client_to_server">
          <signature>add_client_to_server(uuid, short_id)</signature>
          <purpose>Add new client entry to server.json</purpose>
          <logic>
            <step>Read current server.json</step>
            <step>Create new client object</step>
            <step>Add to inbounds[0].settings.clients array</step>
            <step>Write updated configuration</step>
          </logic>
          <client_template>
            {
              "id": "UUID_HERE",
              "flow": "xtls-rprx-vision",
              "shortId": "SHORT_ID_HERE"
            }
          </client_template>
        </function>
        <function name="remove_client_from_server">
          <signature>remove_client_from_server(uuid)</signature>
          <purpose>Remove client entry from server.json</purpose>
          <logic>
            <step>Read current server.json</step>
            <step>Find and remove client with matching UUID</step>
            <step>Update clients array</step>
            <step>Write updated configuration</step>
          </logic>
        </function>
        <function name="backup_server_config">
          <signature>backup_server_config()</signature>
          <purpose>Create timestamped backup of server.json</purpose>
          <backup_location>config/server.json.backup.TIMESTAMP</backup_location>
        </function>
        <function name="validate_server_config">
          <signature>validate_server_config()</signature>
          <purpose>Validate server.json syntax and structure</purpose>
          <validation>
            <check>Valid JSON syntax</check>
            <check>Required inbounds array exists</check>
            <check>Clients array is properly formed</check>
            <check>All UUIDs are valid format</check>
          </validation>
        </function>
      </implementation_details>
      <json_manipulation>
        <tool>jq for JSON parsing and modification</tool>
        <fallback>sed/awk for systems without jq</fallback>
        <approach>Read → Modify → Validate → Write</approach>
      </json_manipulation>
      <testing>
        <test>Test adding client to empty clients array</test>
        <test>Test adding client to existing clients</test>
        <test>Test removing existing client</test>
        <test>Test removing non-existent client</test>
        <test>Test JSON validation</test>
        <test>Test backup and restore functionality</test>
      </testing>
    </task>

    <task id="T4" priority="high" estimated_hours="3">
      <name>Client Configuration Generation</name>
      <description>Implement client configuration generation for VLESS+Reality connections</description>
      <deliverables>
        <deliverable>generate_client_config() function</deliverable>
        <deliverable>create_vless_url() function</deliverable>
        <deliverable>create_client_json() function</deliverable>
        <deliverable>save_client_config() function</deliverable>
      </deliverables>
      <implementation_details>
        <function name="generate_client_config">
          <signature>generate_client_config(username, uuid, short_id)</signature>
          <purpose>Generate complete client configuration</purpose>
          <logic>
            <step>Read environment variables (.env)</step>
            <step>Read server public key from data/keys/public.key</step>
            <step>Generate VLESS URL</step>
            <step>Generate JSON configuration</step>
            <step>Save both formats to config/users/</step>
            <step>Set proper permissions (600)</step>
          </logic>
        </function>
        <function name="create_vless_url">
          <signature>create_vless_url(uuid, server_ip, port, public_key, short_id)</signature>
          <purpose>Create VLESS URL for easy client import</purpose>
          <format>vless://UUID@SERVER:PORT?encryption=none&flow=xtls-rprx-vision&security=reality&sni=speed.cloudflare.com&fp=chrome&pbk=PUBLIC_KEY&sid=SHORT_ID&type=tcp&headerType=none#VLESS_Reality</format>
        </function>
        <function name="create_client_json">
          <signature>create_client_json(uuid, server_ip, port, public_key, short_id)</signature>
          <purpose>Create JSON configuration for advanced clients</purpose>
          <template>
            {
              "outbounds": [
                {
                  "protocol": "vless",
                  "settings": {
                    "vnext": [
                      {
                        "address": "SERVER_IP",
                        "port": 443,
                        "users": [
                          {
                            "id": "UUID",
                            "encryption": "none",
                            "flow": "xtls-rprx-vision"
                          }
                        ]
                      }
                    ]
                  },
                  "streamSettings": {
                    "network": "tcp",
                    "security": "reality",
                    "realitySettings": {
                      "serverName": "speed.cloudflare.com",
                      "fingerprint": "chrome",
                      "publicKey": "PUBLIC_KEY",
                      "shortId": "SHORT_ID"
                    }
                  }
                }
              ]
            }
          </template>
        </function>
        <function name="save_client_config">
          <signature>save_client_config(username, vless_url, json_config)</signature>
          <purpose>Save client configurations to files</purpose>
          <files>
            <file>config/users/USERNAME.url - VLESS URL</file>
            <file>config/users/USERNAME.json - JSON configuration</file>
          </files>
          <permissions>600</permissions>
        </function>
      </implementation_details>
      <environment_integration>
        <variable name="SERVER_IP">From .env file or auto-detection</variable>
        <variable name="XRAY_PORT">From .env file (default: 443)</variable>
        <file name="public.key">From data/keys/public.key</file>
      </environment_integration>
      <testing>
        <test>Test VLESS URL generation</test>
        <test>Test JSON configuration generation</test>
        <test>Test file saving with correct permissions</test>
        <test>Test environment variable integration</test>
        <test>Test URL encoding handling</test>
      </testing>
    </task>

    <task id="T5" priority="high" estimated_hours="4">
      <name>User Management Commands</name>
      <description>Implement main user management command functions</description>
      <deliverables>
        <deliverable>add_user() function</deliverable>
        <deliverable>remove_user() function</deliverable>
        <deliverable>list_users() function</deliverable>
        <deliverable>show_user() function</deliverable>
      </deliverables>
      <implementation_details>
        <function name="add_user">
          <signature>add_user(username)</signature>
          <purpose>Complete user addition workflow</purpose>
          <workflow>
            <step>Validate username format</step>
            <step>Check user doesn't exist</step>
            <step>Check user limit (10 max)</step>
            <step>Generate UUID using existing generate_uuid()</step>
            <step>Generate shortId using existing generate_short_id()</step>
            <step>Add to user database</step>
            <step>Update server configuration</step>
            <step>Generate client configuration</step>
            <step>Restart Docker container</step>
            <step>Display success message with connection info</step>
          </workflow>
          <error_handling>
            <scenario>Duplicate username</scenario>
            <scenario>User limit exceeded</scenario>
            <scenario>Server config update failure</scenario>
            <scenario>Docker restart failure</scenario>
          </error_handling>
        </function>
        <function name="remove_user">
          <signature>remove_user(username)</signature>
          <purpose>Complete user removal workflow</purpose>
          <workflow>
            <step>Validate username exists</step>
            <step>Get user information from database</step>
            <step>Remove from user database</step>
            <step>Remove from server configuration</step>
            <step>Delete client configuration files</step>
            <step>Restart Docker container</step>
            <step>Display confirmation message</step>
          </workflow>
          <cleanup>
            <file>config/users/USERNAME.url</file>
            <file>config/users/USERNAME.json</file>
            <record>Database entry</record>
            <config>Server.json client entry</config>
          </cleanup>
        </function>
        <function name="list_users">
          <signature>list_users()</signature>
          <purpose>Display formatted list of all users</purpose>
          <output_format>
            <header>Username | UUID | Status | Created | Config Files</header>
            <row>username | uuid-short | active | YYYY-MM-DD | ✓/✗</row>
          </output_format>
          <features>
            <feature>Color coding by status</feature>
            <feature>File existence indicators</feature>
            <feature>Total user count</feature>
            <feature>Remaining slots (10 - current)</feature>
          </features>
        </function>
        <function name="show_user">
          <signature>show_user(username)</signature>
          <purpose>Display detailed user information</purpose>
          <output>
            <info>Full user details</info>
            <info>VLESS URL</info>
            <info>QR code (if qrencode available)</info>
            <info>Client configuration file paths</info>
          </output>
        </function>
      </implementation_details>
      <docker_integration>
        <restart_command>docker compose restart xray</restart_command>
        <status_check>docker compose ps xray</status_check>
        <timeout>30 seconds</timeout>
        <rollback>Restore backup config if restart fails</rollback>
      </docker_integration>
      <testing>
        <test>Test complete user addition workflow</test>
        <test>Test user removal workflow</test>
        <test>Test user listing display</test>
        <test>Test duplicate prevention</test>
        <test>Test user limit enforcement</test>
        <test>Test error recovery scenarios</test>
      </testing>
    </task>

    <task id="T6" priority="medium" estimated_hours="2">
      <name>Command Line Interface Integration</name>
      <description>Integrate user management commands into main CLI interface</description>
      <deliverables>
        <deliverable>Updated show_help() function</deliverable>
        <deliverable>Updated parse_arguments() function</deliverable>
        <deliverable>New user management command routing</deliverable>
      </deliverables>
      <implementation_details>
        <commands>
          <command name="add-user">
            <syntax>./vless-manager.sh add-user USERNAME</syntax>
            <description>Add new VPN user</description>
            <validation>Requires root/sudo</validation>
          </command>
          <command name="remove-user">
            <syntax>./vless-manager.sh remove-user USERNAME</syntax>
            <description>Remove existing VPN user</description>
            <validation>Requires root/sudo</validation>
          </command>
          <command name="list-users">
            <syntax>./vless-manager.sh list-users</syntax>
            <description>List all VPN users</description>
            <validation>Requires root/sudo</validation>
          </command>
          <command name="show-user">
            <syntax>./vless-manager.sh show-user USERNAME</syntax>
            <description>Show user details and configuration</description>
            <validation>Requires root/sudo</validation>
          </command>
        </commands>
        <help_integration>
          <section name="User Management Commands">
            <subsection>User operations for VLESS+Reality VPN service</subsection>
          </section>
        </help_integration>
      </implementation_details>
      <testing>
        <test>Test help display updates</test>
        <test>Test argument parsing for new commands</test>
        <test>Test command routing</test>
        <test>Test privilege checking for each command</test>
      </testing>
    </task>

    <task id="T7" priority="medium" estimated_hours="3">
      <name>Comprehensive Test Suite</name>
      <description>Create comprehensive test suite for all user management functionality</description>
      <deliverables>
        <deliverable>tests/test_user_management.sh</deliverable>
        <deliverable>Integration with existing test framework</deliverable>
        <deliverable>Mock environment setup</deliverable>
      </deliverables>
      <implementation_details>
        <test_categories>
          <category name="Unit Tests">
            <test>test_validate_username()</test>
            <test>test_user_database_operations()</test>
            <test>test_server_config_updates()</test>
            <test>test_client_config_generation()</test>
            <test>test_input_sanitization()</test>
          </category>
          <category name="Integration Tests">
            <test>test_complete_add_user_workflow()</test>
            <test>test_complete_remove_user_workflow()</test>
            <test>test_user_listing()</test>
            <test>test_docker_integration()</test>
            <test>test_file_permissions()</test>
          </category>
          <category name="Error Handling Tests">
            <test>test_duplicate_user_handling()</test>
            <test>test_user_limit_enforcement()</test>
            <test>test_invalid_input_handling()</test>
            <test>test_config_corruption_recovery()</test>
            <test>test_docker_failure_handling()</test>
          </category>
        </test_categories>
        <mock_setup>
          <mock name="Docker commands">Prevent actual container operations</mock>
          <mock name="File operations">Use temporary test directories</mock>
          <mock name="Network calls">Mock external dependencies</mock>
        </mock_setup>
        <test_data>
          <dataset name="Valid usernames">Various valid username formats</dataset>
          <dataset name="Invalid usernames">Various invalid formats and edge cases</dataset>
          <dataset name="Sample users">Pre-created user data for testing</dataset>
        </test_data>
      </implementation_details>
      <integration_with_existing_tests>
        <update>tests/run_all_tests.sh - Add user management test suite</update>
        <pattern>Follow existing test patterns from test_configuration.sh</pattern>
        <reporting>Integrate with existing test result reporting</reporting>
      </integration_with_existing_tests>
      <testing>
        <test>Test suite execution</test>
        <test>Test result reporting</test>
        <test>Test coverage verification</test>
        <test>Test isolation verification</test>
      </testing>
    </task>

    <task id="T8" priority="low" estimated_hours="1">
      <name>Documentation Updates</name>
      <description>Update project documentation to reflect new user management capabilities</description>
      <deliverables>
        <deliverable>Updated CLAUDE.md</deliverable>
        <deliverable>Usage examples in help text</deliverable>
        <deliverable>Error message improvements</deliverable>
      </deliverables>
      <implementation_details>
        <claude_md_updates>
          <section>Implementation Status - Mark Stage 3 as completed</section>
          <section>Key Functions - Add user management functions</section>
          <section>Main Script Commands - Add new user commands</section>
          <section>File Permissions - Document user database permissions</section>
        </claude_md_updates>
        <help_improvements>
          <improvement>Add usage examples for each command</improvement>
          <improvement>Add troubleshooting section</improvement>
          <improvement>Add security recommendations</improvement>
        </help_improvements>
      </implementation_details>
    </task>
  </implementation_tasks>

  <integration_strategy>
    <existing_functions>
      <reuse name="log_message()">Use for consistent logging throughout</reuse>
      <reuse name="color_echo()">Use for colored output in user listing</reuse>
      <reuse name="generate_uuid()">Reuse for user UUID generation</reuse>
      <reuse name="generate_short_id()">Reuse for user shortId generation</reuse>
      <reuse name="handle_error()">Integrate with existing error handling</reuse>
    </existing_functions>
    <environment_integration>
      <env_vars>Read SERVER_IP, XRAY_PORT from .env file</env_vars>
      <keys>Read public key from data/keys/public.key</keys>
      <paths>Use PROJECT_ROOT constant for all file operations</paths>
    </environment_integration>
    <file_structure>
      <database>data/users.db - User database (600 permissions)</database>
      <configs>config/users/ - Client configurations (600 permissions)</configs>
      <server>config/server.json - Server configuration updates</server>
      <backups>config/server.json.backup.* - Configuration backups</backups>
    </file_structure>
  </integration_strategy>

  <security_considerations>
    <file_permissions>
      <file path="data/users.db" mode="600">User database with sensitive UUIDs</file>
      <directory path="config/users/" mode="700">Client configuration directory</directory>
      <file path="config/users/*.url" mode="600">VLESS URLs with credentials</file>
      <file path="config/users/*.json" mode="600">JSON configurations</file>
    </file_permissions>
    <input_validation>
      <validation>Username format validation with regex</validation>
      <validation>Input sanitization to prevent injection</validation>
      <validation>Length limits on all inputs</validation>
      <validation>Special character filtering</validation>
    </input_validation>
    <operational_security>
      <measure>Atomic file operations to prevent corruption</measure>
      <measure>Configuration backup before modifications</measure>
      <measure>Rollback capability for failed operations</measure>
      <measure>Process isolation for Docker commands</measure>
    </operational_security>
  </security_considerations>

  <testing_strategy>
    <test_levels>
      <level name="Unit Testing">
        <focus>Individual functions with mocked dependencies</focus>
        <coverage>100% function coverage target</coverage>
        <isolation>No system modifications or Docker operations</isolation>
      </level>
      <level name="Integration Testing">
        <focus>Complete workflows with real file operations</focus>
        <environment>Temporary test directories</environment>
        <validation>End-to-end functionality verification</validation>
      </level>
      <level name="Error Testing">
        <focus>Error conditions and recovery scenarios</focus>
        <scenarios>Config corruption, Docker failures, filesystem issues</scenarios>
        <validation>Proper error messages and recovery</validation>
      </level>
    </test_levels>
    <test_data_management>
      <setup>Create known test datasets</setup>
      <cleanup>Automatic cleanup of test artifacts</cleanup>
      <isolation>Each test runs in isolated environment</isolation>
    </test_data_management>
    <continuous_testing>
      <automation>Integration with existing test runner</automation>
      <reporting>Consistent reporting format</reporting>
      <metrics>Test timing and coverage reporting</metrics>
    </continuous_testing>
  </testing_strategy>

  <risk_management>
    <technical_risks>
      <risk level="medium" probability="low">
        <description>Server configuration corruption during JSON updates</description>
        <impact>Service interruption, user connectivity loss</impact>
        <mitigation>
          <measure>Create backup before every modification</measure>
          <measure>Validate JSON after updates</measure>
          <measure>Implement rollback on validation failure</measure>
          <measure>Test JSON manipulation functions thoroughly</measure>
        </mitigation>
        <detection>JSON validation function returns error</detection>
        <recovery>Restore from backup, log error, notify user</recovery>
      </risk>
      <risk level="low" probability="low">
        <description>Docker container fails to restart after config changes</description>
        <impact>Service unavailable until manual intervention</impact>
        <mitigation>
          <measure>Check Docker service status before operations</measure>
          <measure>Implement timeout for restart operations</measure>
          <measure>Provide rollback mechanism</measure>
          <measure>Add Docker health checks</measure>
        </mitigation>
        <detection>Docker restart command returns non-zero exit</detection>
        <recovery>Restore backup config, restart with old config</recovery>
      </risk>
      <risk level="low" probability="medium">
        <description>Race condition during concurrent user operations</description>
        <impact>Database corruption or inconsistent state</impact>
        <mitigation>
          <measure>Implement file locking for database operations</measure>
          <measure>Use atomic file operations</measure>
          <measure>Add operation serialization</measure>
        </mitigation>
        <detection>File lock acquisition failure</detection>
        <recovery>Retry operation after delay</recovery>
      </risk>
    </technical_risks>
    <operational_risks>
      <risk level="low" probability="low">
        <description>User database file corruption</description>
        <impact>Loss of user management capability</impact>
        <mitigation>
          <measure>Regular database validation</measure>
          <measure>Backup database before modifications</measure>
          <measure>Implement database repair function</measure>
        </mitigation>
      </risk>
    </operational_risks>
  </risk_management>

  <quality_assurance>
    <code_standards>
      <standard>Follow existing bash scripting patterns</standard>
      <standard>Use 2-space indentation consistently</standard>
      <standard>Implement comprehensive error handling</standard>
      <standard>Add detailed function documentation</standard>
      <standard>Use meaningful variable names</standard>
    </code_standards>
    <testing_requirements>
      <requirement>100% function coverage in unit tests</requirement>
      <requirement>All error paths tested</requirement>
      <requirement>Integration tests for complete workflows</requirement>
      <requirement>Performance testing for database operations</requirement>
    </testing_requirements>
    <review_criteria>
      <criterion>Code follows project patterns</criterion>
      <criterion>All functions have proper error handling</criterion>
      <criterion>Security best practices implemented</criterion>
      <criterion>Documentation is comprehensive</criterion>
      <criterion>Tests provide adequate coverage</criterion>
    </review_criteria>
  </quality_assurance>

  <delivery_timeline>
    <phases>
      <phase number="1" duration="1 day">
        <name>Core Database and Validation Functions</name>
        <tasks>T1, T2</tasks>
        <deliverables>User database management, input validation</deliverables>
        <milestone>Basic user data operations working</milestone>
      </phase>
      <phase number="2" duration="2 days">
        <name>Configuration Management</name>
        <tasks>T3, T4</tasks>
        <deliverables>Server config updates, client config generation</deliverables>
        <milestone>Complete configuration pipeline working</milestone>
      </phase>
      <phase number="3" duration="2 days">
        <name>User Management Commands</name>
        <tasks>T5, T6</tasks>
        <deliverables>Full user management CLI, command integration</deliverables>
        <milestone>Complete user management functionality</milestone>
      </phase>
      <phase number="4" duration="1 day">
        <name>Testing and Documentation</name>
        <tasks>T7, T8</tasks>
        <deliverables>Complete test suite, updated documentation</deliverables>
        <milestone>Production-ready Stage 3 implementation</milestone>
      </phase>
    </phases>
    <total_duration>6 days</total_duration>
    <total_effort>22 hours</total_effort>
  </delivery_timeline>

  <success_criteria>
    <functional_criteria>
      <criterion>Users can be added with unique usernames (3-32 chars, alphanumeric + _ -)</criterion>
      <criterion>Users can be removed cleanly with all associated files deleted</criterion>
      <criterion>User listing displays formatted information with status indicators</criterion>
      <criterion>Client configurations generated in both URL and JSON formats</criterion>
      <criterion>Maximum 10 user limit enforced</criterion>
      <criterion>Server configuration automatically updated for each user operation</criterion>
      <criterion>Docker container properly restarted after configuration changes</criterion>
    </functional_criteria>
    <technical_criteria>
      <criterion>All user management functions integrated into main CLI</criterion>
      <criterion>User database properly maintained with correct format and permissions</criterion>
      <criterion>File permissions properly set (600 for sensitive files, 700 for directories)</criterion>
      <criterion>JSON configuration valid and properly formatted</criterion>
      <criterion>Error handling comprehensive with proper logging</criterion>
      <criterion>Input validation prevents security vulnerabilities</criterion>
    </technical_criteria>
    <quality_criteria>
      <criterion>100% test coverage for all new functions</criterion>
      <criterion>All tests passing including error scenarios</criterion>
      <criterion>Code follows project standards and patterns</criterion>
      <criterion>Documentation updated and comprehensive</criterion>
      <criterion>Performance acceptable for target user count (10)</criterion>
    </quality_criteria>
  </success_criteria>

  <post_implementation>
    <validation_checklist>
      <check>Run complete test suite and verify 100% pass rate</check>
      <check>Test user addition workflow end-to-end</check>
      <check>Test user removal workflow end-to-end</check>
      <check>Verify user limit enforcement</check>
      <check>Test duplicate username prevention</check>
      <check>Verify file permissions on all created files</check>
      <check>Test Docker container restart after config changes</check>
      <check>Validate generated VLESS URLs work with clients</check>
      <check>Test error recovery scenarios</check>
      <check>Verify integration with existing system</check>
    </validation_checklist>
    <handoff_preparation>
      <item>Update CLAUDE.md with Stage 3 completion status</item>
      <item>Document any deviations from original plan</item>
      <item>Prepare Stage 4 requirements analysis</item>
      <item>Update project timeline for remaining stages</item>
    </handoff_preparation>
  </post_implementation>
</implementation_plan>