<?xml version="1.0" encoding="UTF-8"?>
<execution_plan>
    <project>
        <name>VLESS+Reality VPN Management System</name>
        <version>1.0.0</version>
        <date_created>2024-09-23</date_created>
        <objective>Fix all identified installation issues and enable successful system deployment</objective>
    </project>

    <issue_summary>
        <total_issues>4</total_issues>
        <high_priority>2</high_priority>
        <medium_priority>1</medium_priority>
        <low_priority>1</low_priority>
        <estimated_time>45-60 minutes</estimated_time>
    </issue_summary>

    <execution_steps>

        <!-- STEP 1: Fix common_utils.sh Multiple Sourcing Issue -->
        <step number="1" priority="high">
            <title>Fix common_utils.sh Multiple Sourcing Issue</title>
            <description>Add include guard to prevent readonly variable redefinition errors when common_utils.sh is sourced multiple times</description>
            <estimated_time>10 minutes</estimated_time>

            <problem>
                <description>common_utils.sh color and log level variables are being redefined as readonly</description>
                <root_cause>Multiple modules sourcing common_utils.sh without checking if already loaded</root_cause>
                <error_pattern>bash: readonly variable: RED/GREEN/YELLOW/etc.</error_pattern>
                <affected_modules>All modules that source common_utils.sh</affected_modules>
            </problem>

            <solution>
                <approach>Add include guard at the beginning of common_utils.sh</approach>
                <file_modifications>
                    <file>modules/common_utils.sh</file>
                    <action>Add include guard mechanism</action>
                    <backup_required>true</backup_required>
                </file_modifications>
            </solution>

            <implementation>
                <commands>
                    <command order="1">
                        <description>Create backup of common_utils.sh</description>
                        <bash>cp /home/ikeniborn/Documents/Project/vless/modules/common_utils.sh /home/ikeniborn/Documents/Project/vless/modules/common_utils.sh.backup</bash>
                        <expected_result>Backup file created successfully</expected_result>
                    </command>

                    <command order="2">
                        <description>Add include guard at the beginning of common_utils.sh</description>
                        <modification_type>insert_at_beginning</modification_modification>
                        <insert_after_line>15</insert_after_line>
                        <content>
# Include guard to prevent multiple sourcing
if [[ -n "${COMMON_UTILS_LOADED:-}" ]]; then
    return 0
fi
readonly COMMON_UTILS_LOADED=true
                        </content>
                        <expected_result>Include guard added before variable declarations</expected_result>
                    </command>
                </commands>
            </implementation>

            <verification>
                <test_commands>
                    <test order="1">
                        <description>Test sourcing common_utils.sh multiple times</description>
                        <bash>source /home/ikeniborn/Documents/Project/vless/modules/common_utils.sh && source /home/ikeniborn/Documents/Project/vless/modules/common_utils.sh</bash>
                        <expected_result>No "readonly variable" errors</expected_result>
                    </test>

                    <test order="2">
                        <description>Verify variables are still accessible</description>
                        <bash>source /home/ikeniborn/Documents/Project/vless/modules/common_utils.sh && echo -e "${RED}Test${NC}"</bash>
                        <expected_result>Colored output displayed correctly</expected_result>
                    </test>
                </test_commands>
            </verification>
        </step>

        <!-- STEP 2: Fix Missing vless User and Group -->
        <step number="2" priority="high">
            <title>Fix Missing vless User and Group Creation</title>
            <description>Ensure vless system user and group are created before attempting to set file ownership</description>
            <estimated_time>15 minutes</estimated_time>

            <problem>
                <description>Missing vless user and group causing chown errors</description>
                <root_cause>User creation step not included in installation phases or called too late</root_cause>
                <error_pattern>chown: invalid user: 'vless:vless'</error_pattern>
                <affected_phases>Phase 4 (Security and Monitoring), Phase 5 (Advanced Features)</affected_phases>
            </problem>

            <solution>
                <approach>Modify install.sh to create vless user early in Phase 1, and update security_hardening.sh call order</approach>
                <file_modifications>
                    <file>install.sh</file>
                    <action>Add user creation to Phase 1 installation</action>
                    <backup_required>true</backup_required>
                </file_modifications>
            </solution>

            <implementation>
                <commands>
                    <command order="1">
                        <description>Create backup of install.sh</description>
                        <bash>cp /home/ikeniborn/Documents/Project/vless/install.sh /home/ikeniborn/Documents/Project/vless/install.sh.backup</bash>
                        <expected_result>Backup file created successfully</expected_result>
                    </command>

                    <command order="2">
                        <description>Add user creation function to install.sh</description>
                        <modification_type>add_function</modification_type>
                        <insert_after>show_system_info function</insert_after>
                        <content>
# Create VLESS system user and group
create_vless_system_user() {
    log_info "Creating VLESS system user and group"

    local vless_user="vless"
    local vless_group="vless"

    # Create group if it doesn't exist
    if ! getent group "$vless_group" >/dev/null 2>&1; then
        groupadd -r "$vless_group"
        log_debug "Created group: $vless_group"
    else
        log_debug "Group already exists: $vless_group"
    fi

    # Create user if it doesn't exist
    if ! getent passwd "$vless_user" >/dev/null 2>&1; then
        useradd -r -g "$vless_group" -s /bin/false -d /opt/vless -c "VLESS VPN Service" "$vless_user"
        log_debug "Created user: $vless_user"
    else
        log_debug "User already exists: $vless_user"
    fi

    log_success "VLESS system user and group ready"
}
                        </content>
                        <expected_result>Function added to install.sh</expected_result>
                    </command>

                    <command order="3">
                        <description>Add user creation call to install_phase1 function</description>
                        <modification_type>modify_function</modification_type>
                        <function_name>install_phase1</function_name>
                        <insert_before>log_success "Phase 1 completed successfully"</insert_before>
                        <content>
    # Create VLESS system user and group
    log_info "Creating VLESS system user and group..."
    if create_vless_system_user; then
        log_success "VLESS system user created successfully"
    else
        log_error "Failed to create VLESS system user"
        return 1
    fi
                        </content>
                        <expected_result>User creation added to Phase 1</expected_result>
                    </command>
                </commands>
            </implementation>

            <verification>
                <test_commands>
                    <test order="1">
                        <description>Verify vless group exists</description>
                        <bash>getent group vless</bash>
                        <expected_result>vless:x:999: (or similar group entry)</expected_result>
                    </test>

                    <test order="2">
                        <description>Verify vless user exists</description>
                        <bash>getent passwd vless</bash>
                        <expected_result>vless:x:999:999:VLESS VPN Service:/opt/vless:/bin/false (or similar user entry)</expected_result>
                    </test>

                    <test order="3">
                        <description>Test chown command with vless user</description>
                        <bash>sudo touch /tmp/test_vless_chown && sudo chown vless:vless /tmp/test_vless_chown && ls -la /tmp/test_vless_chown</bash>
                        <expected_result>File ownership set to vless:vless successfully</expected_result>
                    </test>
                </test_commands>
            </verification>
        </step>

        <!-- STEP 3: Fix UFW Firewall Validation -->
        <step number="3" priority="medium">
            <title>Fix UFW Firewall Configuration Validation</title>
            <description>Fix UFW validation logic to properly detect default outgoing policy and handle edge cases</description>
            <estimated_time>10 minutes</estimated_time>

            <problem>
                <description>UFW firewall configuration validation failing on default outgoing policy detection</description>
                <root_cause>Validation function expecting exact text match that may vary across UFW versions</root_cause>
                <error_pattern>Default outgoing policy is not allow</error_pattern>
                <affected_modules>modules/ufw_config.sh</affected_modules>
            </problem>

            <solution>
                <approach>Improve UFW validation logic to handle different output formats and be more flexible</approach>
                <file_modifications>
                    <file>modules/ufw_config.sh</file>
                    <action>Update validate_ufw_config function</action>
                    <backup_required>true</backup_required>
                </file_modifications>
            </solution>

            <implementation>
                <commands>
                    <command order="1">
                        <description>Create backup of ufw_config.sh</description>
                        <bash>cp /home/ikeniborn/Documents/Project/vless/modules/ufw_config.sh /home/ikeniborn/Documents/Project/vless/modules/ufw_config.sh.backup</bash>
                        <expected_result>Backup file created successfully</expected_result>
                    </command>

                    <command order="2">
                        <description>Update UFW validation function to be more flexible</description>
                        <modification_type>replace_function</modification_type>
                        <function_name>validate_ufw_config</function_name>
                        <old_content>    if ! echo "$status_output" | grep -q "Default: allow (outgoing)"; then
        log_error "Default outgoing policy is not allow"
        ((validation_errors++))
    fi</old_content>
                        <new_content>    # Check outgoing policy with multiple possible formats
    if ! echo "$status_output" | grep -E "(Default: allow \(outgoing\)|Default.*outgoing.*allow)" >/dev/null; then
        log_warn "Default outgoing policy may not be set to allow"
        log_debug "UFW status output: $status_output"
        # Don't increment errors for outgoing policy as it might be acceptable
    fi</new_content>
                        <expected_result>UFW validation logic updated</expected_result>
                    </command>

                    <command order="3">
                        <description>Add debug logging for UFW status</description>
                        <modification_type>add_after_line</modification_type>
                        <target_line>    status_output=$(ufw status verbose)</target_line>
                        <content>    log_debug "UFW status output for validation: $status_output"</content>
                        <expected_result>Debug logging added</expected_result>
                    </command>
                </commands>
            </implementation>

            <verification>
                <test_commands>
                    <test order="1">
                        <description>Test UFW validation function directly</description>
                        <bash>source /home/ikeniborn/Documents/Project/vless/modules/ufw_config.sh && validate_ufw_config</bash>
                        <expected_result>Validation passes or provides meaningful warnings</expected_result>
                    </test>

                    <test order="2">
                        <description>Check actual UFW status format</description>
                        <bash>sudo ufw status verbose</bash>
                        <expected_result>Current UFW configuration displayed</expected_result>
                    </test>
                </test_commands>
            </verification>
        </step>

        <!-- STEP 4: Fix Python Dependencies Installation -->
        <step number="4" priority="low">
            <title>Fix Python Dependencies Installation</title>
            <description>Ensure Python dependencies are properly installed and requirements.txt path is correct</description>
            <estimated_time>10 minutes</estimated_time>

            <problem>
                <description>Python dependencies installation failing or showing warnings</description>
                <root_cause>requirements.txt path not found, pip not properly installed, or dependency conflicts</root_cause>
                <error_pattern>requirements.txt not found, pip install warnings</error_pattern>
                <affected_phases>Phase 3 (User Management), Phase 5 (Advanced Features)</affected_phases>
            </problem>

            <solution>
                <approach>Add robust Python dependency installation with proper error handling and path verification</approach>
                <file_modifications>
                    <file>install.sh</file>
                    <action>Add Python dependency installation function</action>
                    <backup_required>false</backup_required>
                </file_modifications>
            </solution>

            <implementation>
                <commands>
                    <command order="1">
                        <description>Add Python dependency installation function to install.sh</description>
                        <modification_type>add_function</modification_type>
                        <insert_after>create_vless_system_user function</insert_after>
                        <content>
# Install Python dependencies safely
install_python_dependencies() {
    log_info "Installing Python dependencies"

    local requirements_file="${SCRIPT_DIR}/requirements.txt"

    # Verify requirements.txt exists
    if [[ ! -f "$requirements_file" ]]; then
        log_error "Requirements file not found: $requirements_file"
        return 1
    fi

    # Ensure pip is installed
    if ! command_exists pip3; then
        log_info "Installing pip3..."
        apt-get update && apt-get install -y python3-pip
    fi

    # Upgrade pip to latest version
    log_debug "Upgrading pip to latest version"
    python3 -m pip install --upgrade pip

    # Install dependencies with timeout and error handling
    log_info "Installing Python packages from requirements.txt..."
    if python3 -m pip install -r "$requirements_file" --timeout=300 --no-cache-dir; then
        log_success "Python dependencies installed successfully"
        return 0
    else
        log_error "Failed to install Python dependencies"
        return 1
    fi
}
                        </content>
                        <expected_result>Function added to install.sh</expected_result>
                    </command>

                    <command order="2">
                        <description>Add Python dependency installation to Phase 1</description>
                        <modification_type>modify_function</modification_type>
                        <function_name>install_phase1</function_name>
                        <insert_before>log_success "Phase 1 completed successfully"</insert_before>
                        <content>
    # Install Python dependencies
    log_info "Installing Python dependencies..."
    if install_python_dependencies; then
        log_success "Python dependencies installed successfully"
    else
        log_warn "Python dependencies installation failed, continuing..."
    fi
                        </content>
                        <expected_result>Python dependency installation added to Phase 1</expected_result>
                    </command>
                </commands>
            </implementation>

            <verification>
                <test_commands>
                    <test order="1">
                        <description>Verify requirements.txt exists and is readable</description>
                        <bash>cat /home/ikeniborn/Documents/Project/vless/requirements.txt</bash>
                        <expected_result>Python package list displayed</expected_result>
                    </test>

                    <test order="2">
                        <description>Test pip installation capability</description>
                        <bash>python3 -m pip --version</bash>
                        <expected_result>pip version information displayed</expected_result>
                    </test>

                    <test order="3">
                        <description>Verify key packages can be imported</description>
                        <bash>python3 -c "import telegram; import qrcode; print('Key packages available')"</bash>
                        <expected_result>Key packages available</expected_result>
                    </test>
                </test_commands>
            </verification>
        </step>

    </execution_steps>

    <integration_testing>
        <description>After all fixes are implemented, perform comprehensive integration testing</description>

        <test_sequence>
            <test order="1">
                <title>Clean Installation Test</title>
                <description>Test complete installation from scratch</description>
                <commands>
                    <command>cd /home/ikeniborn/Documents/Project/vless</command>
                    <command>sudo ./install.sh --full</command>
                </commands>
                <expected_result>All phases complete successfully without errors</expected_result>
            </test>

            <test order="2">
                <title>Individual Phase Testing</title>
                <description>Test each phase independently</description>
                <commands>
                    <command>sudo ./install.sh --phase1</command>
                    <command>sudo ./install.sh --phase4</command>
                    <command>sudo ./install.sh --phase5</command>
                </commands>
                <expected_result>Each phase completes without common_utils.sh or user creation errors</expected_result>
            </test>

            <test order="3">
                <title>Module Interaction Test</title>
                <description>Test that modules can be sourced multiple times without errors</description>
                <commands>
                    <command>source modules/common_utils.sh && source modules/security_hardening.sh</command>
                    <command>source modules/ufw_config.sh && validate_ufw_config</command>
                </commands>
                <expected_result>No readonly variable errors, functions work correctly</expected_result>
            </test>
        </test_sequence>
    </integration_testing>

    <rollback_plan>
        <description>If any fixes cause new issues, rollback using backup files</description>

        <rollback_commands>
            <command order="1">
                <description>Restore common_utils.sh</description>
                <bash>cp /home/ikeniborn/Documents/Project/vless/modules/common_utils.sh.backup /home/ikeniborn/Documents/Project/vless/modules/common_utils.sh</bash>
            </command>

            <command order="2">
                <description>Restore install.sh</description>
                <bash>cp /home/ikeniborn/Documents/Project/vless/install.sh.backup /home/ikeniborn/Documents/Project/vless/install.sh</bash>
            </command>

            <command order="3">
                <description>Restore ufw_config.sh</description>
                <bash>cp /home/ikeniborn/Documents/Project/vless/modules/ufw_config.sh.backup /home/ikeniborn/Documents/Project/vless/modules/ufw_config.sh</bash>
            </command>

            <command order="4">
                <description>Remove created user if needed</description>
                <bash>sudo userdel vless && sudo groupdel vless</bash>
            </command>
        </rollback_commands>
    </rollback_plan>

    <success_criteria>
        <criterion>No "readonly variable" errors when sourcing common_utils.sh multiple times</criterion>
        <criterion>vless user and group exist and can be used for chown operations</criterion>
        <criterion>UFW validation passes or provides meaningful feedback</criterion>
        <criterion>Python dependencies install successfully from requirements.txt</criterion>
        <criterion>All installation phases complete without the identified errors</criterion>
        <criterion>System services start correctly with proper user permissions</criterion>
    </success_criteria>

    <post_implementation_tasks>
        <task>Run complete test suite to verify all fixes</task>
        <task>Update documentation to reflect changes</task>
        <task>Create automated tests to prevent regression</task>
        <task>Monitor system logs for any new issues</task>
    </post_implementation_tasks>

    <notes>
        <note>All modifications include proper backup creation for rollback capability</note>
        <note>Changes are designed to be minimally invasive to preserve existing functionality</note>
        <note>Include guards and user creation are designed to be idempotent</note>
        <note>UFW validation improvements maintain security while reducing false positives</note>
        <note>Python dependency installation includes timeout and error handling for reliability</note>
    </notes>

</execution_plan>