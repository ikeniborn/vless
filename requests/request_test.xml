<request version="3.1">
    
    <!-- ═══════════════════════════════════════════════════════════════════ -->
    <!-- КОНФИГУРАЦИЯ ВЫПОЛНЕНИЯ -->
    <!-- ═══════════════════════════════════════════════════════════════════ -->
    <execution_config>
        <language>ru</language>
        <mode>flexible_iterative</mode>
        <!-- flexible_iterative: итеративный процесс с возможностью 
             многократного возврата для проверки гипотез -->
        
        <thinking>
            <enabled>true</enabled>
            <strategy>intensive</strategy>
            <!-- intensive: активное использование thinking для анализа,
                 формирования гипотез и диагностики проблем -->
            <max_length>16000</max_length>
        </thinking>
        
        <validation>hypothesis_based</validation>
        <!-- Проверка гипотез и итеративная диагностика -->
        
        <error_handling>investigate_and_resolve</error_handling>
        <!-- При проблемах: глубокий анализ, гипотезы, решение -->
        
        <testing>
            <approach>comprehensive</approach>
            <!-- comprehensive: комплексное многоуровневое тестирование -->
            <automation>encouraged</automation>
            <!-- Автоматизация тестов где возможно -->
        </testing>
    </execution_config>

    <!-- ═══════════════════════════════════════════════════════════════════ -->
    <!-- ВНЕШНИЕ ПАРАМЕТРЫ -->
    <!-- ═══════════════════════════════════════════════════════════════════ -->
    <external_inputs>
        
        <!-- Роль и экспертиза -->
        <role>
            <title>Full-Stack разработчик и отладчик систем</title>
            <expertise>
                - Bash scripting для Linux платформ
                - Docker и Docker Compose
                - Python разработка
                - Системная диагностика и отладка
                - Root cause analysis
                - Логирование и мониторинг
                - Performance troubleshooting
                - Security debugging
                - Test design и QA practices
            </expertise>
        </role>

        <!-- Контекст выполнения -->
        <context>
            <description>
                Диагностика и исправление проблемы в VLESS системе
            </description>
            <problem_description>
                <!-- Описание проблемы заполняется пользователем -->
                <symptom>Наблюдаемая проблема или некорректное поведение</symptom>
                <environment>Где проявляется проблема</environment>
                <impact>Как проблема влияет на систему</impact>
                <when_started>Когда проблема начала проявляться</when_started>
            </problem_description>
            <available_resources>
                <file path="PRD.md" 
                      type="architecture_reference" 
                      status="reference"
                      description="Архитектура системы - для понимания как должно работать"/>
                <logs>Логи приложения/системы если доступны</logs>
                <configs>Конфигурационные файлы</configs>
                <source_code>Исходный код для анализа</source_code>
            </available_resources>
            <work_area>
                <base_path>/home/ikeniborn/Documents/Project/vless/</base_path>
                <affected_components>Определяются в процессе диагностики</affected_components>
            </work_area>
            <environment>
                <platform>Linux</platform>
                <containerization>Docker</containerization>
                <scripting>Bash, Python</scripting>
            </environment>
        </context>

        <!-- Требования к выполнению -->
        <requirements>
            <primary>
                Диагностировать root cause проблемы, исправить её и предотвратить 
                повторение с соблюдением архитектуры из PRD.md
            </primary>
            
            <diagnostic_goals>
                - Воспроизвести проблему
                - Определить root cause (не симптом!)
                - Понять почему это произошло
                - Оценить масштаб влияния
                - Найти все affected components
            </diagnostic_goals>
            
            <fix_requirements>
                - Исправить root cause, не симптомы
                - Минимальное invasive изменение
                - Не сломать существующий функционал
                - Обеспечить откатываемость
                - Предотвратить регрессию
            </fix_requirements>
            
            <testing_requirements>
                - Комплексное многоуровневое тестирование
                - Документированные test cases
                - Автоматизация где возможно
                - Покрытие всех critical paths
                - Регрессионное и integration тестирование
            </testing_requirements>
            
            <quality_criteria>
                - Проблема полностью решена
                - Root cause устранен
                - Все тесты пройдены успешно
                - Документирован для предотвращения повторения
                - Соответствие PRD.md сохранено
            </quality_criteria>
        </requirements>

        <!-- Ограничения -->
        <constraints>
            <technical>
                - Использовать только Bash для скриптов
                - Обеспечить совместимость с Docker окружением
                - Учитывать особенности Linux платформы
                - Минимизировать downtime
            </technical>
            
            <architectural>
                - ВСЕГДА следовать архитектуре из PRD.md
                - Не создавать технический долг
                - Соблюдать принятые паттерны
                - Обеспечить обратную совместимость
            </architectural>
            
            <operational>
                - Возможность быстрого rollback
                - Минимальное влияние на работающую систему
                - Сохранение данных при исправлении
                - Логирование для будущей диагностики
            </operational>
        </constraints>

    </external_inputs>

    <!-- ═══════════════════════════════════════════════════════════════════ -->
    <!-- ДИРЕКТИВЫ ВЫПОЛНЕНИЯ -->
    <!-- ═══════════════════════════════════════════════════════════════════ -->
    <directives>
        
        <directive id="ITER-01" priority="CRITICAL">
            <rule>Используй итеративный подход: гипотеза → проверка → уточнение</rule>
            <flexibility>Многократный возврат к диагностике при необходимости</flexibility>
        </directive>

        <directive id="THK-01" priority="CRITICAL">
            <rule>АКТИВНО используй &lt;thinking&gt; на всех этапах диагностики</rule>
            <when>
                - Формирование гипотез о причине проблемы
                - Анализ симптомов и паттернов
                - Выбор направления расследования
                - Оценка последствий потенциальных fix'ов
                - Связывание разрозненных фактов
                - Анализ результатов тестирования
                - Планирование test coverage
            </when>
            <emphasis>
                Debugging - это про размышление и анализ. 
                Thinking должен быть интенсивным на протяжении всего процесса.
            </emphasis>
        </directive>

        <directive id="ROOT-01" priority="CRITICAL">
            <rule>Всегда ищи root cause, а не симптомы</rule>
            <approach>
                - Спрашивай "почему?" минимум 3-5 раз (5 Whys method)
                - Отличай симптом от причины
                - Проверяй все компоненты в цепочке
                - Не останавливайся на первом найденном факторе
            </approach>
        </directive>

        <directive id="HYP-01" priority="HIGH">
            <rule>Формируй и проверяй гипотезы систематически</rule>
            <process>
                1. Собери факты и симптомы
                2. Сформулируй несколько гипотез
                3. Определи как проверить каждую
                4. Проверь гипотезы от наиболее вероятной
                5. Уточни понимание на основе результатов
                6. Повтори если нужно
            </process>
        </directive>

        <directive id="PRD-01" priority="CRITICAL">
            <rule>Сверяйся с PRD.md для понимания как должно работать</rule>
            <verification>
                - Как система спроектирована?
                - Какое поведение expected?
                - Соответствует ли fix архитектуре?
            </verification>
        </directive>

        <directive id="MIN-01" priority="HIGH">
            <rule>Минимальные invasive изменения для fix'а</rule>
            <principle>
                Surgical fix: измени ровно то, что необходимо для решения проблемы.
                Избегай рефакторинга "заодно" - это отдельная задача.
            </principle>
        </directive>

        <directive id="TEST-01" priority="CRITICAL">
            <rule>Комплексное многоуровневое тестирование обязательно</rule>
            <scope>
                - Разработка детального test plan
                - Unit, integration, system тесты
                - Функциональное и нефункциональное тестирование
                - Регрессионное тестирование всех affected areas
                - Документирование всех test cases
            </scope>
        </directive>

        <directive id="REG-01" priority="CRITICAL">
            <rule>Обязательное регрессионное тестирование после fix'а</rule>
            <scope>
                - Проверь что проблема решена
                - Проверь что ничего не сломалось
                - Проверь edge cases
                - Проверь смежные компоненты
            </scope>
        </directive>

        <directive id="DOC-01" priority="HIGH">
            <rule>Детально документируй проблему, решение и тесты</rule>
            <rationale>
                Post-mortem анализ с test coverage поможет избежать подобных проблем 
                в будущем и ускорит диагностику схожих issues.
            </rationale>
        </directive>

        <directive id="SAFE-01" priority="CRITICAL">
            <rule>Обеспечь возможность быстрого rollback</rule>
            <approach>
                - Backup критичных конфигов перед изменением
                - Документируй шаги для отката
                - Тестируй rollback procedure
            </approach>
        </directive>

        <directive id="COM-01" priority="MEDIUM">
            <rule>Поддерживай активную коммуникацию</rule>
            <approach>
                - Объясняй свои гипотезы
                - Запрашивай дополнительную информацию
                - Предупреждай о рисках
                - Предлагай альтернативные подходы
            </approach>
        </directive>

    </directives>

    <!-- ═══════════════════════════════════════════════════════════════════ -->
    <!-- РАБОЧИЙ ПРОЦЕСС -->
    <!-- ═══════════════════════════════════════════════════════════════════ -->
    <workflow>

        <!-- ───────────────────────────────────────────────────────────── -->
        <!-- ФАЗА 1: СБОР ИНФОРМАЦИИ И ДИАГНОСТИКА -->
        <!-- ───────────────────────────────────────────────────────────── -->
        <phase order="1" id="diagnosis" mandatory="true" iterative="true">
            
            <objective>
                Глубокое понимание проблемы и определение root cause
            </objective>

            <actions>
                <action priority="critical">
                    Собрать детальную информацию о проблеме:
                    - Точные симптомы и error messages
                    - Условия воспроизведения
                    - Когда/как часто проявляется
                    - Что изменилось перед появлением
                </action>
                <action priority="critical">
                    Изучить доступные источники информации:
                    - Логи приложения и системы
                    - Конфигурационные файлы
                    - Исходный код affected components
                    - Метрики системы если доступны
                </action>
                <action priority="high">
                    Проверить соответствие PRD.md:
                    - Как система должна работать
                    - Какие компоненты вовлечены
                    - Expected поведение
                </action>
                <action priority="high">
                    Воспроизвести проблему если возможно:
                    - Создать минимальный test case
                    - Определить точные условия
                    - Проверить стабильность воспроизведения
                </action>
                <action priority="medium">
                    Исследовать контекст:
                    - История изменений (git log)
                    - Документация по известным issues
                    - Web search для схожих проблем
                </action>
            </actions>

            <thinking_prompt>
                КРИТИЧНО: используй intensive thinking для:
                - Анализа собранной информации
                - Формирования гипотез о причине
                - Связывания симптомов с возможными причинами
                - Определения направления дальнейшего расследования
                
                Проанализируй:
                - Какие паттерны видны в симптомах?
                - Что могло быть истинной причиной?
                - Какие компоненты могут быть вовлечены?
                - Какие гипотезы наиболее вероятны?
                - Как можно проверить каждую гипотезу?
                - Что говорит PRD о том как должно работать?
            </thinking_prompt>

            <hypothesis_formation>
                <step>1. Список всех наблюдаемых симптомов</step>
                <step>2. Для каждого симптома - возможные причины</step>
                <step>3. Ранжирование гипотез по вероятности</step>
                <step>4. Определение способов проверки</step>
                <step>5. Систематическая проверка от наиболее вероятной</step>
            </hypothesis_formation>

            <deliverables>
                <item type="problem_analysis">
                    Детальный анализ проблемы с симптомами и контекстом
                </item>
                <item type="hypotheses_list">
                    Список сформированных гипотез с приоритетами
                </item>
                <item type="reproduction_steps" optional="true">
                    Шаги для воспроизведения проблемы
                </item>
                <item type="affected_components">
                    Список компонентов, которые могут быть затронуты
                </item>
            </deliverables>

            <checkpoint>
                ✓ Проблема детально описана и понята
                ✓ Доступная информация собрана и проанализирована
                ✓ Гипотезы о root cause сформулированы
                ✓ План проверки гипотез готов
                ✓ Готовность к root cause analysis подтверждена
            </checkpoint>

            <iteration_note>
                Эта фаза может повторяться многократно по мере проверки гипотез
                и получения новой информации. Это нормально для debugging.
            </iteration_note>

        </phase>

        <!-- ───────────────────────────────────────────────────────────── -->
        <!-- ФАЗА 2: ROOT CAUSE ANALYSIS -->
        <!-- ───────────────────────────────────────────────────────────── -->
        <phase order="2" id="root_cause_analysis" mandatory="true" iterative="true">
            
            <dependency>phase[order=1].checkpoint.passed</dependency>
            
            <objective>
                Определение истинной причины проблемы, не симптомов
            </objective>

            <actions>
                <action priority="critical">
                    Проверить гипотезы систематически:
                    - Начать с наиболее вероятной
                    - Собрать evidence для/против
                    - Исключить или подтвердить
                </action>
                <action priority="critical">
                    Применить 5 Whys method:
                    - Спросить "почему?" минимум 3-5 раз
                    - Не останавливаться на поверхностных причинах
                    - Докопаться до root cause
                </action>
                <action priority="high">
                    Проверить цепочку причинно-следственных связей:
                    - Как проблема propagates через систему
                    - Где первоначальный failure point
                    - Какие компоненты affected downstream
                </action>
                <action priority="high">
                    Анализировать с разных перспектив:
                    - Код и логика
                    - Конфигурация
                    - Окружение и dependencies
                    - Timing и race conditions
                    - Permissions и security
                </action>
                <action priority="medium">
                    Использовать инструменты диагностики:
                    - Детальное логирование
                    - Debugger если применимо
                    - Трассировка вызовов
                    - Мониторинг ресурсов
                </action>
            </actions>

            <five_whys_example>
                Problem: Скрипт падает с ошибкой
                Why 1? → Файл не найден
                Why 2? → Путь некорректный
                Why 3? → Переменная окружения не установлена
                Why 4? → Docker контейнер не передает переменные
                Why 5? → docker-compose.yml не содержит environment section
                ROOT CAUSE: Отсутствующая конфигурация в docker-compose.yml
            </five_whys_example>

            <thinking_prompt>
                КРИТИЧНО: intensive thinking для:
                - Оценки evidence для каждой гипотезы
                - Связывания разрозненных факторов
                - Определения настоящего root cause
                - Отличия симптомов от причин
                
                Проанализируй:
                - Это действительно root cause или еще один симптом?
                - Почему это произошло на более глубоком уровне?
                - Какие другие факторы могут быть вовлечены?
                - Как это объясняет ВСЕ наблюдаемые симптомы?
                - Есть ли противоречия в текущем понимании?
            </thinking_prompt>

            <deliverables>
                <item type="root_cause">
                    Определенная root cause с обоснованием
                </item>
                <item type="evidence">
                    Evidence подтверждающий root cause
                </item>
                <item type="impact_analysis">
                    Анализ масштаба влияния проблемы
                </item>
                <item type="why_it_happened">
                    Объяснение почему это произошло
                </item>
            </deliverables>

            <checkpoint>
                ✓ Root cause определен с уверенностью
                ✓ Evidence подтверждает root cause
                ✓ Объяснение покрывает все симптомы
                ✓ Понятно почему это произошло
                ✓ Масштаб влияния оценен
                ✓ Готовность к разработке fix'а подтверждена
            </checkpoint>

            <iteration_note>
                Если root cause не подтверждается - возврат к Фазе 1 для 
                пересмотра гипотез. Лучше потратить время на точную диагностику,
                чем исправлять не ту проблему.
            </iteration_note>

        </phase>

        <!-- ───────────────────────────────────────────────────────────── -->
        <!-- ФАЗА 3: РАЗРАБОТКА И ПРИМЕНЕНИЕ FIX'А -->
        <!-- ───────────────────────────────────────────────────────────── -->
        <phase order="3" id="fix_development" mandatory="true">
            
            <dependency>phase[order=2].checkpoint.passed</dependency>
            
            <objective>
                Создание минимального, безопасного и эффективного исправления
            </objective>

            <actions>
                <action priority="critical">
                    Спроектировать fix для root cause:
                    - Адресовать именно root cause, не симптомы
                    - Минимальные необходимые изменения
                    - Учесть архитектуру из PRD.md
                </action>
                <action priority="critical">
                    Оценить риски и side effects:
                    - Что может сломаться
                    - Какие компоненты затронуты
                    - Нужен ли staged rollout
                </action>
                <action priority="high">
                    Подготовить rollback план:
                    - Backup конфигураций
                    - Документировать шаги отката
                    - Подготовить проверочные команды
                </action>
                <action priority="high">
                    Реализовать fix с quality standards:
                    - Clean, понятный код
                    - Proper error handling
                    - Logging для мониторинга
                    - Комментарии объясняющие fix
                </action>
                <action priority="high">
                    Подготовить test plan для валидации fix'а:
                    - Определить scope тестирования
                    - Идентифицировать test scenarios
                    - Подготовить test data
                </action>
                <action priority="medium">
                    Добавить защиту от повторения:
                    - Validation checks
                    - Better error messages
                    - Monitoring/alerting
                </action>
            </actions>

            <fix_design_principles>
                <principle>Surgical precision: измени ровно необходимое</principle>
                <principle>Backwards compatible: не ломай существующий функционал</principle>
                <principle>Fail-safe: graceful degradation при проблемах</principle>
                <principle>Observable: добавь логирование для мониторинга</principle>
                <principle>Reversible: обеспечь возможность отката</principle>
                <principle>Testable: дизайн должен быть легко тестируемым</principle>
            </fix_design_principles>

            <thinking_prompt>
                Используй thinking для:
                - Проектирования оптимального fix'а
                - Оценки последствий и рисков
                - Выбора между альтернативными подходами
                - Обеспечения соответствия PRD
                - Планирования тестового покрытия
                
                Проанализируй:
                - Какой подход наиболее безопасен?
                - Что может пойти не так?
                - Как минимизировать риски?
                - Соответствует ли fix архитектуре?
                - Есть ли более элегантное решение?
                - Как эффективно протестировать fix?
            </thinking_prompt>

            <deliverables>
                <item type="fix_implementation">
                    Код/конфиг исправления с комментариями
                </item>
                <item type="rollback_plan">
                    Детальный план отката изменений
                </item>
                <item type="deployment_instructions">
                    Инструкции по применению fix'а
                </item>
                <item type="test_plan_outline">
                    Предварительный план тестирования
                </item>
                <item type="monitoring_plan">
                    Что мониторить после применения
                </item>
            </deliverables>

            <checkpoint>
                ✓ Fix разработан и адресует root cause
                ✓ Код соответствует quality standards
                ✓ Rollback план подготовлен
                ✓ Риски оценены и минимизированы
                ✓ PRD соблюден
                ✓ Предварительный test plan готов
                ✓ Fix готов к комплексному тестированию
            </checkpoint>

        </phase>

        <!-- ───────────────────────────────────────────────────────────── -->
        <!-- ФАЗА 4: КОМПЛЕКСНОЕ ТЕСТИРОВАНИЕ И ВЕРИФИКАЦИЯ -->
        <!-- ───────────────────────────────────────────────────────────── -->
        <phase order="4" id="comprehensive_testing" mandatory="true">
            
            <dependency>phase[order=3].checkpoint.passed</dependency>
            
            <objective>
                Комплексная валидация fix'а через многоуровневое тестирование
                с полным документированием test cases и результатов
            </objective>

            <!-- ============================================================ -->
            <!-- ПОДФАЗА 4.1: ПЛАНИРОВАНИЕ ТЕСТИРОВАНИЯ -->
            <!-- ============================================================ -->
            <subphase order="4.1" id="test_planning" mandatory="true">
                
                <objective>
                    Разработка детального test plan с полным coverage analysis
                </objective>

                <actions>
                    <action priority="critical">
                        Определить test scope и boundaries:
                        - Что тестируется (in-scope)
                        - Что не тестируется (out-of-scope)
                        - Affected components и их dependencies
                        - Critical paths для тестирования
                    </action>
                    <action priority="critical">
                        Идентифицировать test levels:
                        - Unit testing (отдельные функции/модули)
                        - Integration testing (взаимодействие компонентов)
                        - System testing (система в целом)
                        - Acceptance testing (соответствие требованиям)
                    </action>
                    <action priority="high">
                        Определить test types:
                        - Functional testing (функциональность работает)
                        - Non-functional (performance, security, usability)
                        - Regression testing (ничего не сломано)
                        - Smoke testing (базовая работоспособность)
                    </action>
                    <action priority="high">
                        Спроектировать test scenarios и cases:
                        - Happy path scenarios
                        - Edge cases и boundary conditions
                        - Error handling scenarios
                        - Negative test cases
                    </action>
                    <action priority="medium">
                        Подготовить test environment и data:
                        - Тестовое окружение (Docker containers, etc.)
                        - Test data sets
                        - Mock services если нужно
                    </action>
                    <action priority="medium">
                        Определить success criteria:
                        - Pass/fail критерии для каждого теста
                        - Coverage targets
                        - Performance benchmarks
                    </action>
                </actions>

                <test_plan_structure>
                    <section order="1">
                        ## Test Scope
                        - In-scope components
                        - Out-of-scope areas
                        - Testing boundaries
                        - Dependencies
                    </section>
                    
                    <section order="2">
                        ## Test Strategy
                        - Test levels (unit, integration, system)
                        - Test types (functional, non-functional)
                        - Testing approach
                        - Automation strategy
                    </section>
                    
                    <section order="3">
                        ## Test Scenarios
                        - High-level test scenarios
                        - Priority и risk assessment
                        - Coverage mapping
                    </section>
                    
                    <section order="4">
                        ## Test Environment
                        - Environment setup
                        - Test data requirements
                        - Tools и utilities
                    </section>
                    
                    <section order="5">
                        ## Success Criteria
                        - Pass/fail criteria
                        - Coverage targets
                        - Performance benchmarks
                    </section>
                </test_plan_structure>

                <thinking_prompt>
                    Используй thinking для:
                    - Определения оптимального test coverage
                    - Приоритизации test cases
                    - Выявления рисков в тестировании
                    - Планирования automation возможностей
                    
                    Проанализируй:
                    - Какие areas наиболее критичны для тестирования?
                    - Какие риски могут быть упущены?
                    - Достаточен ли planned coverage?
                    - Какие тесты можно автоматизировать?
                    - Как оптимизировать time/coverage trade-off?
                </thinking_prompt>

                <deliverables>
                    <item type="detailed_test_plan">
                        Детальный test plan с scope, strategy, scenarios
                    </item>
                    <item type="test_cases_outline">
                        Outline test cases для каждого scenario
                    </item>
                    <item type="coverage_matrix">
                        Матрица покрытия требований тестами
                    </item>
                </deliverables>

                <checkpoint>
                    ✓ Test scope четко определен
                    ✓ Test strategy разработана
                    ✓ Test scenarios идентифицированы
                    ✓ Test environment требования определены
                    ✓ Success criteria установлены
                    ✓ Готовность к выполнению тестов подтверждена
                </checkpoint>

            </subphase>

            <!-- ============================================================ -->
            <!-- ПОДФАЗА 4.2: ФУНКЦИОНАЛЬНОЕ ТЕСТИРОВАНИЕ -->
            <!-- ============================================================ -->
            <subphase order="4.2" id="functional_testing" mandatory="true">
                
                <objective>
                    Верификация что fix решает проблему и все функции работают
                </objective>

                <test_categories>
                    
                    <category id="fix_validation" priority="critical">
                        <name>Валидация Fix'а</name>
                        <description>
                            Проверка что оригинальная проблема решена
                        </description>
                        <test_cases>
                            <test_case id="FV-01" priority="critical">
                                <title>Воспроизведение оригинальной проблемы с fix'ом</title>
                                <preconditions>Fix применен в тестовой среде</preconditions>
                                <steps>
                                    1. Настроить условия оригинальной проблемы
                                    2. Выполнить действия которые вызывали проблему
                                    3. Проверить что проблема больше не проявляется
                                </steps>
                                <expected_result>
                                    Оригинальная проблема не воспроизводится
                                </expected_result>
                                <pass_criteria>
                                    - Нет error messages
                                    - Expected поведение наблюдается
                                    - Логи не содержат ошибок
                                </pass_criteria>
                            </test_case>
                            
                            <test_case id="FV-02" priority="high">
                                <title>Тестирование на различных условиях</title>
                                <description>
                                    Проверка fix'а в различных сценариях использования
                                </description>
                                <steps>
                                    Варьировать:
                                    - Input данные
                                    - Системные условия
                                    - Timing и sequence операций
                                </steps>
                                <expected_result>
                                    Fix работает во всех tested условиях
                                </expected_result>
                            </test_case>

                            <test_case id="FV-03" priority="high">
                                <title>Длительное тестирование (soak test)</title>
                                <description>
                                    Проверка стабильности fix'а при длительной работе
                                </description>
                                <duration>Минимум 1 час непрерывной работы</duration>
                                <expected_result>
                                    Нет memory leaks, degradation, или intermittent issues
                                </expected_result>
                            </test_case>
                        </test_cases>
                    </category>

                    <category id="happy_path" priority="critical">
                        <name>Happy Path Scenarios</name>
                        <description>
                            Основные пользовательские сценарии работают корректно
                        </description>
                        <test_cases>
                            <test_case id="HP-01" priority="critical">
                                <title>Основной workflow с fix'ом</title>
                                <steps>
                                    Выполнить типичный пользовательский workflow
                                    от начала до конца
                                </steps>
                                <expected_result>
                                    Весь workflow выполняется успешно
                                </expected_result>
                            </test_case>
                            
                            <test_case id="HP-02" priority="high">
                                <title>Альтернативные valid paths</title>
                                <description>
                                    Проверка альтернативных способов достижения цели
                                </description>
                            </test_case>
                        </test_cases>
                    </category>

                    <category id="edge_cases" priority="high">
                        <name>Edge Cases и Boundary Conditions</name>
                        <description>
                            Граничные условия и нетипичные сценарии
                        </description>
                        <test_cases>
                            <test_case id="EC-01" priority="high">
                                <title>Boundary values testing</title>
                                <examples>
                                    - Пустые input
                                    - Максимальные values
                                    - Минимальные values
                                    - Специальные символы
                                    - Unicode и encoding
                                </examples>
                            </test_case>
                            
                            <test_case id="EC-02" priority="high">
                                <title>Concurrent operations</title>
                                <description>
                                    Одновременные операции и race conditions
                                </description>
                            </test_case>

                            <test_case id="EC-03" priority="medium">
                                <title>Ресурсные ограничения</title>
                                <description>
                                    Поведение при ограниченных ресурсах
                                    (memory, disk, network)
                                </description>
                            </test_case>
                        </test_cases>
                    </category>

                    <category id="error_handling" priority="high">
                        <name>Error Handling</name>
                        <description>
                            Корректная обработка ошибочных ситуаций
                        </description>
                        <test_cases>
                            <test_case id="EH-01" priority="high">
                                <title>Invalid input handling</title>
                                <expected_result>
                                    Graceful error messages, no crashes
                                </expected_result>
                            </test_case>
                            
                            <test_case id="EH-02" priority="high">
                                <title>External service failures</title>
                                <description>
                                    Поведение при недоступности dependencies
                                </description>
                            </test_case>

                            <test_case id="EH-03" priority="medium">
                                <title>Partial failures recovery</title>
                                <description>
                                    Recovery после частичных сбоев
                                </description>
                            </test_case>
                        </test_cases>
                    </category>

                    <category id="negative_testing" priority="medium">
                        <name>Negative Testing</name>
                        <description>
                            Система корректно отклоняет некорректные действия
                        </description>
                        <test_cases>
                            <test_case id="NT-01" priority="medium">
                                <title>Unauthorized access attempts</title>
                            </test_case>
                            
                            <test_case id="NT-02" priority="medium">
                                <title>Malformed requests</title>
                            </test_case>

                            <test_case id="NT-03" priority="low">
                                <title>Security bypass attempts</title>
                            </test_case>
                        </test_cases>
                    </category>

                </test_categories>

                <thinking_prompt>
                    Используй thinking для:
                    - Анализа результатов каждого test case
                    - Выявления patterns в failures
                    - Определения additional test cases
                    - Оценки severity найденных issues
                    
                    Проанализируй:
                    - Все ли critical paths покрыты?
                    - Есть ли unexpected failures?
                    - Требуются ли дополнительные тесты?
                    - Какие риски остаются?
                </thinking_prompt>

                <deliverables>
                    <item type="functional_test_results">
                        Детальные результаты всех functional тестов
                    </item>
                    <item type="test_execution_log">
                        Лог выполнения с timestamps, inputs, outputs
                    </item>
                    <item type="defects_log">
                        Список найденных defects с severity
                    </item>
                </deliverables>

                <checkpoint>
                    ✓ Оригинальная проблема не воспроизводится
                    ✓ Все happy path scenarios проходят
                    ✓ Edge cases обработаны корректно
                    ✓ Error handling работает правильно
                    ✓ Negative tests проходят
                    ✓ Нет critical или high severity defects
                </checkpoint>

            </subphase>

            <!-- ============================================================ -->
            <!-- ПОДФАЗА 4.3: РЕГРЕССИОННОЕ ТЕСТИРОВАНИЕ -->
            <!-- ============================================================ -->
            <subphase order="4.3" id="regression_testing" mandatory="true">
                
                <objective>
                    Подтверждение что fix не сломал существующий функционал
                </objective>

                <test_categories>
                    
                    <category id="core_functionality" priority="critical">
                        <name>Критичный функционал системы</name>
                        <test_approach>
                            Повторно протестировать все критичные функции
                            которые могут быть затронуты fix'ом
                        </test_approach>
                        <test_cases>
                            <test_case id="RF-01" priority="critical">
                                <title>Core operations verification</title>
                                <description>
                                    Проверка всех основных операций системы
                                </description>
                            </test_case>
                        </test_cases>
                    </category>

                    <category id="adjacent_components" priority="high">
                        <name>Смежные компоненты</name>
                        <test_approach>
                            Тестирование компонентов которые взаимодействуют
                            с измененным кодом
                        </test_approach>
                        <test_cases>
                            <test_case id="AC-01" priority="high">
                                <title>Integration points testing</title>
                                <description>
                                    Проверка всех точек интеграции
                                </description>
                            </test_case>
                        </test_cases>
                    </category>

                    <category id="downstream_effects" priority="high">
                        <name>Downstream эффекты</name>
                        <test_approach>
                            Проверка функционала который зависит от
                            измененных компонентов
                        </test_approach>
                    </category>

                    <category id="existing_test_suite" priority="high">
                        <name>Существующий test suite</name>
                        <test_approach>
                            Запуск всех existing automated tests если доступны
                        </test_approach>
                        <test_cases>
                            <test_case id="ETS-01" priority="high">
                                <title>Run existing test suite</title>
                                <expected_result>
                                    Все previously passing tests still pass
                                </expected_result>
                            </test_case>
                        </test_cases>
                    </category>

                </test_categories>

                <regression_checklist>
                    <check priority="critical">
                        ✓ Все core operations работают как раньше
                    </check>
                    <check priority="critical">
                        ✓ Integration points функционируют корректно
                    </check>
                    <check priority="high">
                        ✓ Dependent функционал не affected
                    </check>
                    <check priority="high">
                        ✓ Existing automated tests pass
                    </check>
                    <check priority="medium">
                        ✓ Performance не деградировало
                    </check>
                    <check priority="medium">
                        ✓ Logs чистые от новых errors
                    </check>
                </regression_checklist>

                <deliverables>
                    <item type="regression_test_results">
                        Результаты regression тестирования
                    </item>
                    <item type="comparison_report">
                        Сравнение before/after behavior
                    </item>
                    <item type="no_regression_confirmation">
                        Подтверждение отсутствия регрессий
                    </item>
                </deliverables>

                <checkpoint>
                    ✓ Весь core functionality работает
                    ✓ Нет регрессий в смежных компонентах
                    ✓ Downstream effects проверены
                    ✓ Existing tests pass
                    ✓ Нет new errors в логах
                </checkpoint>

            </subphase>

            <!-- ============================================================ -->
            <!-- ПОДФАЗА 4.4: INTEGRATION И SYSTEM ТЕСТИРОВАНИЕ -->
            <!-- ============================================================ -->
            <subphase order="4.4" id="integration_system_testing" mandatory="true">
                
                <objective>
                    Проверка системы как единого целого и интеграций между компонентами
                </objective>

                <test_categories>
                    
                    <category id="component_integration" priority="high">
                        <name>Integration между компонентами</name>
                        <test_cases>
                            <test_case id="CI-01" priority="high">
                                <title>Component interaction flows</title>
                                <description>
                                    Проверка полных flows через multiple components
                                </description>
                            </test_case>
                            
                            <test_case id="CI-02" priority="high">
                                <title>Data flow validation</title>
                                <description>
                                    Корректность передачи данных между компонентами
                                </description>
                            </test_case>
                        </test_cases>
                    </category>

                    <category id="system_level" priority="high">
                        <name>System-level тестирование</name>
                        <test_cases>
                            <test_case id="SL-01" priority="high">
                                <title>End-to-end scenarios</title>
                                <description>
                                    Полные user scenarios через всю систему
                                </description>
                            </test_case>
                            
                            <test_case id="SL-02" priority="high">
                                <title>Multi-component workflows</title>
                                <description>
                                    Workflows задействующие multiple subsystems
                                </description>
                            </test_case>
                        </test_cases>
                    </category>

                    <category id="external_integrations" priority="medium">
                        <name>External integrations</name>
                        <test_approach>
                            Проверка взаимодействия с external services/APIs
                        </test_approach>
                    </category>

                </test_categories>

                <deliverables>
                    <item type="integration_test_results">
                        Результаты integration тестов
                    </item>
                    <item type="system_test_results">
                        Результаты system-level тестов
                    </item>
                </deliverables>

                <checkpoint>
                    ✓ Component integrations работают
                    ✓ End-to-end scenarios успешны
                    ✓ External integrations функциональны
                    ✓ Data flow корректен
                </checkpoint>

            </subphase>

            <!-- ============================================================ -->
            <!-- ПОДФАЗА 4.5: NON-FUNCTIONAL ТЕСТИРОВАНИЕ -->
            <!-- ============================================================ -->
            <subphase order="4.5" id="non_functional_testing">
                
                <objective>
                    Проверка non-functional requirements (performance, security, etc.)
                </objective>

                <test_categories>
                    
                    <category id="performance" priority="high">
                        <name>Performance Testing</name>
                        <test_cases>
                            <test_case id="PT-01" priority="high">
                                <title>Response time verification</title>
                                <expected_result>
                                    Response times в приемлемых пределах
                                </expected_result>
                            </test_case>
                            
                            <test_case id="PT-02" priority="medium">
                                <title>Resource utilization</title>
                                <metrics>CPU, Memory, Disk I/O, Network</metrics>
                            </test_case>

                            <test_case id="PT-03" priority="medium">
                                <title>Load testing</title>
                                <description>
                                    Behavior under expected load
                                </description>
                            </test_case>
                        </test_cases>
                    </category>

                    <category id="security" priority="high">
                        <name>Security Validation</name>
                        <test_cases>
                            <test_case id="SEC-01" priority="high">
                                <title>Access control verification</title>
                            </test_case>
                            
                            <test_case id="SEC-02" priority="high">
                                <title>Data protection checks</title>
                            </test_case>

                            <test_case id="SEC-03" priority="medium">
                                <title>Vulnerability scan</title>
                            </test_case>
                        </test_cases>
                    </category>

                    <category id="reliability" priority="medium">
                        <name>Reliability Testing</name>
                        <test_cases>
                            <test_case id="REL-01" priority="medium">
                                <title>Stability testing</title>
                                <description>
                                    Длительная работа без degradation
                                </description>
                            </test_case>
                            
                            <test_case id="REL-02" priority="medium">
                                <title>Recovery testing</title>
                                <description>
                                    Recovery after failures
                                </description>
                            </test_case>
                        </test_cases>
                    </category>

                    <category id="usability" priority="low">
                        <name>Usability Validation</name>
                        <test_approach>
                            Если есть user interface - проверка usability aspects
                        </test_approach>
                    </category>

                </test_categories>

                <deliverables>
                    <item type="performance_metrics">
                        Performance метрики и benchmarks
                    </item>
                    <item type="security_report">
                        Security validation отчет
                    </item>
                </deliverables>

                <checkpoint>
                    ✓ Performance acceptable
                    ✓ Security requirements met
                    ✓ System reliable и stable
                </checkpoint>

            </subphase>

            <!-- ============================================================ -->
            <!-- ПОДФАЗА 4.6: ROLLBACK ТЕСТИРОВАНИЕ -->
            <!-- ============================================================ -->
            <subphase order="4.6" id="rollback_testing" mandatory="true">
                
                <objective>
                    Проверка что rollback procedure работает корректно
                </objective>

                <test_cases>
                    <test_case id="RB-01" priority="critical">
                        <title>Rollback execution</title>
                        <steps>
                            1. Применить fix
                            2. Выполнить rollback procedure
                            3. Проверить что система вернулась в исходное состояние
                        </steps>
                        <expected_result>
                            Система полностью возвращается к pre-fix состоянию
                        </expected_result>
                    </test_case>

                    <test_case id="RB-02" priority="high">
                        <title>Data integrity after rollback</title>
                        <expected_result>
                            Данные не повреждены после rollback
                        </expected_result>
                    </test_case>

                    <test_case id="RB-03" priority="high">
                        <title>System functionality after rollback</title>
                        <expected_result>
                            Все функции работают как до применения fix'а
                        </expected_result>
                    </test_case>
                </test_cases>

                <deliverables>
                    <item type="rollback_test_report">
                        Отчет о тестировании rollback процедуры
                    </item>
                </deliverables>

                <checkpoint>
                    ✓ Rollback procedure работает
                    ✓ Система возвращается в исходное состояние
                    ✓ Данные не повреждены
                    ✓ Функционал работает после rollback
                </checkpoint>

            </subphase>

            <!-- ============================================================ -->
            <!-- ПОДФАЗА 4.7: SMOKE TESTING В PRODUCTION-LIKE ОКРУЖЕНИИ -->
            <!-- ============================================================ -->
            <subphase order="4.7" id="production_smoke_testing">
                
                <objective>
                    Финальная проверка в максимально приближенном к production окружении
                </objective>

                <test_approach>
                    Быстрая проверка critical functionality в production-like environment
                </test_approach>

                <test_cases>
                    <test_case id="SM-01" priority="critical">
                        <title>Critical paths smoke test</title>
                        <description>
                            Быстрая проверка всех critical user journeys
                        </description>
                        <duration>15-30 минут</duration>
                    </test_case>

                    <test_case id="SM-02" priority="high">
                        <title>Monitoring и alerting check</title>
                        <description>
                            Проверка что monitoring работает и alerts configured
                        </description>
                    </test_case>
                </test_cases>

                <deliverables>
                    <item type="smoke_test_report">
                        Результаты smoke testing
                    </item>
                    <item type="production_readiness_assessment">
                        Оценка готовности к production deployment
                    </item>
                </deliverables>

                <checkpoint>
                    ✓ Critical paths работают в production-like environment
                    ✓ Monitoring и logging функциональны
                    ✓ Нет critical issues
                    ✓ Система готова к production deployment
                </checkpoint>

            </subphase>

            <!-- ============================================================ -->
            <!-- СВОДНЫЕ DELIVERABLES ФАЗЫ 4 -->
            <!-- ============================================================ -->
            <phase_deliverables>
                <item type="comprehensive_test_plan" format="markdown">
                    Полный test plan со всеми scenarios и cases
                </item>
                <item type="test_execution_report" format="markdown">
                    Детальный отчет выполнения всех тестов с результатами
                </item>
                <item type="test_coverage_report">
                    Анализ тестового покрытия
                </item>
                <item type="defects_summary">
                    Сводка найденных defects и их resolution
                </item>
                <item type="regression_confirmation">
                    Подтверждение отсутствия регрессий
                </item>
                <item type="performance_benchmarks">
                    Performance метрики до/после fix'а
                </item>
                <item type="production_readiness_report">
                    Финальная оценка готовности к production
                </item>
            </phase_deliverables>

            <!-- ============================================================ -->
            <!-- THINKING PROMPT ДЛЯ ФАЗЫ 4 -->
            <!-- ============================================================ -->
            <phase_thinking_prompt>
                На протяжении всей Фазы 4 используй intensive thinking для:
                
                **При планировании:**
                - Определения оптимального test coverage
                - Приоритизации test cases
                - Выявления потенциальных gaps в testing
                
                **При выполнении:**
                - Анализа результатов каждого теста
                - Выявления patterns в failures
                - Определения root cause для test failures
                - Решения продолжать или блокировать deployment
                
                **При оценке:**
                - Достаточности test coverage
                - Готовности к production
                - Остающихся рисков
                - Необходимости дополнительных тестов
                
                Ключевые вопросы для analysis:
                - Покрыты ли все critical paths?
                - Есть ли unexpected failures?
                - Какие риски остаются?
                - Безопасно ли deploying to production?
                - Что может пойти не так в production?
                - Готовы ли мы к rollback если понадобится?
            </phase_thinking_prompt>

            <!-- ============================================================ -->
            <!-- CHECKPOINT ФАЗЫ 4 -->
            <!-- ============================================================ -->
            <phase_checkpoint>
                ✓ Comprehensive test plan разработан и выполнен
                ✓ Оригинальная проблема полностью решена
                ✓ Все functional tests пройдены
                ✓ Регрессионное тестирование пройдено успешно
                ✓ Integration и system tests прошли
                ✓ Non-functional requirements проверены
                ✓ Rollback procedure протестирована
                ✓ Smoke testing в production-like среде успешен
                ✓ Нет critical или high severity defects
                ✓ Test coverage достаточен
                ✓ Все deliverables подготовлены
                ✓ Production readiness подтверждена
                ✓ Fix готов к production deployment
            </phase_checkpoint>

        </phase>

        <!-- ───────────────────────────────────────────────────────────── -->
        <!-- ФАЗА 5: ДОКУМЕНТИРОВАНИЕ И POST-MORTEM -->
        <!-- ───────────────────────────────────────────────────────────── -->
        <phase order="5" id="documentation_postmortem" mandatory="true">
            
            <dependency>phase[order=4].checkpoint.passed</dependency>
            
            <objective>
                Полное документирование проблемы, решения, тестирования и уроков на будущее
            </objective>

            <actions>
                <action priority="critical">
                    Создать post-mortem документ:
                    - Детальное описание проблемы
                    - Timeline событий
                    - Root cause analysis
                    - Примененное решение
                    - Test coverage и результаты
                    - Lessons learned
                </action>
                <action priority="high">
                    Документировать fix:
                    - Что было изменено и почему
                    - Как это решает проблему
                    - Deployment instructions
                    - Rollback procedure
                </action>
                <action priority="high">
                    Документировать test suite:
                    - Test plan и strategy
                    - Test cases для регрессионного тестирования
                    - Automation scripts если созданы
                    - Test data requirements
                </action>
                <action priority="high">
                    Обновить проектную документацию:
                    - README если нужно
                    - Troubleshooting guide
                    - Known issues list
                    - Testing guide
                    - CLAUDE.md (память проекта)
                </action>
                <action priority="medium">
                    Предложить превентивные меры:
                    - Как предотвратить в будущем
                    - Улучшения мониторинга
                    - Дополнительные automated tests
                    - Process improvements
                </action>
                <action priority="low">
                    Создать knowledge base entry:
                    - Для будущего reference
                    - Для схожих проблем
                    - Для onboarding новых членов команды
                </action>
            </actions>

            <postmortem_structure>
                <section order="1">
                    ## Executive Summary
                    - Что произошло (краткое описание)
                    - Когда произошло
                    - Impact на систему/пользователей
                    - Время до решения
                    - Test coverage summary
                </section>
                
                <section order="2">
                    ## Timeline
                    - Когда проблема начала проявляться
                    - Когда была обнаружена
                    - Ключевые моменты диагностики
                    - Когда был применен fix
                    - Testing timeline
                    - Когда проблема полностью решена
                </section>
                
                <section order="3">
                    ## Root Cause Analysis
                    - Детальное описание root cause
                    - Почему это произошло
                    - Как долго существовала проблема
                    - Почему не была обнаружена раньше
                    - Что в testing процессе упустили
                </section>
                
                <section order="4">
                    ## Resolution
                    - Что было изменено
                    - Почему этот подход выбран
                    - Как это решает проблему
                    - Deployment details
                </section>

                <section order="5">
                    ## Testing Summary
                    - Test strategy и coverage
                    - Ключевые test scenarios
                    - Test results summary
                    - Defects found и resolved
                    - Regression testing results
                </section>
                
                <section order="6">
                    ## Prevention
                    - Как предотвратить повторение
                    - Улучшения процессов
                    - Дополнительный мониторинг
                    - Автоматизированные проверки
                    - Новые automated tests
                </section>
                
                <section order="7">
                    ## Lessons Learned
                    - Что сработало хорошо
                    - Что можно улучшить
                    - Технические insights
                    - Process improvements
                    - Testing improvements
                </section>
            </postmortem_structure>

            <deliverables>
                <item type="postmortem_document" format="markdown">
                    Полный post-mortem анализ инцидента
                </item>
                <item type="fix_documentation">
                    Техническая документация fix'а
                </item>
                <item type="test_suite_documentation">
                    Документация test suite для регрессионного тестирования
                </item>
                <item type="updated_docs">
                    Обновленная проектная документация
                </item>
                <item type="prevention_plan">
                    План превентивных мер
                </item>
            </deliverables>

            <checkpoint>
                ✓ Post-mortem документ создан
                ✓ Fix полностью задокументирован
                ✓ Test suite задокументирован
                ✓ Проектная документация обновлена
                ✓ Превентивные меры определены
                ✓ Knowledge captured для будущего
                ✓ Работа полностью завершена
            </checkpoint>

        </phase>

    </workflow>

    <!-- ═══════════════════════════════════════════════════════════════════ -->
    <!-- ОБРАБОТКА ОШИБОК И ИСКЛЮЧЕНИЙ -->
    <!-- ═══════════════════════════════════════════════════════════════════ -->
    <error_handling>

        <scenario type="cannot_reproduce">
            <detection>Проблему невозможно воспроизвести</detection>
            <response>
                1. Использовать &lt;thinking&gt; для анализа
                2. Собрать максимум информации о условиях
                3. Проверить различные окружения
                4. Рассмотреть intermittent/race condition
                5. Попросить пользователя о дополнительных деталях
                6. Если критично - работать с логами и traces
            </response>
        </scenario>

        <scenario type="test_failures">
            <detection>Тесты выявили новые проблемы</detection>
            <response>
                1. Использовать &lt;thinking&gt; для анализа failures
                2. Определить root cause тестовых failures
                3. Оценить severity и impact
                4. Решить: fix и retest или rollback к диагностике
                5. Если critical - вернуться к Фазе 2/3
                6. Документировать найденные issues
            </response>
        </scenario>

        <scenario type="regression_detected">
            <detection>Регрессия обнаружена при тестировании</detection>
            <response>
                1. Использовать &lt;thinking&gt; для analysis
                2. Определить что именно сломалось
                3. Вернуться к Фазе 3 для пересмотра fix'а
                4. Найти альтернативное решение без regression
                5. Повторить тестирование после корректировки
            </response>
        </scenario>

        <scenario type="insufficient_test_coverage">
            <detection>Test coverage недостаточен</detection>
            <response>
                1. Использовать &lt;thinking&gt; для gap analysis
                2. Идентифицировать untested areas
                3. Дополнить test plan
                4. Выполнить дополнительные тесты
                5. Подтвердить достаточность coverage
            </response>
        </scenario>

        <scenario type="multiple_root_causes">
            <detection>Обнаружено несколько независимых root causes</detection>
            <response>
                1. Использовать &lt;thinking&gt; для анализа взаимосвязей
                2. Определить приоритеты causes по impact
                3. Решить можно ли исправить все сразу
                4. Создать отдельные fix'ы для каждого
                5. Тестировать комплексно с increased coverage
            </response>
        </scenario>

        <scenario type="fix_creates_regression">
            <detection>Fix решает проблему но ломает другой функционал</detection>
            <response>
                1. Использовать &lt;thinking&gt; для анализа конфликта
                2. Вернуться к Фазе 3 для пересмотра подхода
                3. Найти альтернативное решение
                4. Возможно требуется более глубокий рефакторинг
                5. Согласовать trade-offs с пользователем
            </response>
        </scenario>

        <scenario type="insufficient_information">
            <detection>Недостаточно информации для диагностики</detection>
            <response>
                1. Четко перечислить что требуется
                2. Объяснить зачем нужна эта информация
                3. Предложить способы получения данных
                4. Предложить добавить логирование для сбора
                5. Работать с тем что доступно, документируя предположения
            </response>
        </scenario>

        <scenario type="architectural_issue">
            <detection>Root cause в архитектурном решении</detection>
            <response>
                1. Использовать &lt;thinking&gt; для глубокого анализа
                2. Четко объяснить архитектурную проблему
                3. Предложить варианты:
                   - Quick tactical fix (workaround)
                   - Proper architectural fix (долгосрочно)
                4. Оценить trade-offs каждого подхода
                5. Получить решение от пользователя
                6. Документировать технический долг если tactical fix
                7. Расширить test coverage для architectural area
            </response>
        </scenario>

        <scenario type="environment_specific">
            <detection>Проблема проявляется только в специфичном окружении</detection>
            <response>
                1. Детально изучить различия окружений
                2. Использовать &lt;thinking&gt; для анализа environment factors
                3. Проверить: versions, configs, resources, timing
                4. Найти специфичный фактор
                5. Решить адаптировать fix или окружение
                6. Добавить environment-specific тесты
            </response>
        </scenario>

        <scenario type="fix_too_complex">
            <detection>Необходимый fix слишком сложен и рискован</detection>
            <response>
                1. Использовать &lt;thinking&gt; для оценки options
                2. Рассмотреть alternatives:
                   - Staged approach (по частям)
                   - Temporary workaround + долгосрочное решение
                   - Полный рефакторинг компонента
                3. Оценить риски каждого подхода
                4. Предложить рекомендацию с обоснованием
                5. Получить направление от пользователя
                6. Усилить testing для complex fix
            </response>
        </scenario>

    </error_handling>

    <!-- ═══════════════════════════════════════════════════════════════════ -->
    <!-- ПРАВИЛА ВЫПОЛНЕНИЯ -->
    <!-- ═══════════════════════════════════════════════════════════════════ -->
    <execution_rules>

        <rule id="R01" enforcement="CRITICAL">
            <description>
                Итеративный подход обязателен: гипотеза → проверка → уточнение
            </description>
            <rationale>
                Debugging - это исследование. Многократные итерации нормальны.
            </rationale>
        </rule>

        <rule id="R02" enforcement="CRITICAL">
            <description>
                Всегда ищи root cause, никогда не останавливайся на симптомах
            </description>
            <verification>
                Применяй 5 Whys method. Если fix не адресует root cause - возвращайся к анализу.
            </verification>
        </rule>

        <rule id="R03" enforcement="CRITICAL">
            <description>
                Intensive использование thinking на всех этапах
            </description>
            <rationale>
                Debugging требует глубокого анализа и размышления. 
                Thinking - основной инструмент для этого.
            </rationale>
        </rule>

        <rule id="R04" enforcement="STRICT">
            <description>
                PRD.md - reference для понимания expected behavior
            </description>
            <usage>
                Сверяйся с PRD чтобы понять как должно работать и 
                ensure fix соответствует архитектуре.
            </usage>
        </rule>

        <rule id="R05" enforcement="CRITICAL">
            <description>
                Минимальные invasive изменения для fix'а
            </description>
            <principle>
                Surgical fix: измени ровно то что нужно для решения проблемы.
                Рефакторинг "заодно" - это отдельная задача.
            </principle>
        </rule>

        <rule id="R06" enforcement="CRITICAL">
            <description>
                Комплексное многоуровневое тестирование обязательно
            </description>
            <scope>
                Разработка test plan, выполнение всех test levels,
                документирование test cases и результатов.
            </scope>
        </rule>

        <rule id="R07" enforcement="CRITICAL">
            <description>
                Обязательное регрессионное тестирование после любого fix'а
            </description>
            <scope>
                Проверь что проблема решена И ничего не сломалось.
            </scope>
        </rule>

        <rule id="R08" enforcement="REQUIRED">
            <description>
                Всегда обеспечивай возможность rollback
            </description>
            <approach>
                Backup configs, document rollback steps, test rollback procedure.
            </approach>
        </rule>

        <rule id="R09" enforcement="REQUIRED">
            <description>
                Детальное post-mortem документирование обязательно
            </description>
            <rationale>
                Lessons learned предотвращают повторение и помогают команде расти.
            </rationale>
        </rule>

        <rule id="R10" enforcement="REQUIRED">
            <description>
                Документирование test suite для будущего использования
            </description>
            <rationale>
                Test cases используются для регрессионного тестирования в будущем.
            </rationale>
        </rule>

        <rule id="R11" enforcement="RECOMMENDED">
            <description>
                Предлагай превентивные меры для предотвращения повторения
            </description>
            <examples>
                Мониторинг, автоматизированные проверки, улучшения процессов
            </examples>
        </rule>

        <rule id="R12" enforcement="RECOMMENDED">
            <description>
                Активная коммуникация с пользователем на всех этапах
            </description>
            <approach>
                Объясняй гипотезы, запрашивай информацию, предупреждай о рисках
            </approach>
        </rule>

    </execution_rules>

    <!-- ═══════════════════════════════════════════════════════════════════ -->
    <!-- ПРИМЕЧАНИЯ ПО ИСПОЛЬЗОВАНИЮ -->
    <!-- ═══════════════════════════════════════════════════════════════════ -->
    <usage_notes>
        
        <note type="purpose">
            Этот промпт оптимизирован для диагностики и исправления проблем с
            акцентом на комплексное тестирование и документирование test coverage.
        </note>

        <note type="iterative_nature">
            Debugging - это итеративный процесс исследования:
            - Нормально возвращаться к Фазе 1 многократно
            - Гипотезы будут уточняться по мере получения информации
            - Не спеши с выводами - лучше потратить время на точную диагностику
            - Test failures могут требовать возврата к диагностике
        </note>

        <note type="thinking_intensity">
            Thinking должен использоваться ИНТЕНСИВНО:
            - Фаза 1: для анализа симптомов и формирования гипотез
            - Фаза 2: для root cause analysis и связывания фактов
            - Фаза 3: для проектирования безопасного fix'а
            - Фаза 4: для планирования тестов и анализа результатов
            - Фаза 5: для synthesis lessons learned
            
            Debugging и testing - это про размышление, не про действие.
        </note>

        <note type="root_cause_focus">
            Критично важно найти root cause, а не просто fix симптомы:
            - Симптом: "Скрипт падает" → Fix: try/catch
            - Root cause: "Некорректная конфигурация" → Fix: исправить config
            
            Используй 5 Whys method систематически.
        </note>

        <note type="minimal_fix">
            Surgical fix principle:
            - Измени ТОЛЬКО то что необходимо для решения проблемы
            - Не рефактори "заодно" - это усложняет тестирование
            - Не добавляй "улучшения" не связанные с проблемой
            - Рефакторинг - это отдельная задача после fix'а
        </note>

        <note type="comprehensive_testing">
            Комплексное тестирование НЕ опционально:
            - Разработай детальный test plan
            - Покрой все test levels: unit, integration, system
            - Включи functional и non-functional тесты
            - Обязательное регрессионное тестирование
            - Документируй test cases для повторного использования
            - Тестируй rollback procedure
            
            Fix без proper testing - это не завершенная работа.
        </note>

        <note type="test_documentation">
            Документирование тестов критично важно:
            - Test cases используются для regression testing в будущем
            - Помогают новым членам команды понять систему
            - Служат как living documentation поведения системы
            - Ускоряют диагностику future issues
            
            Документируй не только что тестируешь, но и почему.
        </note>

        <note type="rollback_readiness">
            Всегда будь готов откатить изменения:
            - Backup критичных configs/файлов
            - Документируй rollback procedure
            - Тестируй что rollback работает
            - В production лучше иметь и не использовать, чем нужно и не иметь
        </note>

        <note type="postmortem_value">
            Post-mortem документирование - это инвестиция в будущее:
            - Помогает избежать повторения проблемы
            - Ускоряет диагностику схожих issues
            - Обучает команду
            - Улучшает процессы
            - Документирует test coverage для reference
            
            Не пропускай эту фазу даже для "мелких" проблем.
        </note>

        <note type="web_search">
            Используй web_search когда:
            - Сталкиваешься с незнакомой error message
            - Нужна информация о специфичной технологии
            - Ищешь known issues в software/библиотеках
            - Требуется информация о best practices для fix'а
            - Ищешь testing approaches для специфичных scenarios
        </note>

        <note type="documentation_artifacts">
            Создавай artifacts с:
            - Fix code (bash, python, configs)
            - Test plan document
            - Test cases documentation
            - Test execution reports
            - Post-mortem документ
            - Обновленная troubleshooting guide
            - Prevention recommendations
            
            Избегай промежуточных analysis.xml файлов.
        </note>

        <note type="automation_opportunities">
            При тестировании ищи возможности для automation:
            - Повторяющиеся test cases
            - Regression test suite
            - Smoke tests
            - Performance monitoring
            
            Automated tests - это инвестиция в долгосрочное качество.
        </note>

    </usage_notes>

</request>