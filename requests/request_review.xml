<?xml version="1.0" encoding="UTF-8"?>
<request version="3.0">
    
    <!-- ═══════════════════════════════════════════════════════════════════ -->
    <!-- КОНФИГУРАЦИЯ ВЫПОЛНЕНИЯ CODE REVIEW -->
    <!-- ═══════════════════════════════════════════════════════════════════ -->
    <execution_config>
        <language>ru</language>
        <mode>comprehensive_analysis</mode>
        <!-- comprehensive_analysis: глубокий анализ всей кодовой базы
             с систематическим подходом -->
        
        <thinking>
            <enabled>true</enabled>
            <strategy>analytical</strategy>
            <!-- analytical: структурированный анализ с оценкой паттернов,
                 anti-patterns, архитектурных решений -->
            <max_length>16000</max_length>
        </thinking>
        
        <analysis_depth>deep</analysis_depth>
        <!-- deep: детальный анализ с проверкой всех аспектов качества -->
        
        <reporting>structured_detailed</reporting>
        <!-- Структурированные отчеты с приоритизацией проблем -->
    </execution_config>

    <!-- ═══════════════════════════════════════════════════════════════════ -->
    <!-- ВНЕШНИЕ ПАРАМЕТРЫ -->
    <!-- ═══════════════════════════════════════════════════════════════════ -->
    <external_inputs>
        
        <!-- Роль и экспертиза -->
        <role>
            <title>Senior Code Reviewer и Security Auditor</title>
            <expertise>
                - Code Quality Analysis
                - Security Audit (OWASP, CWE)
                - Architecture Review
                - Legacy Code Detection
                - Performance Analysis
                - Best Practices Compliance
                - Technical Debt Assessment
                - Docker/Container Security
                - Bash/Python Security
                - Network Security Review
            </expertise>
        </role>

        <!-- Контекст проекта -->
        <context>
            <description>
                Комплексный code review проекта VLESS с фокусом на:
                - Выявление legacy кода
                - Поиск потенциальных ошибок
                - Анализ безопасности
                - Оценка качества
                - Технический долг
            </description>
            <project_type>
                VPN/Proxy система с Docker контейнеризацией
            </project_type>
            <available_resources>
                <file path="PRD.md" 
                      type="architecture_reference" 
                      status="reference"
                      description="Архитектура системы для сравнения текущего состояния"/>
                <codebase>Полная кодовая база проекта</codebase>
                <configs>Все конфигурационные файлы</configs>
                <scripts>Скрипты установки и настройки</scripts>
                <docker>Docker compose и Dockerfile</docker>
            </available_resources>
            <work_area>
                <base_path>/home/ikeniborn/Documents/Project/vless/</base_path>
            </work_area>
        </context>

        <!-- Цели code review -->
        <objectives>
            <primary>
                Провести полный audit кодовой базы с выявлением:
                1. Legacy кода и технического долга
                2. Потенциальных ошибок и багов
                3. Уязвимостей безопасности
                4. Нарушений best practices
                5. Архитектурных проблем
                6. Performance bottlenecks
            </primary>
            
            <review_categories>
                <category name="security" priority="CRITICAL">
                    - Уязвимости OWASP Top 10
                    - Hardcoded secrets
                    - Injection vulnerabilities
                    - Improper access control
                    - Security misconfigurations
                    - Cryptographic issues
                    - Container security
                </category>
                
                <category name="code_quality" priority="HIGH">
                    - Code smells
                    - Dead code
                    - Duplicated code
                    - Complex functions
                    - Poor naming
                    - Missing error handling
                    - Lack of validation
                </category>
                
                <category name="legacy_code" priority="HIGH">
                    - Deprecated patterns
                    - Obsolete libraries
                    - Commented out code
                    - Temporary fixes (TODO, FIXME)
                    - Hardcoded values
                    - Magic numbers
                </category>
                
                <category name="architecture" priority="HIGH">
                    - Architectural violations
                    - Tight coupling
                    - Poor separation of concerns
                    - Missing abstractions
                    - Inconsistent patterns
                </category>
                
                <category name="performance" priority="MEDIUM">
                    - Inefficient algorithms
                    - Resource leaks
                    - Unnecessary operations
                    - Poor caching
                    - N+1 problems
                </category>
                
                <category name="maintainability" priority="MEDIUM">
                    - Missing documentation
                    - Poor test coverage
                    - Complex dependencies
                    - Lack of modularity
                    - Inconsistent style
                </category>
            </review_categories>
        </objectives>

        <!-- Стандарты и критерии -->
        <standards>
            <security_standards>
                <standard>OWASP Top 10</standard>
                <standard>CWE/SANS Top 25</standard>
                <standard>Docker Security Best Practices</standard>
                <standard>Container Hardening Guidelines</standard>
            </security_standards>
            
            <coding_standards>
                <bash>
                    - ShellCheck compliance
                    - Proper error handling
                    - Quote all variables
                    - Use [[ ]] instead of [ ]
                    - Avoid eval and source from untrusted input
                </bash>
                <python>
                    - PEP 8 compliance
                    - Type hints
                    - Proper exception handling
                    - No bare except
                    - Security linting (bandit)
                </python>
                <docker>
                    - Multi-stage builds
                    - Non-root user
                    - Minimal base images
                    - No secrets in layers
                    - Health checks
                </docker>
            </coding_standards>
        </standards>

    </external_inputs>

    <!-- ═══════════════════════════════════════════════════════════════════ -->
    <!-- ДИРЕКТИВЫ CODE REVIEW -->
    <!-- ═══════════════════════════════════════════════════════════════════ -->
    <directives>
        
        <directive id="COMP-01" priority="CRITICAL">
            <rule>Комплексный анализ всех аспектов кодовой базы</rule>
            <scope>Не ограничиваться поверхностным обзором - deep dive в каждый компонент</scope>
        </directive>

        <directive id="SEC-01" priority="CRITICAL">
            <rule>Безопасность - приоритет номер один</rule>
            <focus>
                - Все потенциальные векторы атак
                - Hardcoded credentials
                - Injection points
                - Improper authentication/authorization
                - Data exposure
            </focus>
        </directive>

        <directive id="LEG-01" priority="HIGH">
            <rule>Идентификация legacy кода и технического долга</rule>
            <indicators>
                - TODO/FIXME комментарии
                - Закомментированный код
                - Временные workarounds
                - Deprecated функции
                - Устаревшие паттерны
                - Дублированный код
            </indicators>
        </directive>

        <directive id="ERR-01" priority="HIGH">
            <rule>Поиск потенциальных ошибок, не только явных багов</rule>
            <types>
                - Race conditions
                - Resource leaks
                - Null/undefined handling
                - Edge cases
                - Error propagation
                - Exception handling gaps
            </types>
        </directive>

        <directive id="ARCH-01" priority="HIGH">
            <rule>Архитектурный анализ и соответствие PRD</rule>
            <verification>
                - Соответствие задокументированной архитектуре
                - Нарушения принципов (SOLID, DRY, KISS)
                - Coupling и cohesion
                - Separation of concerns
            </verification>
        </directive>

        <directive id="PRIO-01" priority="CRITICAL">
            <rule>Приоритизация найденных проблем</rule>
            <levels>
                - CRITICAL: требует немедленного исправления
                - HIGH: важно исправить в ближайшее время
                - MEDIUM: желательно исправить
                - LOW: можно отложить
                - INFO: информационные замечания
            </levels>
        </directive>

        <directive id="CONT-01" priority="HIGH">
            <rule>Контекстуализация проблем</rule>
            <approach>
                - Объяснить почему это проблема
                - Показать потенциальные последствия
                - Предложить решение
                - Указать affected components
            </approach>
        </directive>

        <directive id="PATT-01" priority="MEDIUM">
            <rule>Выявление паттернов в проблемах</rule>
            <goal>
                Найти системные проблемы, а не только точечные issues.
                Паттерны указывают на более глубокие архитектурные проблемы.
            </goal>
        </directive>

    </directives>

    <!-- ═══════════════════════════════════════════════════════════════════ -->
    <!-- ПРОЦЕСС CODE REVIEW -->
    <!-- ═══════════════════════════════════════════════════════════════════ -->
    <workflow>

        <!-- ───────────────────────────────────────────────────────────── -->
        <!-- ФАЗА 1: ПРЕДВАРИТЕЛЬНЫЙ АНАЛИЗ -->
        <!-- ───────────────────────────────────────────────────────────── -->
        <phase order="1" id="preliminary_analysis" mandatory="true">
            
            <objective>
                Понимание структуры проекта и подготовка к детальному анализу
            </objective>

            <actions>
                <action priority="critical">
                    Изучить структуру проекта:
                    - Архитектуру (из PRD.md)
                    - Структуру директорий
                    - Зависимости между компонентами
                    - Entry points
                    - Конфигурационные файлы
                </action>
                <action priority="critical">
                    Составить инвентаризацию:
                    - Все скрипты и их назначение
                    - Docker конфигурации
                    - Конфигурационные файлы
                    - Вспомогательные утилиты
                </action>
                <action priority="high">
                    Определить технологический стек:
                    - Версии используемых технологий
                    - Внешние зависимости
                    - Критичные компоненты
                </action>
                <action priority="high">
                    Понять flow выполнения:
                    - Как происходит установка
                    - Как работает runtime
                    - Взаимодействие компонентов
                </action>
            </actions>

            <thinking_prompt>
                Используй thinking для:
                - Понимания архитектуры проекта
                - Выявления ключевых компонентов
                - Определения областей риска
                - Планирования порядка анализа
                
                Проанализируй:
                - Какова общая структура проекта?
                - Какие компоненты критичны?
                - Где наиболее вероятны проблемы?
                - С чего начать детальный анализ?
            </thinking_prompt>

            <deliverables>
                <item type="project_structure">
                    Схема структуры проекта
                </item>
                <item type="component_inventory">
                    Инвентаризация компонентов
                </item>
                <item type="review_plan">
                    План проведения детального review
                </item>
            </deliverables>

            <checkpoint>
                ✓ Структура проекта понята
                ✓ Ключевые компоненты идентифицированы
                ✓ Plan review составлен
                ✓ Готовность к детальному анализу
            </checkpoint>

        </phase>

        <!-- ───────────────────────────────────────────────────────────── -->
        <!-- ФАЗА 2: АНАЛИЗ БЕЗОПАСНОСТИ -->
        <!-- ───────────────────────────────────────────────────────────── -->
        <phase order="2" id="security_audit" mandatory="true">
            
            <objective>
                Выявление всех потенциальных уязвимостей и проблем безопасности
            </objective>

            <security_checklist>
                <check category="authentication">
                    - Proper authentication mechanisms
                    - Password/key management
                    - Session handling
                    - Token validation
                </check>
                
                <check category="authorization">
                    - Access control checks
                    - Privilege escalation risks
                    - Resource access validation
                </check>
                
                <check category="data_protection">
                    - Sensitive data exposure
                    - Encryption usage
                    - Secure communication (TLS)
                    - Data validation and sanitization
                </check>
                
                <check category="injection">
                    - Command injection
                    - SQL injection (if applicable)
                    - Path traversal
                    - Code injection
                </check>
                
                <check category="configuration">
                    - Hardcoded secrets
                    - Default credentials
                    - Exposed debug info
                    - Insecure defaults
                    - Missing security headers
                </check>
                
                <check category="container_security">
                    - Running as root
                    - Privileged containers
                    - Exposed ports
                    - Volume permissions
                    - Image vulnerabilities
                </check>
                
                <check category="logging">
                    - Sensitive data in logs
                    - Insufficient logging
                    - Log injection
                </check>
                
                <check category="dependencies">
                    - Outdated libraries
                    - Known vulnerabilities (CVE)
                    - Untrusted sources
                </check>
            </security_checklist>

            <thinking_prompt>
                Intensive thinking для:
                - Threat modeling компонентов
                - Анализа attack surface
                - Оценки impact уязвимостей
                - Определения exploitability
                
                Вопросы:
                - Какие данные наиболее чувствительны?
                - Где boundaries доверия?
                - Какие векторы атак возможны?
                - Как можно злоупотребить функционалом?
            </thinking_prompt>

            <deliverables>
                <item type="security_report" priority="critical">
                    Полный отчет по безопасности с приоритизацией
                </item>
                <item type="vulnerability_matrix">
                    Матрица уязвимостей: тип, severity, impact, remediation
                </item>
                <item type="quick_wins">
                    Список quick wins для немедленного исправления
                </item>
            </deliverables>

            <checkpoint>
                ✓ Security audit завершен
                ✓ Все уязвимости документированы
                ✓ Severity levels присвоены
                ✓ Remediation plan подготовлен
            </checkpoint>

        </phase>

        <!-- ───────────────────────────────────────────────────────────── -->
        <!-- ФАЗА 3: АНАЛИЗ КАЧЕСТВА КОДА -->
        <!-- ───────────────────────────────────────────────────────────── -->
        <phase order="3" id="code_quality_analysis" mandatory="true">
            
            <objective>
                Оценка качества кода и выявление code smells
            </objective>

            <quality_dimensions>
                <dimension name="readability">
                    - Naming conventions
                    - Code organization
                    - Comments quality
                    - Function/method length
                    - Complexity
                </dimension>
                
                <dimension name="maintainability">
                    - Modularity
                    - Coupling
                    - Cohesion
                    - DRY principle
                    - SOLID principles
                </dimension>
                
                <dimension name="reliability">
                    - Error handling
                    - Input validation
                    - Edge cases handling
                    - Defensive programming
                </dimension>
                
                <dimension name="testability">
                    - Test coverage
                    - Testable design
                    - Mock-ability
                    - Test quality
                </dimension>
            </quality_dimensions>

            <code_smells>
                <smell type="bloaters">
                    - Long functions/scripts
                    - Large classes/modules
                    - Long parameter lists
                    - Data clumps
                </smell>
                
                <smell type="oo_abusers">
                    - Alternative classes with different interfaces
                    - Refused bequest
                    - Temporary fields
                </smell>
                
                <smell type="change_preventers">
                    - Divergent change
                    - Shotgun surgery
                    - Parallel inheritance hierarchies
                </smell>
                
                <smell type="dispensables">
                    - Comments (excessive)
                    - Duplicate code
                    - Dead code
                    - Speculative generality
                </smell>
                
                <smell type="couplers">
                    - Feature envy
                    - Inappropriate intimacy
                    - Message chains
                    - Middle man
                </smell>
            </code_smells>

            <deliverables>
                <item type="quality_report">
                    Отчет по качеству с metrics
                </item>
                <item type="refactoring_opportunities">
                    Список возможностей рефакторинга
                </item>
                <item type="best_practices_violations">
                    Нарушения best practices
                </item>
            </deliverables>

            <checkpoint>
                ✓ Code quality проанализировано
                ✓ Code smells выявлены
                ✓ Refactoring opportunities определены
            </checkpoint>

        </phase>

        <!-- ───────────────────────────────────────────────────────────── -->
        <!-- ФАЗА 4: ВЫЯВЛЕНИЕ LEGACY КОДА -->
        <!-- ───────────────────────────────────────────────────────────── -->
        <phase order="4" id="legacy_detection" mandatory="true">
            
            <objective>
                Идентификация legacy кода и технического долга
            </objective>

            <legacy_indicators>
                <indicator type="code_markers">
                    - TODO комментарии
                    - FIXME комментарии
                    - XXX, HACK, WORKAROUND
                    - Commented out code
                    - Debug print statements
                </indicator>
                
                <indicator type="patterns">
                    - Deprecated functions/APIs
                    - Obsolete patterns
                    - Copy-paste code
                    - Magic numbers
                    - Hardcoded values
                </indicator>
                
                <indicator type="dependencies">
                    - Outdated libraries
                    - Abandoned packages
                    - Version conflicts
                </indicator>
                
                <indicator type="documentation">
                    - Outdated comments
                    - Missing documentation
                    - Inconsistent docs
                </indicator>
            </legacy_indicators>

            <technical_debt_assessment>
                <category name="code_debt">
                    - Quick fixes требующие переписывания
                    - Temporary workarounds
                    - Duplicated logic
                </category>
                
                <category name="design_debt">
                    - Architectural shortcuts
                    - Violated patterns
                    - Missing abstractions
                </category>
                
                <category name="documentation_debt">
                    - Undocumented features
                    - Outdated docs
                    - Missing specifications
                </category>
                
                <category name="testing_debt">
                    - Missing tests
                    - Poor test coverage
                    - Outdated tests
                </category>
            </technical_debt_assessment>

            <deliverables>
                <item type="legacy_inventory">
                    Полный список legacy кода
                </item>
                <item type="technical_debt_register">
                    Реестр технического долга
                </item>
                <item type="modernization_roadmap">
                    План модернизации
                </item>
            </deliverables>

            <checkpoint>
                ✓ Legacy код идентифицирован
                ✓ Технический долг оценен
                ✓ План модернизации подготовлен
            </checkpoint>

        </phase>

        <!-- ───────────────────────────────────────────────────────────── -->
        <!-- ФАЗА 5: АРХИТЕКТУРНЫЙ АНАЛИЗ -->
        <!-- ───────────────────────────────────────────────────────────── -->
        <phase order="5" id="architecture_review" mandatory="true">
            
            <objective>
                Оценка архитектуры и соответствия PRD
            </objective>

            <architecture_aspects>
                <aspect name="design_principles">
                    - SOLID compliance
                    - DRY violations
                    - KISS principle
                    - YAGNI violations
                </aspect>
                
                <aspect name="structure">
                    - Component organization
                    - Layer separation
                    - Module boundaries
                    - Dependencies direction
                </aspect>
                
                <aspect name="patterns">
                    - Design patterns usage
                    - Anti-patterns presence
                    - Consistency
                </aspect>
                
                <aspect name="scalability">
                    - Growth potential
                    - Performance bottlenecks
                    - Resource management
                </aspect>
            </architecture_aspects>

            <prd_compliance>
                <check>Соответствие документированной архитектуре</check>
                <check>Отклонения от спецификации</check>
                <check>Undocumented features</check>
                <check>Missing features</check>
            </prd_compliance>

            <deliverables>
                <item type="architecture_assessment">
                    Оценка архитектуры
                </item>
                <item type="prd_compliance_report">
                    Отчет о соответствии PRD
                </item>
                <item type="improvement_suggestions">
                    Предложения по улучшению
                </item>
            </deliverables>

            <checkpoint>
                ✓ Архитектура проанализирована
                ✓ Соответствие PRD проверено
                ✓ Рекомендации подготовлены
            </checkpoint>

        </phase>

        <!-- ───────────────────────────────────────────────────────────── -->
        <!-- ФАЗА 6: АНАЛИЗ ПРОИЗВОДИТЕЛЬНОСТИ -->
        <!-- ───────────────────────────────────────────────────────────── -->
        <phase order="6" id="performance_analysis" mandatory="true">
            
            <objective>
                Выявление проблем производительности
            </objective>

            <performance_checks>
                <check category="algorithms">
                    - Inefficient algorithms
                    - Unnecessary complexity
                    - Suboptimal data structures
                </check>
                
                <check category="resources">
                    - Memory leaks
                    - File descriptor leaks
                    - Connection leaks
                    - Unnecessary resource usage
                </check>
                
                <check category="io">
                    - Blocking I/O
                    - Unnecessary disk access
                    - Network inefficiencies
                </check>
                
                <check category="concurrency">
                    - Race conditions
                    - Deadlocks potential
                    - Poor parallelization
                </check>
            </performance_checks>

            <deliverables>
                <item type="performance_report">
                    Отчет по производительности
                </item>
                <item type="bottleneck_list">
                    Список bottlenecks
                </item>
                <item type="optimization_suggestions">
                    Предложения по оптимизации
                </item>
            </deliverables>

            <checkpoint>
                ✓ Performance проанализирована
                ✓ Bottlenecks выявлены
                ✓ Оптимизации предложены
            </checkpoint>

        </phase>

        <!-- ───────────────────────────────────────────────────────────── -->
        <!-- ФАЗА 7: КОНСОЛИДАЦИЯ И ОТЧЕТНОСТЬ -->
        <!-- ───────────────────────────────────────────────────────────── -->
        <phase order="7" id="reporting" mandatory="true">
            
            <objective>
                Создание комплексного отчета с приоритизацией
            </objective>

            <report_structure>
                <section order="1" name="executive_summary">
                    - Краткий обзор findings
                    - Критические проблемы
                    - Общая оценка качества
                    - Top recommendations
                </section>
                
                <section order="2" name="security_findings">
                    - Все уязвимости по severity
                    - CVSS scores если применимо
                    - Remediation steps
                    - Timeline recommendations
                </section>
                
                <section order="3" name="code_quality_issues">
                    - Code smells
                    - Best practices violations
                    - Refactoring opportunities
                    - Maintainability concerns
                </section>
                
                <section order="4" name="legacy_code_report">
                    - Identified legacy code
                    - Technical debt inventory
                    - Modernization priorities
                    - Effort estimates
                </section>
                
                <section order="5" name="architecture_assessment">
                    - Architecture evaluation
                    - PRD compliance
                    - Design issues
                    - Improvement proposals
                </section>
                
                <section order="6" name="performance_analysis">
                    - Performance issues
                    - Bottlenecks
                    - Optimization opportunities
                </section>
                
                <section order="7" name="action_plan">
                    - Prioritized action items
                    - Quick wins
                    - Medium-term improvements
                    - Long-term refactoring
                    - Estimated efforts
                </section>
                
                <section order="8" name="metrics">
                    - Code quality metrics
                    - Technical debt ratio
                    - Security score
                    - Maintainability index
                </section>
            </report_structure>

            <prioritization_matrix>
                <priority level="CRITICAL">
                    - Security vulnerabilities (High/Critical)
                    - Data loss risks
                    - System stability issues
                    Timeline: Immediate (0-1 week)
                </priority>
                
                <priority level="HIGH">
                    - Medium security issues
                    - Major code quality problems
                    - Significant technical debt
                    - Architecture violations
                    Timeline: Short-term (1-4 weeks)
                </priority>
                
                <priority level="MEDIUM">
                    - Code smells
                    - Performance optimizations
                    - Refactoring opportunities
                    - Documentation gaps
                    Timeline: Medium-term (1-3 months)
                </priority>
                
                <priority level="LOW">
                    - Minor improvements
                    - Style inconsistencies
                    - Nice-to-have features
                    Timeline: Long-term (3+ months)
                </priority>
            </prioritization_matrix>

            <deliverables>
                <item type="comprehensive_report" format="markdown">
                    Полный отчет code review
                </item>
                <item type="executive_dashboard">
                    Краткая панель для руководства
                </item>
                <item type="action_items">
                    Список action items с приоритетами
                </item>
                <item type="tracking_sheet">
                    Sheet для отслеживания прогресса
                </item>
            </deliverables>

            <checkpoint>
                ✓ Все findings консолидированы
                ✓ Отчеты сформированы
                ✓ Приоритеты присвоены
                ✓ Action plan готов
                ✓ Code review завершен
            </checkpoint>

        </phase>

    </workflow>

    <!-- ═══════════════════════════════════════════════════════════════════ -->
    <!-- ПРАВИЛА АНАЛИЗА -->
    <!-- ═══════════════════════════════════════════════════════════════════ -->
    <analysis_rules>

        <rule id="AR01" enforcement="CRITICAL">
            <description>Thoroughness over speed</description>
            <principle>
                Лучше потратить больше времени на полный анализ, 
                чем пропустить критичную проблему
            </principle>
        </rule>

        <rule id="AR02" enforcement="CRITICAL">
            <description>Context-aware analysis</description>
            <principle>
                Всегда учитывай контекст и назначение кода.
                То что выглядит как проблема, может быть осознанным решением.
            </principle>
        </rule>

        <rule id="AR03" enforcement="STRICT">
            <description>Evidence-based findings</description>
            <principle>
                Каждый finding должен быть подкреплен evidence.
                Не предполагай - проверяй.
            </principle>
        </rule>

        <rule id="AR04" enforcement="REQUIRED">
            <description>Actionable recommendations</description>
            <principle>
                Каждая проблема должна иметь четкое, actionable решение.
                Не просто "fix this" - объясни как.
            </principle>
        </rule>

        <rule id="AR05" enforcement="REQUIRED">
            <description>Proper prioritization</description>
            <principle>
                Используй consistent criteria для приоритизации.
                CRITICAL действительно означает критично.
            </principle>
        </rule>

        <rule id="AR06" enforcement="RECOMMENDED">
            <description>Pattern recognition</description>
            <principle>
                Ищи паттерны в проблемах - они указывают на 
                системные issues требующие архитектурных решений.
            </principle>
        </rule>

    </analysis_rules>

    <!-- ═══════════════════════════════════════════════════════════════════ -->
    <!-- ФОРМАТЫ ОТЧЕТОВ -->
    <!-- ═══════════════════════════════════════════════════════════════════ -->
    <report_formats>

        <format name="finding_entry">
            <structure>
                ## [SEVERITY] Finding Title
                
                **Location:** `path/to/file:line_number`
                
                **Category:** Security / Code Quality / Legacy / Architecture / Performance
                
                **Description:**
                Детальное описание проблемы
                
                **Impact:**
                Какие последствия может иметь эта проблема
                
                **Evidence:**
                ```language
                // Проблемный код
                ```
                
                **Recommendation:**
                Как это исправить
                
                **Example Fix:**
                ```language
                // Исправленный код
                ```
                
                **Priority:** CRITICAL / HIGH / MEDIUM / LOW
                
                **Effort:** S / M / L / XL
            </structure>
        </format>

        <format name="metrics_dashboard">
            <structure>
                # Code Review Metrics
                
                ## Overall Scores
                - Security Score: X/10
                - Code Quality Score: X/10
                - Maintainability Index: X/100
                - Technical Debt Ratio: X%
                
                ## Findings Summary
                - Critical: X
                - High: X
                - Medium: X
                - Low: X
                - Total: X
                
                ## Categories Breakdown
                - Security: X findings
                - Code Quality: X findings
                - Legacy Code: X findings
                - Architecture: X findings
                - Performance: X findings
            </structure>
        </format>

    </report_formats>

    <!-- ═══════════════════════════════════════════════════════════════════ -->
    <!-- ПРИМЕЧАНИЯ ПО ИСПОЛЬЗОВАНИЮ -->
    <!-- ═══════════════════════════════════════════════════════════════════ -->
    <usage_notes>
        
        <note type="scope">
            Этот промпт для комплексного code review всей кодовой базы.
            Фокус на превентивном анализе, не на исправлении конкретных багов.
        </note>

        <note type="thoroughness">
            Code review должен быть thorough и systematic.
            Лучше потратить больше времени, чем пропустить критичные проблемы.
        </note>

        <note type="security_focus">
            Безопасность - высший приоритет.
            Даже minor уязвимости должны быть документированы.
        </note>

        <note type="context_importance">
            Всегда учитывай контекст проекта.
            То что работает в одном проекте, может быть anti-pattern в другом.
        </note>

        <note type="actionability">
            Каждый finding должен быть actionable.
            Предоставляй конкретные решения, не только описания проблем.
        </note>

        <note type="prioritization">
            Proper приоритизация критична для actionable отчета.
            Команда должна понимать что исправлять первым.
        </note>

        <note type="artifacts">
            Создавай artifacts для:
            - Comprehensive report (markdown)
            - Action items tracking
            - Security findings
            - Refactoring suggestions
            
            Используй structured markdown для читабельности.
        </note>

    </usage_notes>

</request>