<?xml version="1.0" encoding="UTF-8"?>
<analysis>
    <project>
        <name>VLESS+Reality VPN Service</name>
        <type>Minimalistic Quick Start</type>
        <platform>Linux (Debian/Ubuntu)</platform>
        <architecture>x86_64, ARM64</architecture>
        <users>up to 10</users>
        <interface>CLI only</interface>
    </project>

    <stage number="1" name="Basic Infrastructure">
        <description>Implementation of base infrastructure for VLESS+Reality VPN service</description>

        <requirements>
            <requirement id="R1">
                <description>Create main management script vless-manager.sh</description>
                <priority>high</priority>
                <details>
                    <item>Bash script with shebang (#!/bin/bash)</item>
                    <item>Command-line argument parsing</item>
                    <item>Main menu/dispatcher for various operations</item>
                    <item>Color-coded output (green for success, red for errors, yellow for warnings)</item>
                    <item>Proper exit codes and error handling</item>
                </details>
            </requirement>

            <requirement id="R2">
                <description>System requirements verification</description>
                <priority>high</priority>
                <details>
                    <item>OS check: Ubuntu 20.04+ or Debian 11+</item>
                    <item>Architecture check: x86_64 or ARM64</item>
                    <item>RAM check: minimum 512 MB</item>
                    <item>Disk space check: minimum 1 GB free</item>
                    <item>Network port check: 443 availability</item>
                    <item>Permission check: root or sudo access</item>
                </details>
            </requirement>

            <requirement id="R3">
                <description>Docker installation function</description>
                <priority>high</priority>
                <details>
                    <item>Check if Docker is already installed</item>
                    <item>Add Docker GPG key</item>
                    <item>Configure Docker APT repository</item>
                    <item>Install docker-ce, docker-ce-cli, containerd.io</item>
                    <item>Enable and start Docker service</item>
                    <item>Verify installation with docker run hello-world</item>
                </details>
            </requirement>

            <requirement id="R4">
                <description>Docker Compose installation function</description>
                <priority>high</priority>
                <details>
                    <item>Check if Docker Compose is already installed</item>
                    <item>Install docker-compose-plugin via APT</item>
                    <item>Verify installation with docker compose version</item>
                </details>
            </requirement>

            <requirement id="R5">
                <description>Directory structure creation</description>
                <priority>high</priority>
                <details>
                    <item>Create config/ directory for server.json</item>
                    <item>Create config/users/ directory for client configurations</item>
                    <item>Create data/ directory for user database</item>
                    <item>Create data/keys/ directory for key storage</item>
                    <item>Create logs/ directory for xray.log</item>
                    <item>Set proper permissions (600 for keys, 700 for directories)</item>
                </details>
            </requirement>

            <requirement id="R6">
                <description>Environment configuration</description>
                <priority>medium</priority>
                <details>
                    <item>Create .env file for environment variables</item>
                    <item>Define PROJECT_PATH variable</item>
                    <item>Define SERVER_IP variable</item>
                    <item>Define XRAY_PORT variable (default 443)</item>
                    <item>Define LOG_LEVEL variable (default warning)</item>
                </details>
            </requirement>
        </requirements>

        <technologies>
            <technology>
                <name>Bash</name>
                <version>5.0+</version>
                <usage>Main scripting language for management script</usage>
            </technology>
            <technology>
                <name>Docker</name>
                <version>latest stable</version>
                <usage>Container runtime for Xray service</usage>
            </technology>
            <technology>
                <name>Docker Compose</name>
                <version>2.0+</version>
                <usage>Container orchestration and configuration</usage>
            </technology>
            <technology>
                <name>Xray-core</name>
                <version>latest</version>
                <usage>VLESS+Reality protocol implementation</usage>
                <docker_image>teddysun/xray:latest</docker_image>
            </technology>
        </technologies>

        <implementation_approach>
            <principle>Modular and reusable functions</principle>
            <principle>Idempotent operations (can run multiple times safely)</principle>
            <principle>Clear error messages and recovery suggestions</principle>
            <principle>Logging for troubleshooting</principle>
            <principle>Security best practices (proper permissions, no hardcoded secrets)</principle>
        </implementation_approach>

        <functions_to_implement>
            <function>
                <name>check_root</name>
                <description>Verify root or sudo privileges</description>
            </function>
            <function>
                <name>check_os</name>
                <description>Verify OS compatibility (Ubuntu/Debian)</description>
            </function>
            <function>
                <name>check_architecture</name>
                <description>Verify system architecture (x86_64/ARM64)</description>
            </function>
            <function>
                <name>check_resources</name>
                <description>Verify RAM and disk space availability</description>
            </function>
            <function>
                <name>check_port</name>
                <description>Verify port 443 availability</description>
            </function>
            <function>
                <name>install_docker</name>
                <description>Install Docker if not present</description>
            </function>
            <function>
                <name>install_docker_compose</name>
                <description>Install Docker Compose plugin</description>
            </function>
            <function>
                <name>create_directories</name>
                <description>Create project directory structure</description>
            </function>
            <function>
                <name>create_env_file</name>
                <description>Generate .env configuration file</description>
            </function>
            <function>
                <name>show_help</name>
                <description>Display usage information</description>
            </function>
            <function>
                <name>log_message</name>
                <description>Unified logging function</description>
            </function>
            <function>
                <name>color_echo</name>
                <description>Colored output function</description>
            </function>
        </functions_to_implement>

        <commands_to_support>
            <command>
                <name>install</name>
                <description>Run full installation process</description>
                <actions>
                    <action>Check system requirements</action>
                    <action>Install Docker and Docker Compose</action>
                    <action>Create directory structure</action>
                    <action>Generate environment configuration</action>
                </actions>
            </command>
        </commands_to_support>

        <testing_requirements>
            <test>Verify script runs with proper permissions</test>
            <test>Test on Ubuntu 20.04, 22.04, 24.04</test>
            <test>Test on Debian 11, 12</test>
            <test>Test on both x86_64 and ARM64 architectures</test>
            <test>Test Docker installation on clean system</test>
            <test>Test idempotency (run install multiple times)</test>
            <test>Test error handling for insufficient resources</test>
            <test>Test port conflict detection</test>
        </testing_requirements>

        <security_considerations>
            <consideration>All sensitive files must have 600 permissions</consideration>
            <consideration>Directories containing sensitive data must have 700 permissions</consideration>
            <consideration>No hardcoded credentials or keys in scripts</consideration>
            <consideration>Validate all user inputs</consideration>
            <consideration>Use secure methods for Docker installation (official GPG keys)</consideration>
        </security_considerations>

        <deliverables>
            <deliverable>
                <file>vless-manager.sh</file>
                <description>Main management script with install command</description>
            </deliverable>
            <deliverable>
                <file>.env.example</file>
                <description>Example environment configuration</description>
            </deliverable>
            <deliverable>
                <structure>Directory structure created and ready</structure>
                <description>config/, data/, logs/ directories with proper permissions</description>
            </deliverable>
            <deliverable>
                <service>Docker and Docker Compose installed and running</service>
                <description>Container runtime ready for Xray deployment</description>
            </deliverable>
        </deliverables>
    </stage>
</analysis>