<?xml version="1.0" encoding="UTF-8"?>
<request_execute version="2.1" optimized="true">

    <!-- ═══════════════════════════════════════════════════════ -->
    <!-- META -->
    <!-- ═══════════════════════════════════════════════════════ -->
    <meta>
        <version>2.1</version>
    </meta>

    <!-- ═══════════════════════════════════════════════════════ -->
    <!-- CORE CONFIG -->
    <!-- ═══════════════════════════════════════════════════════ -->
    <config>
        <mode>streamlined_sequential</mode>
        <thinking enabled="true" mode="interleaved"/>
        <validation strategy="targeted" focus="critical_only"/>
        <git mode="optional" auto_commit="false"/>
    </config>

    <!-- ═══════════════════════════════════════════════════════ -->
    <!-- SPECIFIC PRINCIPLES (дополняют CLAUDE.md) -->
    <!-- ═══════════════════════════════════════════════════════ -->
    <principles>
        <principle id="PS1" level="CRITICAL">
            PRD Compliance - все решения ДОЛЖНЫ соответствовать PRD
        </principle>
        <principle id="PS2" level="HIGH">
            Acceptance Criteria Fulfillment - все критерии ДОЛЖНЫ быть выполнены
        </principle>
    </principles>

    <!-- ═══════════════════════════════════════════════════════ -->
    <!-- CONTEXT -->
    <!-- ═══════════════════════════════════════════════════════ -->
    <context>
        <role>
            Full-Stack разработчик, специализирующийся на быстром выполнении точечных задач
            с фокусом на Bash, Python, Docker, безопасность, тестирование.
        </role>

        <prd_document required="true">
            PRD - ОБЯЗАТЕЛЬНЫЙ Product Requirements Document
        </prd_document>

        <project_context>
ikeniborn@11154:~/vless$ sudo ./install.sh
╔══════════════════════════════════════════════════════════════╗
║                                                              ║
║          VLESS + Reality VPN Server Installation            ║
║                                                              ║
║  Production-grade CLI-based Reality protocol deployment     ║
║  Version: 3.0                                               ║
║                                                              ║
╚══════════════════════════════════════════════════════════════╝


[1/10] Checking root privileges...
✓ Running with root privileges

Loading installation modules...
✓ All library modules loaded successfully

[2/10] Detecting operating system...
✓ Operating system detected

[3/10] Validating OS compatibility...
✓ Operating system is compatible

[4/10] Checking dependencies...
Checking dependencies...

  ✓ docker.io - installed (version: 28.4.0)
  ✓ docker-compose - installed (version: 2.39.4)
  ✓ ufw - installed
  ✓ jq - installed (version: 1.7)
  ✓ qrencode - installed
  ✓ curl - installed
  ✓ openssl - installed

✓ All dependencies are installed and meet version requirements
✓ Dependency check complete

[5/10] Installing missing dependencies...
Installing missing dependencies...

Updating package lists...
✓ Package lists updated

[1/7] ✓ docker.io - already installed
[2/7] ✓ docker-compose - already installed
[3/7] ✓ ufw - already installed
[4/7] ✓ jq - already installed
[5/7] ✓ qrencode - already installed
[6/7] ✓ curl - already installed
[7/7] ✓ openssl - already installed

Installation Summary:
  Total packages: 7
  Successfully installed: 7
  Failed: 0

✓ All dependencies installed successfully
✓ Dependencies installed

[6/10] Detecting previous installations...
╔════════════════════════════════════════════════════════════════╗
║      DETECTING EXISTING VLESS INSTALLATIONS (7 LEVELS)       ║
╚════════════════════════════════════════════════════════════════╝

[Level 1/7] Checking Docker containers...
  ⚠ Found 2 container(s):
    - vless_nginx (running)
    - vless_xray (running)

[Level 2/7] Checking Docker networks...
  ⚠ Found 1 network(s):
    - vless_reality_net (172.20.0.0/16)

[Level 3/7] Checking Docker volumes...
  ✓ No VLESS volumes found

[Level 4/7] Checking /opt/vless directory...
  ⚠ Directory exists:
    Path: /opt/vless
    Size: 476K
    Files: 47
    Contains: users.json (USER DATA)
    Contains: xray_config.json
    Contains: docker-compose.yml

[Level 5/7] Checking UFW rules...
  ⚠ Found 2 UFW rule(s):
    [ 2] 443/tcp                    ALLOW IN    Anywhere                   # VLESS Reality VPN
    [ 7] 8443/tcp                   ALLOW IN    Anywhere                   # VLESS Reality VPN

[Level 6/7] Checking systemd services...
  ⚠ Found 1 service(s):
    - docker-vless-firewall.service (enabled)

[Level 7/7] Checking symlinks in /usr/local/bin...
  ⚠ Found 1 symlink(s):
    - /usr/local/bin/vless-update -> /opt/vless/scripts/update.sh

╔════════════════════════════════════════════════════════════════╗
║               DETECTION SUMMARY                               ║
╚════════════════════════════════════════════════════════════════╝

⚠ Old installation detected: 8 finding(s)

  Containers: 2
  Networks:   1
  Volumes:    0
  Directory:  YES
  UFW Rules:  2
  Services:   1
  Symlinks:   1

╔════════════════════════════════════════════════════════════════╗
║           OLD INSTALLATION DETECTED - ACTION REQUIRED         ║
╚════════════════════════════════════════════════════════════════╝

The following components from a previous VLESS installation were detected:

Docker Containers (2):
  - vless_nginx
  - vless_xray

Docker Networks (1):
  - vless_reality_net

Installation Directory:
  - /opt/vless
    WARNING: Contains user data (users.json)

UFW Rules (2):
  [ 2] 443/tcp                    ALLOW IN    Anywhere                   # VLESS Reality VPN
  [ 7] 8443/tcp                   ALLOW IN    Anywhere                   # VLESS Reality VPN

Systemd Services (1):
  - docker-vless-firewall.service

Symlinks (1):
  - /usr/local/bin/vless-update

╔════════════════════════════════════════════════════════════════╗
║                  RECOMMENDED ACTION                           ║
╚════════════════════════════════════════════════════════════════╝

Option 1 (RECOMMENDED): Backup and cleanup
  - Creates timestamped backup of all data
  - Backs up UFW rules separately
  - Safely removes old installation
  - Allows restoration if needed

Option 2 (RISKY): Cleanup without backup
  - Immediately removes all components
  - No recovery possible
  - Use only if data is not important

Option 3 (SAFE): Skip cleanup and exit
  - Aborts installation
  - Allows manual cleanup
  - Recommended if unsure


Would you like to:
  1) Backup and cleanup old installation (recommended)
  2) Cleanup without backup (risky)
  3) Skip cleanup and exit

Enter your choice [1-3]: 2
Cleaning up without backup...
╔════════════════════════════════════════════════════════════════╗
║           CLEANING UP OLD INSTALLATION                       ║
╚════════════════════════════════════════════════════════════════╝

⚠ WARNING: This will DELETE the following components:

  - 2 Docker container(s)
  - 1 Docker network(s)
  - Installation directory: /opt/vless
  - 2 UFW rule(s)
  - 1 systemd service(s)
  - 1 symlink(s)

⚠ This action is IRREVERSIBLE (unless you created a backup)

Type 'yes' to confirm cleanup (or 'no' to cancel): yes

[1/7] Removing Docker containers...
  Stopping vless_nginx... ✓
  Removing vless_nginx... ✓
  Stopping vless_xray... ✓
  Removing vless_xray... ✓

[2/7] Removing Docker networks...
  Removing vless_reality_net... ✓

[4/7] Removing installation directory...
  Removing /opt/vless... ✓

[5/7] Cleaning UFW rules...
  ⚠ Manual UFW rule removal recommended
  Found 2 rule(s) that may need cleanup
  Review with: ufw status numbered
  Remove with: ufw delete <rule_number>

[6/7] Removing systemd services...
  Stopping docker-vless-firewall.service... ✓
  Disabling docker-vless-firewall.service... ✓
  Removing /etc/systemd/system/docker-vless-firewall.service... ✓
  Reloading systemd daemon... ✓

[7/7] Removing symlinks...
  Removing /usr/local/bin/vless-update... ✓

╔════════════════════════════════════════════════════════════════╗
║               CLEANUP SUMMARY                                 ║
╚════════════════════════════════════════════════════════════════╝

✓ All cleanup tasks completed successfully

✓ Old installation check complete

[7/10] Collecting installation parameters...

╔══════════════════════════════════════════════════════════════╗
║         INTERACTIVE PARAMETER COLLECTION                    ║
╚══════════════════════════════════════════════════════════════╝

This wizard will guide you through configuration.
Press Ctrl+C at any time to cancel.

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[1/3] Select Destination Site for Reality Masquerading
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

Reality protocol 'borrows' the TLS handshake from a legitimate HTTPS site.
Your VPN traffic will be indistinguishable from normal traffic to this site.

Available options:
  1) www.google.com:443      (Recommended - highly reliable)
  2) www.microsoft.com:443   (Enterprise-friendly)
  3) www.apple.com:443       (Good for regions where Google is blocked)
  4) www.cloudflare.com:443  (CDN provider)
  5) Custom site (advanced)  

Enter your choice [1-5] (default: 1): 1

Selected: www.google.com:443
Validating destination (this may take up to 10 seconds)...
  [1/3] Checking DNS resolution... OK
  [2/3] Checking TLS connectivity... OK
  [3/3] Checking TLS 1.3 support... WARN
      TLS 1.3 not confirmed, but may still work
✓ Destination validated successfully

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[2/3] Select VLESS Server Port
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

VLESS server will listen on this port for incoming VPN connections.
Port 443 is recommended (standard HTTPS) for maximum compatibility.

Checking port availability...
✓ Port 443 is available

Use port 443? [Y/n]: y
✓ Selected port: 443

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[3/3] Select Docker Network Subnet
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

Docker bridge network will be created with an isolated subnet.
This ensures no conflicts with other VPN services.

Scanning existing Docker networks...

Existing Docker subnets:
  bridge: 172.17.0.0/16

✓ Default subnet 172.20.0.0/16 is available

Use default subnet 172.20.0.0/16? [Y/n]: y
✓ Selected subnet: 172.20.0.0/16


╔══════════════════════════════════════════════════════════════╗
║            CONFIGURATION SUMMARY                             ║
╚══════════════════════════════════════════════════════════════╝

Please review your configuration:

  Destination Site:    www.google.com:443
  VLESS Port:          443
  Docker Subnet:       172.20.0.0/16

Is this configuration correct? [Y/n]: y

✓ Configuration confirmed

✓ All parameters collected successfully

✓ Parameters collected

[8/10] Orchestrating installation...
  → Creating /opt/vless directory structure
  → Copying files from project to /opt/vless
  → Configuring Docker network
  → Setting up Xray configuration
  → Deploying containers

╔══════════════════════════════════════════════════════════════╗
║           INSTALLATION ORCHESTRATION                         ║
╚══════════════════════════════════════════════════════════════╝

[1/12] Creating directory structure...
  ✓ Created /opt/vless
  ✓ /opt/vless/config exists
  ✓ /opt/vless/data exists
  ✓ /opt/vless/data/clients exists
  ✓ /opt/vless/data/backups exists
  ✓ /opt/vless/backup exists
  ✓ /opt/vless/logs exists
  ✓ /opt/vless/keys exists
  ✓ /opt/vless/scripts exists
  ✓ /opt/vless/fake-site exists
  ✓ /opt/vless/docs exists
  ✓ /opt/vless/tests exists
  ✓ /opt/vless/tests/unit exists
  ✓ /opt/vless/tests/integration exists
✓ Directory structure created
[2/12] Generating X25519 Reality keys...
  ✓ Private key: eMwMQL08It...qSrYg6u7Xs
  ✓ Public key: pnTs15mwMp...07Cdj7eKiM
  ✓ Keys saved to /opt/vless/keys/
✓ Reality keys generated
[3/12] Generating Short ID...
  ✓ Short ID: 33a70793986513c7
✓ Short ID generated
[4/12] Creating Xray configuration...
  ✓ Configuration file: /opt/vless/config/xray_config.json
  ✓ Listen port: 443
  ✓ Destination: www.google.com:443
  ✓ Fallback to Nginx configured
✓ Xray configuration created
[5/12] Creating users database...
  ✓ Users database: /opt/vless/data/users.json
  ✓ Initial state: empty (0 users)
✓ Users database created
[6/12] Creating Nginx configuration...
  ✓ Nginx configuration: /opt/vless/fake-site/default.conf
  ✓ Proxying to: https://www.google.com:443
  ✓ Cache: 1h for 200 OK responses
✓ Nginx configuration created
[7/12] Creating Docker Compose configuration...
  ✓ Docker Compose file: /opt/vless/docker-compose.yml
  ✓ Xray image: teddysun/xray:24.11.30
  ✓ Nginx image: nginx:alpine
  ✓ Network: vless_reality_net
  ✓ Security: hardened containers with minimal capabilities
✓ Docker Compose configuration created
[8/12] Creating environment file...
  ✓ Environment file: /opt/vless/.env
✓ Environment file created
[9/12] Creating Docker network...
5a18ecb15db611b7d28c7aa17b7d3b8d061e136aa0017101e84e8b60f7ed23db
  ✓ Network name: vless_reality_net
  ✓ Subnet: 172.20.0.0/16
  ✓ Driver: bridge
✓ Docker network created
[10/12] Configuring UFW firewall...
  Creating UFW backup...
  ✓ Backup saved to /tmp/ufw_backup_20251002_205501
  ✓ Docker forwarding rules already present
  Allowing port 443...
Skipping adding existing rule
  Reloading UFW...
Firewall reloaded
  ✓ Port 443/tcp allowed
  ✓ Docker forwarding configured for 172.20.0.0/16
✓ UFW firewall configured
[11/12] Deploying Docker containers...
  Pulling Docker images...
WARN[0000] /opt/vless/docker-compose.yml: the attribute `version` is obsolete, it will be ignored, please remove it to avoid potential confusion 
[+] Pulling 2/2
 ✔ nginx Pulled                                                                                              0.2s 
 ✔ xray Pulled                                                                                               0.2s 
  ✓ Images pulled
  Starting containers...
WARN[0000] /opt/vless/docker-compose.yml: the attribute `version` is obsolete, it will be ignored, please remove it to avoid potential confusion 
[+] Running 2/2
 ✔ Container vless_xray   Started                                                                            0.3s 
 ✔ Container vless_nginx  Started                                                                            0.4s 
  Waiting for containers to start...
  ✓ Xray container running
  ✓ Nginx container running
✓ Containers deployed successfully
[12/12] Setting file permissions...
  ✓ Sensitive files: 600 (root only)
  ✓ Config/keys directories: 700 (root only)
  ✓ Logs/scripts: 755/644 (readable)
✓ Permissions set

✓ Installation orchestration completed successfully

✓ Installation orchestration complete

[9/10] Verifying installation...

======================================================================
  VLESS Reality - Post-Installation Verification
======================================================================

[INFO] Starting comprehensive verification checks...

[INFO] Verification 1/8: Checking directory structure...
[✓] All required directories exist (13 directories)
[✓] All required files exist (7 files)

[INFO] Verification 2/8: Checking file permissions...
[✓] All file permissions and ownership are correct

[INFO] Verification 3/8: Checking Docker network...
[✓] Network subnet: 172.20.0.0/16
[✓] Network driver: bridge
[✓] Network ID: 5a18ecb15db6

[INFO] Verification 4/8: Checking container health...
[✓] Container 'vless_xray' is running
[INFO]   Started at: 2025-10-02T18:55:37.930106442Z
[✓] Container 'vless_nginx' is running
[INFO]   Started at: 2025-10-02T18:55:38.133372552Z
[✗] Container 'vless_xray' is not connected to vless_reality_net (networks: bridge )
[✗] Container 'vless_nginx' is not connected to vless_reality_net (networks: bridge )
[✓] Container 'vless_xray' restart policy: unless-stopped

[INFO] Verification 5/8: Validating Xray configuration...
[✓] Xray configuration JSON syntax is valid
[✓] Xray configuration validation passed (xray -test)
[✓] Inbound protocol: vless
[✓] Stream security: reality
[✓] Reality private key is configured
[✓] Reality destination: www.google.com:443

[INFO] Verification 6/8: Checking UFW firewall rules...
[✓] UFW is active
[✗] UFW does not allow port 443/tcp
[⚠] VLESS REALITY rules section not found in /etc/ufw/after.rules
[✓] iptables MASQUERADE rule active

[INFO] Verification 7/8: Testing container internet connectivity...
[✓] Container 'vless_xray' can reach internet (ping 8.8.8.8)
[✓] Container 'vless_xray' has DNS resolution
[✓] Container 'vless_nginx' can reach internet (ping 8.8.8.8)
[⚠] Container cannot reach Reality destination: www.google.com:443 (may be normal if destination requires TLS)

[INFO] Verification 8/8: Checking port listening status...
[✓] Port 443 is listening on host
[✓] Container 'vless_xray' port binding: 443/tcp -> 443 
[INFO] Server public IP: 205.172.58.179

======================================================================
  Verification Summary
======================================================================

[✗] VERIFICATION FAILED (3 errors)

Errors encountered:
  - Container 'vless_xray' is not connected to vless_reality_net (networks: bridge )
  - Container 'vless_nginx' is not connected to vless_reality_net (networks: bridge )
  - UFW does not allow port 443/tcp
  - VERIFICATION FAILED (3 errors)

Please review the errors above and fix them before proceeding.

Common fixes:
  1. Container issues: docker-compose -f /opt/vless/docker-compose.yml up -d
  2. Permission issues: Run the installation script again as root
  3. Network issues: Check UFW Docker forwarding configuration

======================================================================

✗ ERROR: Installation failed with exit code 1

To retry installation:
  cd /home/ikeniborn/vless
  sudo ./install.sh


        </project_context>

        <task>
            <technical_requirements>
                - Проанализировать логи установки
                - Определить ошибки и проблемы устанвоки
                - Исправь все выявленные проблемы
            </technical_requirements>

            <quality_requirements>
                - Следовать PRD
                - Создать необходимые тесты
                - Документировать изменения
            </quality_requirements>
        </task>
    </context>

    <!-- ═══════════════════════════════════════════════════════ -->
    <!-- WORKFLOW -->
    <!-- ═══════════════════════════════════════════════════════ -->
    <workflow>
        
        <!-- ═══════════════════════════════════════════════════════ -->
        <!-- PHASE 1: ANALYZE & PLAN -->
        <!-- ═══════════════════════════════════════════════════════ -->
        <phase id="1_analyze" mandatory="true">
            <objective>Анализ задачи, проверка PRD, создание плана</objective>

            <actions>
                <action seq="1" requires_thinking="true">
                    <do>Загрузить PRD и проанализировать релевантные секции</do>
                    <verify>PRD прочитан, задача aligned</verify>
                </action>

                <action seq="2" requires_thinking="true">
                    <do>Проанализировать логи и определить root causes проблем</do>
                    <verify>Проблемы идентифицированы, подход выбран</verify>
                </action>

                <action seq="3" output="required" mandatory_format="true">
                    <do>Создать план выполнения</do>
                    <format>
                        ПЛАН ВЫПОЛНЕНИЯ
                        ════════════════════════════════════════════
                        PRD: ✓ [релевантные секции]
                        
                        ПРОБЛЕМЫ:
                        1. [проблема 1] → [решение]
                        2. [проблема 2] → [решение]
                        
                        ФАЙЛЫ:
                        - [файл]: [что изменить]
                        
                        ШАГИ:
                        1. [шаг]
                        2. [шаг]
                        
                        РИСКИ: [список]
                        ВАЛИДАЦИЯ: [как проверить]
                        ════════════════════════════════════════════
                    </format>
                </action>
            </actions>

            <exit_conditions>
                <condition>PRD проверен, задача соответствует</condition>
                <condition>План создан с деталями</condition>
                <condition>Риски идентифицированы</condition>
            </exit_conditions>
        </phase>

        <!-- ═══════════════════════════════════════════════════════ -->
        <!-- PHASE 2: EXECUTE -->
        <!-- ═══════════════════════════════════════════════════════ -->
        <phase id="2_execute" mandatory="true">
            <objective>Выполнение задачи согласно плану</objective>

            <execution_loop>
                ДЛЯ КАЖДОГО ШАГА:
                1. Выполнить изменения кода
                2. Micro-валидация (syntax, basic functionality)
                3. Документировать результат
            </execution_loop>

            <exit_conditions>
                <condition>Все шаги выполнены</condition>
                <condition>Код работает, нет syntax errors</condition>
            </exit_conditions>
        </phase>

        <!-- ═══════════════════════════════════════════════════════ -->
        <!-- PHASE 3: VALIDATE -->
        <!-- ═══════════════════════════════════════════════════════ -->
        <phase id="3_validate" mandatory="true">
            <objective>Проверка acceptance criteria и PRD</objective>

            <actions>
                <action seq="1" validation="critical" blocking="true">
                    <do>Проверить acceptance criteria</do>
                    <verify>Каждый критерий ✓, работает корректно</verify>
                </action>

                <action seq="2" validation="critical" blocking="true">
                    <do>Проверить PRD compliance</do>
                    <verify>Нет противоречий, requirements соблюдены</verify>
                </action>

                <action seq="3" validation="standard">
                    <do>Функциональное тестирование</do>
                    <verify>Функционал работает, edge cases обработаны</verify>
                </action>
            </actions>

            <exit_conditions>
                <condition>Acceptance criteria выполнены</condition>
                <condition>PRD requirements соблюдены</condition>
                <condition>Тесты пройдены (если применимо)</condition>
            </exit_conditions>

            <approval_gate required="true">
                Валидация завершена. Результаты:
                - Acceptance Criteria: [✓/✗]
                - PRD Compliance: [✓/✗]
                - Tests: [✓/✗/N/A]
            </approval_gate>
        </phase>

        <!-- ═══════════════════════════════════════════════════════ -->
        <!-- PHASE 4: FINALIZE -->
        <!-- ═══════════════════════════════════════════════════════ -->
        <phase id="4_finalize" mandatory="true">
            <objective>Документирование и git (опционально)</objective>

            <actions>
                <action seq="1">
                    <do>Обновить inline документацию</do>
                </action>

                <action seq="2" output="required" mandatory_format="true">
                    <do>Создать summary</do>
                    <format>
                        TASK SUMMARY
                        ════════════════════════════════════════════
                        СТАТУС: ✓ COMPLETED
                        
                        СДЕЛАНО:
                        - [пункт 1]
                        - [пункт 2]
                        
                        ФАЙЛЫ:
                        - [файл]: [изменения]
                        
                        ACCEPTANCE CRITERIA:
                        ✓ [критерий 1]
                        ✓ [критерий 2]
                        
                        PRD: ✓
                        TESTS: [статус]
                        
                        РЕШЕНИЯ:
                        - [решение]: [обоснование]
                        
                        NEXT STEPS (если есть):
                        - [рекомендация]
                        ════════════════════════════════════════════
                    </format>
                </action>

                <action seq="3" optional="true">
                    <do>Git commit (по запросу пользователя)</do>
                </action>
            </actions>
        </phase>
    </workflow>

    <!-- ═══════════════════════════════════════════════════════ -->
    <!-- SPECIFIC ERROR TYPES (дополняют CLAUDE.md) -->
    <!-- ═══════════════════════════════════════════════════════ -->
    <error_handling>
        <error type="prd_conflict" action="STOP_IMMEDIATELY">
            <message>
                ⛔ КОНФЛИКТ С PRD
                Задача противоречит PRD: {details}
                PRD секция: {reference}
            </message>
        </error>

        <error type="acceptance_fail" action="RETRY" max_attempts="2">
            <message>
                ❌ ACCEPTANCE CRITERIA НЕ ВЫПОЛНЕН
                Критерий: {criterion}
                Попытка исправления...
            </message>
        </error>
    </error_handling>

    <!-- ═══════════════════════════════════════════════════════ -->
    <!-- QUICK COMMANDS -->
    <!-- ═══════════════════════════════════════════════════════ -->
    <quick_commands>
        <command name="execute" syntax="execute: [описание]" />
        <command name="fix" syntax="fix: [описание бага]" />
        <command name="refactor" syntax="refactor: [что улучшить]" />
        <command name="test" syntax="test: [что покрыть]" />
    </quick_commands>

    <!-- ═══════════════════════════════════════════════════════ -->
    <!-- STARTUP -->
    <!-- ═══════════════════════════════════════════════════════ -->
    <startup_instructions>
        1. Проверить задачу в &lt;context&gt;&lt;task&gt;
        2. ПЕРВЫМ ДЕЛОМ загрузить PRD
        3. Начать с Phase 1
        4. Использовать thinking (следуя CLAUDE.md)
        5. Применять все правила из CLAUDE.md автоматически
        
        КРИТИЧНО:
        - PRD проверяется ВСЕГДА
        - При конфликте с PRD - STOP
        - Acceptance criteria ДОЛЖНЫ быть выполнены
    </startup_instructions>

</request_execute>