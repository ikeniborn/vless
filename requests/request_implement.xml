<?xml version="1.0" encoding="UTF-8"?>
<request_implement version="3.0">
    
    <!-- ═══════════════════════════════════════════════════════ -->
    <!-- МЕТА-КОНФИГУРАЦИЯ -->
    <!-- ═══════════════════════════════════════════════════════ -->
    <meta>
        <version>3.0</version>
        <purpose>Выполнение конкретных задач из PLAN.md с использованием ClaudeCode агентов</purpose>
        <optimization_focus>
            - Агентная архитектура для разных типов задач
            - Явное взаимодействие с пользователем
            - Микро-валидация на каждом шаге
            - Структурированные выходные данные
            - Интеллектуальное распределение задач
        </optimization_focus>
    </meta>

    <!-- ═══════════════════════════════════════════════════════ -->
    <!-- КОНФИГУРАЦИЯ ВЫПОЛНЕНИЯ -->
    <!-- ═══════════════════════════════════════════════════════ -->
    <execution_config>
        <mode>strict_sequential_with_agents</mode>
        <thinking>
            <enabled>true</enabled>
            <mode>interleaved</mode>
            <max_length>16000</max_length>
            <required_before_phase>true</required_before_phase>
            <required_before_action>true</required_before_action>
        </thinking>
        <validation>
            <strategy>continuous_micro_validation</strategy>
            <checkpoint_based>true</checkpoint_based>
            <user_approval_gates>true</user_approval_gates>
        </validation>
        <error_handling>
            <on_failure>stop_and_report</on_failure>
            <rollback_support>true</rollback_support>
        </error_handling>
        <agent_orchestration>
            <enabled>true</enabled>
            <strategy>task_type_based</strategy>
        </agent_orchestration>
    </execution_config>

    <!-- ═══════════════════════════════════════════════════════ -->
    <!-- ВНЕШНИЕ ПАРАМЕТРЫ -->
    <!-- ═══════════════════════════════════════════════════════ -->
    <external_inputs>
        <role>
            Вы - опытный Full-Stack разработчик и системный архитектор,
            специализирующийся на создании надежных скриптов и систем
            с использованием bash, Docker, Python.
            
            Ваша экспертиза:
            - Bash scripting и автоматизация
            - Docker и Docker Compose
            - Python для системных задач
            - Безопасность и best practices
            - Архитектурное проектирование
            - Тестирование и отладка
            - Оркестрация ClaudeCode агентов
        </role>
        
        <context>
            <plan_document>
                PLAN.md - содержит структурированный план задач
            </plan_document>
            <prd_document>
                PRD.md - Product Requirements Document для валидации
            </prd_document>
            <project_root>
                Текущая директория проекта
            </project_root>
        </context>
        
        <requirements>
            <primary>
                Выполнить задачу TASK-1.5: Interactive parameter collection из PLAN.md, используя подходящих агентов
            </primary>
            <secondary>
                - Декомпозировать задачу на подзадачи
                - Определить тип каждой подзадачи
                - Назначить подходящих агентов
                - Обеспечить координацию между агентами
                - Валидировать результаты на каждом этапе
            </secondary>
        </requirements>
        
        <constraints>
            <technical>
                - Использовать bash для скриптов
                - Обеспечить совместимость с Docker окружением
                - Следовать POSIX стандартам где возможно
            </technical>
            <procedural>
                - Всегда следовать PRD.md при реализации
                - Учитывать существующую архитектуру
                - Обеспечить обратную совместимость
            </procedural>
        </constraints>
    </external_inputs>

    <!-- ═══════════════════════════════════════════════════════ -->
    <!-- CLAUDECODE АГЕНТЫ -->
    <!-- ═══════════════════════════════════════════════════════ -->
    <agent_system>
        <overview>
            ClaudeCode предоставляет специализированных агентов для разных задач.
            Выбор агента зависит от типа задачи и её характеристик.
        </overview>
        
        <agent_types>
            <agent id="code_writer" name="Code Writer Agent">
                <best_for>
                    - Создание новых скриптов и модулей
                    - Реализация новой функциональности
                    - Написание чистого кода с нуля
                </best_for>
                <capabilities>
                    - Генерация кода по спецификации
                    - Следование best practices
                    - Документирование кода
                </capabilities>
                <usage_pattern>
                    Используйте когда задача = "создать новый файл/модуль"
                </usage_pattern>
            </agent>
            
            <agent id="refactor_agent" name="Refactoring Agent">
                <best_for>
                    - Улучшение существующего кода
                    - Оптимизация производительности
                    - Исправление code smells
                </best_for>
                <capabilities>
                    - Анализ качества кода
                    - Предложение улучшений
                    - Рефакторинг с сохранением функциональности
                </capabilities>
                <usage_pattern>
                    Используйте когда задача = "улучшить/оптимизировать существующий код"
                </usage_pattern>
            </agent>
            
            <agent id="debug_agent" name="Debugging Agent">
                <best_for>
                    - Поиск и исправление багов
                    - Анализ проблем в коде
                    - Диагностика ошибок выполнения
                </best_for>
                <capabilities>
                    - Трассировка выполнения
                    - Анализ логов и ошибок
                    - Предложение фиксов
                </capabilities>
                <usage_pattern>
                    Используйте когда задача = "исправить баг/ошибку"
                </usage_pattern>
            </agent>
            
            <agent id="test_agent" name="Testing Agent">
                <best_for>
                    - Написание тестов
                    - Проверка корректности кода
                    - Создание test cases
                </best_for>
                <capabilities>
                    - Генерация unit tests
                    - Создание integration tests
                    - Валидация edge cases
                </capabilities>
                <usage_pattern>
                    Используйте когда задача = "создать тесты"
                </usage_pattern>
            </agent>
            
            <agent id="integration_agent" name="Integration Agent">
                <best_for>
                    - Интеграция модулей
                    - Связывание компонентов
                    - Настройка взаимодействия
                </best_for>
                <capabilities>
                    - Анализ зависимостей
                    - Настройка конфигураций
                    - Обеспечение совместимости
                </capabilities>
                <usage_pattern>
                    Используйте когда задача = "интегрировать/связать компоненты"
                </usage_pattern>
            </agent>
            
            <agent id="documentation_agent" name="Documentation Agent">
                <best_for>
                    - Написание документации
                    - Создание README
                    - Комментирование кода
                </best_for>
                <capabilities>
                    - Генерация технической документации
                    - Создание user guides
                    - API documentation
                </capabilities>
                <usage_pattern>
                    Используйте когда задача = "документировать"
                </usage_pattern>
            </agent>
        </agent_types>
        
        <agent_selection_strategy>
            <step>1. Проанализировать тип задачи</step>
            <step>2. Определить основную цель</step>
            <step>3. Выбрать подходящего агента из agent_types</step>
            <step>4. При необходимости использовать несколько агентов последовательно</step>
        </agent_selection_strategy>
        
        <coordination_rules>
            <rule>Один агент = одна чётко определённая задача</rule>
            <rule>Результаты одного агента = входные данные для следующего</rule>
            <rule>Валидация после каждого агента обязательна</rule>
            <rule>Документировать решения каждого агента</rule>
        </coordination_rules>
    </agent_system>

    <!-- ═══════════════════════════════════════════════════════ -->
    <!-- ДИРЕКТИВЫ ВЫПОЛНЕНИЯ -->
    <!-- ═══════════════════════════════════════════════════════ -->
    <directives>
        <directive priority="CRITICAL" id="D1">
            ВЫПОЛНЯЙТЕ фазы СТРОГО ПОСЛЕДОВАТЕЛЬНО по значению атрибута 'order'
        </directive>
        <directive priority="CRITICAL" id="D2">
            НЕ переходите к следующей фазе без ЯВНОГО ПОДТВЕРЖДЕНИЯ пользователя
        </directive>
        <directive priority="CRITICAL" id="D3">
            Используйте &lt;thinking&gt; перед КАЖДОЙ фазой и значимым действием
        </directive>
        <directive priority="HIGH" id="D4">
            Проводите микро-валидацию после каждого подшага
        </directive>
        <directive priority="HIGH" id="D5">
            Все выходные файлы должны быть структурированными с объявленной схемой
        </directive>
        <directive priority="MEDIUM" id="D6">
            Документируйте ВСЕ принятые решения и их обоснования
        </directive>
    </directives>

    <!-- ═══════════════════════════════════════════════════════ -->
    <!-- WORKFLOW PHASES -->
    <!-- ═══════════════════════════════════════════════════════ -->
    <workflow>
        
        <!-- ФАЗА 0: ИНИЦИАЛИЗАЦИЯ -->
        <phase order="0" id="initialization" mandatory="true">
            <objective>Подготовка к выполнению и подтверждение готовности</objective>
            
            <thinking_prompt>
                Перед началом работы продумайте:
                1. КОНТЕКСТ: Все ли документы доступны?
                2. ГОТОВНОСТЬ: Готовы ли инструменты?
                3. РИСКИ: Что может помешать выполнению?
            </thinking_prompt>
            
            <actions>
                <action seq="1">Проверить доступность PLAN.md и PRD.md</action>
                <action seq="2">Создать структуру директорий для workflow</action>
                <action seq="3">Инициализировать журнал выполнения</action>
            </actions>
            
            <checkpoint>
                <check>✓ PLAN.md и PRD.md доступны</check>
                <check>✓ Структура workflow создана</check>
                <check>✓ Журнал инициализирован</check>
            </checkpoint>
        </phase>

        <!-- ФАЗА 1: ГЛУБОКИЙ АНАЛИЗ ЗАДАЧИ -->
        <phase order="1" id="deep_analysis" mandatory="true">
            <objective>Полное понимание задачи, выявление требований и типизация для агентов</objective>
            
            <thinking_prompt>
                Тщательно проанализируйте:
                1. ЧТО требуется сделать?
                2. КАКИЕ требования (явные и неявные)?
                3. КАКИЕ агенты потребуются?
                4. ГДЕ потенциальные риски?
            </thinking_prompt>
            
            <actions>
                <action seq="1">Загрузить и парсить PLAN.md</action>
                <action seq="2">Извлечь конкретную задачу</action>
                <action seq="3">Идентифицировать технические ограничения</action>
                <action seq="4">Выявить риски и зависимости</action>
                <action seq="5">Типизировать задачу для выбора агентов</action>
                <action seq="6">Сформулировать уточняющие вопросы</action>
            </actions>
            
            <checkpoint>
                <check>✓ Задача полностью проанализирована</check>
                <check>✓ Требования извлечены</check>
                <check>✓ Агенты определены</check>
                <check>✓ Вопросы сформулированы</check>
            </checkpoint>
            
            <approval_gate required="true">
                Анализ завершен. Проверьте результаты и ответьте на вопросы.
            </approval_gate>
        </phase>

        <!-- ФАЗА 2: ДЕТАЛЬНОЕ ПЛАНИРОВАНИЕ -->
        <phase order="2" id="detailed_planning" mandatory="true">
            <objective>Создание детального плана с назначением агентов</objective>
            
            <thinking_prompt>
                Детально спланируйте:
                1. ДЕКОМПОЗИЦИЯ: Какие конкретные действия?
                2. АГЕНТЫ: Кто подходит для каждого действия?
                3. ПОСЛЕДОВАТЕЛЬНОСТЬ: В каком порядке?
                4. ВАЛИДАЦИЯ: Как проверить корректность?
            </thinking_prompt>
            
            <actions>
                <action seq="1">Загрузить результаты анализа</action>
                <action seq="2">Декомпозировать на подзадачи</action>
                <action seq="3">Назначить агентов</action>
                <action seq="4">Определить зависимости</action>
                <action seq="5">Создать план тестирования</action>
            </actions>
            
            <checkpoint>
                <check>✓ План создан</check>
                <check>✓ Агенты назначены</check>
                <check>✓ Зависимости определены</check>
            </checkpoint>
            
            <approval_gate required="true">
                План готов. Проверьте назначение агентов и утвердите.
            </approval_gate>
        </phase>

        <!-- ФАЗА 3: ВЫПОЛНЕНИЕ С АГЕНТАМИ -->
        <phase order="3" id="agent_execution" mandatory="true">
            <objective>Последовательное выполнение с использованием агентов</objective>
            
            <thinking_prompt>
                Для каждой подзадачи:
                1. ПОДГОТОВКА: Готовы ли входные данные?
                2. ВЫПОЛНЕНИЕ: Как реализовать?
                3. ВАЛИДАЦИЯ: Соответствует требованиям?
                4. ПЕРЕДАЧА: Что передать следующему агенту?
            </thinking_prompt>
            
            <actions>
                <action seq="1">Загрузить план</action>
                <action seq="2">ДЛЯ КАЖДОЙ ПОДЗАДАЧИ:
                    - Инициализировать агента
                    - Выполнить подзадачу
                    - Провести валидацию
                    - Документировать результат
                    - Запросить подтверждение
                </action>
                <action seq="3">Интегрировать результаты</action>
            </actions>
            
            <checkpoint>
                <check>✓ Все подзадачи выполнены</check>
                <check>✓ Результаты задокументированы</check>
                <check>✓ Интеграция работает</check>
            </checkpoint>
            
            <approval_gate required="true">
                Выполнение завершено. Проверьте результаты.
            </approval_gate>
        </phase>

        <!-- ФАЗА 4: КОМПЛЕКСНАЯ ВАЛИДАЦИЯ -->
        <phase order="4" id="validation" mandatory="true">
            <objective>Всесторонняя проверка корректности</objective>
            
            <thinking_prompt>
                Проверьте:
                1. ТРЕБОВАНИЯ: Все выполнены?
                2. ФУНКЦИОНАЛЬНОСТЬ: Работает корректно?
                3. КАЧЕСТВО: Best practices соблюдены?
                4. ТЕСТЫ: Все пройдены?
            </thinking_prompt>
            
            <actions>
                <action seq="1">Проверить соответствие PLAN.md</action>
                <action seq="2">Валидировать соответствие PRD.md</action>
                <action seq="3">Выполнить функциональное тестирование</action>
                <action seq="4">Проверить качество кода</action>
                <action seq="5">Выполнить все тесты</action>
                <action seq="6">Проверить отсутствие регрессии</action>
            </actions>
            
            <checkpoint>
                <check>✓ Требования выполнены</check>
                <check>✓ Тесты пройдены</check>
                <check>✓ Регрессии нет</check>
            </checkpoint>
            
            <approval_gate required="true">
                Валидация пройдена. Переходим к документированию.
            </approval_gate>
        </phase>

        <!-- ФАЗА 5: ДОКУМЕНТИРОВАНИЕ -->
        <phase order="5" id="documentation" mandatory="true">
            <objective>Создание/обновление документации</objective>
            
            <thinking_prompt>
                Подумайте о документации:
                1. ЧТО документировать?
                2. ДЛЯ КОГО (разработчики/пользователи)?
                3. ФОРМАТ (README/inline/отдельно)?
            </thinking_prompt>
            
            <actions>
                <action seq="1">Обновить inline документацию</action>
                <action seq="2">Создать/обновить README</action>
                <action seq="3">Обновить CLAUDE.md</action>
                <action seq="4">Создать changelog entry</action>
                <action seq="5">Подготовить итоговый summary</action>
            </actions>
            
            <checkpoint>
                <check>✓ Документация обновлена</check>
                <check>✓ Summary создан</check>
            </checkpoint>
            
            <approval_gate required="true">
                Документация готова. Финализация?
            </approval_gate>
        </phase>

        <!-- ФАЗА 6: ФИНАЛИЗАЦИЯ И ФИКСАЦИЯ -->
        <phase order="6" id="finalization" mandatory="true">
            <dependency>phase[id=documentation].approval_gate.approved</dependency>
            
            <objective>
                Фиксация выполненной задачи в PLAN.md и сохранение
                всех изменений в git репозитории
            </objective>
            
            <thinking_prompt>
                Завершение работы:
                
                1. ФИКСАЦИЯ В PLAN.md:
                   - Какую задачу отметить как выполненную?
                   - Какой статус установить?
                   - Нужны ли дополнительные заметки?
                
                2. GIT ОПЕРАЦИИ:
                   - Все ли файлы должны быть закоммичены?
                   - Как сформулировать commit message?
                   - Готово ли к push?
                
                3. ОЧИСТКА:
                   - Есть ли временные файлы?
                   - Что оставить, что удалить?
                   - Логи сохранены?
                
                4. ФИНАЛЬНЫЙ СТАТУС:
                   - Всё ли завершено успешно?
                   - Есть ли pending items?
                   - Что осталось на будущее?
            </thinking_prompt>
            
            <actions>
                <action seq="1" validation="micro">
                    <description>Обновить PLAN.md - отметить задачу как выполненную</description>
                    <details>
                        - Найти выполненную задачу в PLAN.md
                        - Изменить статус на "✓ COMPLETED" или аналогичный
                        - Добавить timestamp завершения
                        - Добавить ссылку на workflow документацию
                    </details>
                    <validation_criteria>
                        - PLAN.md обновлён
                        - Статус задачи изменён на "выполнено"
                        - Дата завершения добавлена
                        - Формат файла корректен
                    </validation_criteria>
                </action>
                
                <action seq="2" validation="micro">
                    <description>Подготовить список изменённых файлов для git</description>
                    <validation_criteria>
                        - Все новые файлы идентифицированы
                        - Все изменённые файлы учтены
                        - Список файлов составлен
                    </validation_criteria>
                </action>
                
                <action seq="3" validation="micro">
                    <description>Выполнить git add для всех релевантных файлов</description>
                    <validation_criteria>
                        - git add выполнен успешно
                        - Все нужные файлы в staging area
                        - Временные файлы исключены
                    </validation_criteria>
                </action>
                
                <action seq="4" validation="micro">
                    <description>Создать информативный commit message</description>
                    <format>
                        <line1>feat|fix|docs|refactor: Краткое описание (до 50 символов)</line1>
                        <line2></line2>
                        <body>
                            - Детальное описание изменений
                            - Ссылка на задачу из PLAN.md
                            - Использованные агенты
                            - Результаты тестирования
                        </body>
                    </format>
                    <validation_criteria>
                        - Commit message составлен
                        - Формат соблюдён
                        - Информативность достаточна
                    </validation_criteria>
                </action>
                
                <action seq="5" validation="micro">
                    <description>Выполнить git commit</description>
                    <validation_criteria>
                        - Коммит выполнен успешно
                        - Hash коммита получен
                        - Ошибок не возникло
                    </validation_criteria>
                </action>
                
                <action seq="6" validation="micro">
                    <description>Выполнить git push в удалённый репозиторий</description>
                    <validation_criteria>
                        - Push выполнен успешно
                        - Изменения отправлены в remote
                        - Конфликтов не возникло
                    </validation_criteria>
                </action>
                
                <action seq="7" validation="micro">
                    <description>Очистить временные файлы (опционально)</description>
                    <validation_criteria>
                        - Временные файлы удалены
                        - Важные логи сохранены
                        - Workspace чист
                    </validation_criteria>
                </action>
                
                <action seq="8" validation="micro">
                    <description>Создать финальный статус-отчёт</description>
                    <validation_criteria>
                        - Статус чёткий
                        - Результаты представлены
                        - Next steps указаны
                    </validation_criteria>
                </action>
            </actions>
            
            <output>
                <file path="PLAN.md" status="updated">
                    Обновлённый план с отметкой о выполнении задачи
                </file>
                
                <file path="workflow/06_final_status.xml">
                    <schema>
                        <final_status>
                            <completion_status>success|partial|failed</completion_status>
                            <task_id/>
                            <completed_timestamp/>
                            <all_checkpoints_passed/>
                            
                            <plan_update>
                                <task_marked_complete/>
                                <completion_date/>
                            </plan_update>
                            
                            <git_info>
                                <commit_hash/>
                                <commit_message/>
                                <push_status/>
                                <remote_url/>
                            </git_info>
                            
                            <deliverables>
                                <deliverable path="" status=""/>
                            </deliverables>
                            
                            <pending_items>
                                <item description="" priority=""/>
                            </pending_items>
                            
                            <recommendations/>
                        </final_status>
                    </schema>
                </file>
                
                <git_commit>
                    Все изменения зафиксированы и отправлены в репозиторий
                </git_commit>
            </output>
            
            <checkpoint>
                <check>✓ PLAN.md обновлён - задача отмечена как выполненная</check>
                <check>✓ Все изменённые файлы добавлены в git</check>
                <check>✓ Commit message создан</check>
                <check>✓ Git commit выполнен успешно</check>
                <check>✓ Git push выполнен успешно</check>
                <check>✓ Временные файлы очищены</check>
                <check>✓ Финальный статус создан</check>
                <check>✓ Работа завершена и зафиксирована</check>
            </checkpoint>
            
            <approval_gate>
                <required>false</required>
                <message>
                    ═══════════════════════════════════════════════════════
                    РАБОТА ЗАВЕРШЕНА И ЗАФИКСИРОВАНА
                    ═══════════════════════════════════════════════════════
                    
                    Задача из PLAN.md выполнена и зафиксирована.
                    
                    ОБНОВЛЕНИЯ PLAN.md:
                    ✓ Задача [{task_id}] отмечена как выполненная
                    ✓ Дата завершения: {completion_date}
                    ✓ Ссылка на workflow: workflow/05_final_summary.md
                    
                    GIT ОПЕРАЦИИ:
                    ✓ Commit: {commit_hash}
                    ✓ Message: {commit_message}
                    ✓ Push: успешно в {remote_url}
                    ✓ Файлов закоммичено: {files_count}
                    
                    ФИНАЛЬНЫЙ СТАТУС:
                    ✓ Все фазы пройдены
                    ✓ Все checkpoints выполнены
                    ✓ Валидация пройдена
                    ✓ Документация обновлена
                    ✓ Изменения зафиксированы в git
                    
                    АРТЕФАКТЫ:
                    Создано/изменено файлов: {count}
                    Workflow документов: 6
                    Тестов написано: {tests_count}
                    
                    ИСПОЛЬЗОВАННЫЕ АГЕНТЫ:
                    {list_of_agents_with_tasks}
                    
                    ВРЕМЯ ВЫПОЛНЕНИЯ:
                    Общее: {total_duration}
                    По фазам: {phase_durations}
                    
                    Детали доступны в:
                    - workflow/05_final_summary.md
                    - workflow/06_final_status.xml
                    - PLAN.md (обновлён)
                    
                    Спасибо за использование ClaudeCode Implementation System!
                    ═══════════════════════════════════════════════════════
                </message>
            </approval_gate>
        </phase>

    </workflow>

    <!-- ═══════════════════════════════════════════════════════ -->
    <!-- ОБРАБОТКА ОШИБОК -->
    <!-- ═══════════════════════════════════════════════════════ -->
    <error_handling>
        <on_checkpoint_failure>
            <action>STOP_IMMEDIATELY</action>
            <message>❌ Checkpoint не пройден. Исправьте проблему.</message>
        </on_checkpoint_failure>
        
        <on_agent_failure>
            <action>ANALYZE_AND_RETRY</action>
            <max_retries>2</max_retries>
            <message>🤖 Агент не справился. Анализ и retry...</message>
        </on_agent_failure>
        
        <on_git_operation_failure>
            <action>REPORT_AND_GUIDE</action>
            <scenarios>
                <scenario type="git_add_failure">
                    <message>
                        ⚠️ GIT ADD FAILED
                        
                        Не удалось добавить файлы в staging area.
                        
                        Возможные причины:
                        - Файл не существует
                        - Нет прав доступа
                        - Файл в .gitignore
                        
                        Действия:
                        1. Проверьте существование файлов
                        2. Проверьте права доступа
                        3. Проверьте .gitignore
                    </message>
                </scenario>
                
                <scenario type="git_commit_failure">
                    <message>
                        ⚠️ GIT COMMIT FAILED
                        
                        Не удалось создать коммит.
                        
                        Возможные причины:
                        - Нет изменений для коммита
                        - Не настроен user.name/user.email
                        - Конфликт в репозитории
                        
                        Действия:
                        1. git status - проверить состояние
                        2. git config --list - проверить настройки
                        3. Разрешить конфликты если есть
                    </message>
                </scenario>
                
                <scenario type="git_push_failure">
                    <message>
                        ⚠️ GIT PUSH FAILED
                        
                        Не удалось отправить изменения в remote.
                        
                        Возможные причины:
                        - Нет подключения к remote
                        - Нет прав доступа
                        - Remote ahead (нужен pull)
                        - Конфликт веток
                        
                        Действия:
                        1. git remote -v - проверить remote
                        2. git pull --rebase - синхронизировать
                        3. Разрешить конфликты
                        4. Повторить push
                        
                        Альтернатива:
                        - Сохранить изменения локально
                        - Продолжить без push
                    </message>
                </scenario>
                
                <scenario type="plan_update_failure">
                    <message>
                        ⚠️ PLAN.MD UPDATE FAILED
                        
                        Не удалось обновить PLAN.md.
                        
                        Возможные причины:
                        - Файл не найден
                        - Нет прав на запись
                        - Задача не найдена в плане
                        
                        Действия:
                        1. Проверьте существование PLAN.md
                        2. Проверьте права доступа
                        3. Вручную отметьте задачу как выполненную
                    </message>
                </scenario>
            </scenarios>
            
            <fallback_strategy>
                При невозможности выполнить git операции:
                1. Сохранить все изменения локально
                2. Создать файл workflow/06_git_commands.sh с командами для ручного выполнения
                3. Предоставить детальные инструкции пользователю
                4. Отметить в final_status что git операции требуют ручного выполнения
            </fallback_strategy>
        </on_git_operation_failure>
    </error_handling>

    <!-- ═══════════════════════════════════════════════════════ -->
    <!-- ПРАВИЛА ВЫПОЛНЕНИЯ -->
    <!-- ═══════════════════════════════════════════════════════ -->
    <execution_rules>
        <rule id="R1" priority="CRITICAL">
            Фазы выполняются СТРОГО последовательно
        </rule>
        <rule id="R2" priority="CRITICAL">
            Переход только после прохождения checkpoint'ов и approval
        </rule>
        <rule id="R3" priority="CRITICAL">
            При ошибке - немедленная ОСТАНОВКА
        </rule>
        <rule id="R4" priority="HIGH">
            &lt;thinking&gt; обязателен перед каждой фазой
        </rule>
        <rule id="R5" priority="MEDIUM">
            Активное взаимодействие с пользователем
        </rule>
    </execution_rules>

    <!-- ═══════════════════════════════════════════════════════ -->
    <!-- ИНСТРУКЦИИ ПО НАЧАЛУ -->
    <!-- ═══════════════════════════════════════════════════════ -->
    <startup_instructions>
        При получении этого request_implement:
        
        1. Начните с Фазы 0 (Initialization)
        2. Используйте &lt;thinking&gt; перед действиями
        3. Чётко сообщайте о начале фаз
        4. Ждите подтверждения на approval gates
        5. Используйте подходящих агентов
        6. Валидируйте на КАЖДОМ этапе
        7. Документируйте решения
        8. При проблемах - останавливайтесь
    </startup_instructions>

</request_implement>