#!/bin/bash

# VLESS+Reality VPN Management System - Centralized Logging Setup
# Version: 1.0.0
# Description: Comprehensive logging and log management system
#
# Features:
# - Structured logging with log levels
# - Log rotation configuration
# - System log integration
# - Security event logging
# - Log file encryption for sensitive data
# - Remote log shipping capability
# - Process isolation for EPERM prevention

set -euo pipefail

# Import common utilities
SOURCE_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "${SOURCE_DIR}/common_utils.sh"

# Setup signal handlers
setup_signal_handlers

# Configuration
readonly VLESS_LOG_DIR="/opt/vless/logs"
readonly VLESS_CONFIG_DIR="/opt/vless/config"
readonly RSYSLOG_CONFIG_DIR="/etc/rsyslog.d"
readonly LOGROTATE_CONFIG_DIR="/etc/logrotate.d"

# Log files
readonly VLESS_MAIN_LOG="${VLESS_LOG_DIR}/vless-vpn.log"
readonly VLESS_ACCESS_LOG="${VLESS_LOG_DIR}/access.log"
readonly VLESS_ERROR_LOG="${VLESS_LOG_DIR}/error.log"
readonly VLESS_SECURITY_LOG="${VLESS_LOG_DIR}/security.log"
readonly VLESS_AUDIT_LOG="${VLESS_LOG_DIR}/audit.log"
readonly XRAY_LOG="${VLESS_LOG_DIR}/xray.log"

# Log configuration files
readonly RSYSLOG_VLESS_CONF="${RSYSLOG_CONFIG_DIR}/10-vless.conf"
readonly LOGROTATE_VLESS_CONF="${LOGROTATE_CONFIG_DIR}/vless"

# Initialize logging setup module
init_logging_setup() {
    log_info "Initializing centralized logging setup module"

    # Create log directories
    create_directory "$VLESS_LOG_DIR" "750" "vless:vless"
    create_directory "$(dirname "$VLESS_MAIN_LOG")" "750" "vless:vless"

    # Install required packages
    install_package_if_missing "rsyslog"
    install_package_if_missing "logrotate"

    log_success "Logging setup module initialized"
}

# Configure rsyslog for VLESS
configure_rsyslog() {
    log_info "Configuring rsyslog for VLESS logging"

    # Create rsyslog configuration for VLESS
    cat > "$RSYSLOG_VLESS_CONF" << EOF
# VLESS+Reality VPN Logging Configuration
# Generated by logging setup module

# VLESS main application logs
:programname, isequal, "vless-vpn" ${VLESS_MAIN_LOG}
& stop

# VLESS access logs
:programname, isequal, "vless-access" ${VLESS_ACCESS_LOG}
& stop

# VLESS error logs
:programname, isequal, "vless-error" ${VLESS_ERROR_LOG}
& stop

# VLESS security logs
:programname, isequal, "vless-security" ${VLESS_SECURITY_LOG}
& stop

# VLESS audit logs
:programname, isequal, "vless-audit" ${VLESS_AUDIT_LOG}
& stop

# Xray logs
:programname, isequal, "xray" ${XRAY_LOG}
& stop

# Log all authentication failures
auth,authpriv.* ${VLESS_SECURITY_LOG}

# Log all privilege escalations
:msg, contains, "sudo:" ${VLESS_AUDIT_LOG}
:msg, contains, "su:" ${VLESS_AUDIT_LOG}

# Create separate log files for different severity levels
*.emerg ${VLESS_LOG_DIR}/emergency.log
*.alert ${VLESS_LOG_DIR}/alert.log
*.crit ${VLESS_LOG_DIR}/critical.log

EOF

    chmod 644 "$RSYSLOG_VLESS_CONF"

    # Restart rsyslog to apply changes
    isolate_systemctl_command "restart" "rsyslog" 30

    log_success "Rsyslog configured for VLESS logging"
}

# Configure log rotation
configure_log_rotation() {
    log_info "Configuring log rotation for VLESS logs"

    # Create logrotate configuration
    cat > "$LOGROTATE_VLESS_CONF" << EOF
# VLESS+Reality VPN Log Rotation Configuration
# Generated by logging setup module

${VLESS_LOG_DIR}/*.log {
    daily
    rotate 30
    compress
    delaycompress
    missingok
    notifempty
    create 640 vless vless
    sharedscripts
    postrotate
        # Restart rsyslog to reopen log files
        systemctl reload rsyslog >/dev/null 2>&1 || true

        # Signal Docker containers to reopen log files if running
        if docker ps --format "{{.Names}}" | grep -q "vless"; then
            docker kill --signal="USR1" \$(docker ps --filter "name=vless" --format "{{.ID}}") >/dev/null 2>&1 || true
        fi
    endscript
}

# Special handling for high-frequency logs
${VLESS_ACCESS_LOG} {
    hourly
    rotate 168
    compress
    delaycompress
    missingok
    notifempty
    create 640 vless vless
    size 100M
}

# Security logs - keep longer
${VLESS_SECURITY_LOG} ${VLESS_AUDIT_LOG} {
    daily
    rotate 90
    compress
    delaycompress
    missingok
    notifempty
    create 600 root root
}

EOF

    chmod 644 "$LOGROTATE_VLESS_CONF"

    # Test logrotate configuration
    if logrotate -d "$LOGROTATE_VLESS_CONF" >/dev/null 2>&1; then
        log_success "Log rotation configured successfully"
    else
        log_error "Log rotation configuration failed"
        return 1
    fi
}

# Create log helper functions
create_log_helpers() {
    log_info "Creating log helper functions"

    local log_helpers_file="${VLESS_CONFIG_DIR}/log_helpers.sh"

    cat > "$log_helpers_file" << 'EOF'
#!/bin/bash
# VLESS Log Helper Functions

# Enhanced logging functions for VLESS components

vless_log() {
    local level="$1"
    shift
    local message="$*"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')

    echo "[$timestamp] [$level] $message" | logger -t "vless-vpn" -p "user.$level"
}

vless_log_access() {
    local client_ip="$1"
    local user_id="$2"
    local action="$3"
    local details="${4:-}"

    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    local log_entry="[$timestamp] CLIENT_IP=$client_ip USER_ID=$user_id ACTION=$action DETAILS=$details"

    echo "$log_entry" | logger -t "vless-access" -p "user.info"
}

vless_log_error() {
    local component="$1"
    local error_code="$2"
    local error_message="$3"

    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    local log_entry="[$timestamp] COMPONENT=$component ERROR_CODE=$error_code MESSAGE=$error_message"

    echo "$log_entry" | logger -t "vless-error" -p "user.error"
}

vless_log_security() {
    local event_type="$1"
    local source_ip="$2"
    local details="$3"

    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    local log_entry="[$timestamp] EVENT_TYPE=$event_type SOURCE_IP=$source_ip DETAILS=$details"

    echo "$log_entry" | logger -t "vless-security" -p "authpriv.warning"
}

vless_log_audit() {
    local user="$1"
    local action="$2"
    local target="$3"
    local result="$4"

    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    local log_entry="[$timestamp] USER=$user ACTION=$action TARGET=$target RESULT=$result"

    echo "$log_entry" | logger -t "vless-audit" -p "authpriv.info"
}

# Export functions
export -f vless_log vless_log_access vless_log_error vless_log_security vless_log_audit

EOF

    chmod 755 "$log_helpers_file"
    chown vless:vless "$log_helpers_file"

    log_success "Log helper functions created: $log_helpers_file"
}

# Setup log monitoring
setup_log_monitoring() {
    log_info "Setting up log monitoring and alerting"

    local monitor_script="${VLESS_CONFIG_DIR}/log_monitor.sh"

    cat > "$monitor_script" << 'EOF'
#!/bin/bash
# VLESS Log Monitoring Script

set -euo pipefail

LOG_DIR="/opt/vless/logs"
ALERT_THRESHOLD_ERRORS=10
ALERT_THRESHOLD_SECURITY=5
CHECK_INTERVAL=300  # 5 minutes

# Import common utilities
source "$(dirname "$0")/../modules/common_utils.sh"

monitor_error_logs() {
    local recent_errors
    recent_errors=$(tail -n 100 "${LOG_DIR}/error.log" 2>/dev/null | grep -c "$(date '+%Y-%m-%d %H:%M')" 2>/dev/null || echo "0")

    if [[ $recent_errors -gt $ALERT_THRESHOLD_ERRORS ]]; then
        vless_log_security "HIGH_ERROR_RATE" "localhost" "Error count: $recent_errors in last check"
        echo "ALERT: High error rate detected - $recent_errors errors"
    fi
}

monitor_security_logs() {
    local recent_security_events
    recent_security_events=$(tail -n 100 "${LOG_DIR}/security.log" 2>/dev/null | grep -c "$(date '+%Y-%m-%d %H:%M')" 2>/dev/null || echo "0")

    if [[ $recent_security_events -gt $ALERT_THRESHOLD_SECURITY ]]; then
        vless_log_audit "system" "SECURITY_ALERT" "security.log" "Event count: $recent_security_events"
        echo "ALERT: High security event rate - $recent_security_events events"
    fi
}

monitor_disk_usage() {
    local log_disk_usage
    log_disk_usage=$(df "$LOG_DIR" | awk 'NR==2 {print $5}' | sed 's/%//')

    if [[ $log_disk_usage -gt 80 ]]; then
        vless_log_error "LOG_MONITOR" "DISK_SPACE" "Log directory usage: ${log_disk_usage}%"
        echo "ALERT: Log directory disk usage high - ${log_disk_usage}%"
    fi
}

check_log_files() {
    local log_files=(
        "${LOG_DIR}/vless-vpn.log"
        "${LOG_DIR}/access.log"
        "${LOG_DIR}/error.log"
        "${LOG_DIR}/security.log"
        "${LOG_DIR}/audit.log"
    )

    local file
    for file in "${log_files[@]}"; do
        if [[ ! -f "$file" ]]; then
            vless_log_error "LOG_MONITOR" "MISSING_LOG" "Log file not found: $file"
            echo "ALERT: Missing log file - $file"
        fi
    done
}

# Source log helpers
source "${LOG_DIR}/../config/log_helpers.sh" 2>/dev/null || true

# Run monitoring checks
monitor_error_logs
monitor_security_logs
monitor_disk_usage
check_log_files

EOF

    chmod 755 "$monitor_script"
    chown vless:vless "$monitor_script"

    # Create systemd timer for log monitoring
    create_log_monitor_timer

    log_success "Log monitoring setup completed"
}

# Create systemd timer for log monitoring
create_log_monitor_timer() {
    log_info "Creating systemd timer for log monitoring"

    # Create service file
    cat > "/etc/systemd/system/vless-log-monitor.service" << EOF
[Unit]
Description=VLESS Log Monitor
After=rsyslog.service

[Service]
Type=oneshot
User=vless
Group=vless
ExecStart=${VLESS_CONFIG_DIR}/log_monitor.sh
StandardOutput=journal
StandardError=journal

EOF

    # Create timer file
    cat > "/etc/systemd/system/vless-log-monitor.timer" << EOF
[Unit]
Description=VLESS Log Monitor Timer
Requires=vless-log-monitor.service

[Timer]
OnCalendar=*:0/5
Persistent=true

[Install]
WantedBy=timers.target

EOF

    # Enable and start timer
    systemctl daemon-reload
    isolate_systemctl_command "enable" "vless-log-monitor.timer" 30
    isolate_systemctl_command "start" "vless-log-monitor.timer" 30

    log_success "Log monitoring timer created and started"
}

# Configure log encryption for sensitive data
configure_log_encryption() {
    log_info "Configuring log encryption for sensitive data"

    local encryption_script="${VLESS_CONFIG_DIR}/encrypt_logs.sh"

    cat > "$encryption_script" << 'EOF'
#!/bin/bash
# VLESS Log Encryption Script

set -euo pipefail

SENSITIVE_LOGS=(
    "/opt/vless/logs/security.log"
    "/opt/vless/logs/audit.log"
)

ENCRYPTION_KEY_FILE="/opt/vless/config/log_encryption.key"
ENCRYPTED_LOG_DIR="/opt/vless/logs/encrypted"

# Generate encryption key if it doesn't exist
generate_encryption_key() {
    if [[ ! -f "$ENCRYPTION_KEY_FILE" ]]; then
        openssl rand -base64 32 > "$ENCRYPTION_KEY_FILE"
        chmod 600 "$ENCRYPTION_KEY_FILE"
        chown root:root "$ENCRYPTION_KEY_FILE"
    fi
}

# Encrypt sensitive log files
encrypt_sensitive_logs() {
    local log_file="$1"
    local encrypted_file="${ENCRYPTED_LOG_DIR}/$(basename "$log_file").enc"

    mkdir -p "$ENCRYPTED_LOG_DIR"
    chmod 700 "$ENCRYPTED_LOG_DIR"

    if [[ -f "$log_file" && -s "$log_file" ]]; then
        openssl enc -aes-256-cbc -salt -in "$log_file" -out "$encrypted_file" -pass "file:$ENCRYPTION_KEY_FILE"
        chmod 600 "$encrypted_file"

        # Clear original sensitive content (keep structure)
        head -1 "$log_file" > "${log_file}.tmp"
        echo "# Sensitive content encrypted to: $encrypted_file" >> "${log_file}.tmp"
        tail -n +2 "$log_file" | wc -l | xargs echo "# Original entries:" >> "${log_file}.tmp"
        mv "${log_file}.tmp" "$log_file"
    fi
}

# Main encryption routine
if [[ "${1:-}" == "--encrypt" ]]; then
    generate_encryption_key

    for log_file in "${SENSITIVE_LOGS[@]}"; do
        encrypt_sensitive_logs "$log_file"
    done
fi

EOF

    chmod 700 "$encryption_script"
    chown root:root "$encryption_script"

    log_success "Log encryption configured"
}

# Setup remote log shipping
configure_remote_logging() {
    local remote_host="${1:-}"
    local remote_port="${2:-514}"

    if [[ -z "$remote_host" ]]; then
        log_debug "No remote log host specified, skipping remote logging setup"
        return 0
    fi

    log_info "Configuring remote log shipping to $remote_host:$remote_port"

    # Add remote logging configuration to rsyslog
    cat >> "$RSYSLOG_VLESS_CONF" << EOF

# Remote logging configuration
*.* @@${remote_host}:${remote_port}

# Buffer for reliability
\$ActionQueueFileName fwdRule1
\$ActionQueueMaxDiskSpace 1g
\$ActionQueueSaveOnShutdown on
\$ActionQueueType LinkedList
\$ActionResumeRetryCount -1

EOF

    # Restart rsyslog to apply changes
    isolate_systemctl_command "restart" "rsyslog" 30

    log_success "Remote log shipping configured to $remote_host:$remote_port"
}

# View log statistics
get_log_statistics() {
    log_info "Gathering log statistics"

    echo "=== VLESS Log Statistics ==="
    echo "Timestamp: $(get_timestamp)"
    echo ""

    # Log file sizes
    echo "=== Log File Sizes ==="
    if [[ -d "$VLESS_LOG_DIR" ]]; then
        find "$VLESS_LOG_DIR" -name "*.log" -type f -exec ls -lh {} \; | \
        awk '{print $9 ": " $5}' | sort
    else
        echo "Log directory not found: $VLESS_LOG_DIR"
    fi
    echo ""

    # Log entry counts
    echo "=== Log Entry Counts (Last 24 Hours) ==="
    local yesterday
    yesterday=$(date -d "yesterday" '+%Y-%m-%d')
    local today
    today=$(date '+%Y-%m-%d')

    local log_files=(
        "${VLESS_MAIN_LOG}:Main"
        "${VLESS_ACCESS_LOG}:Access"
        "${VLESS_ERROR_LOG}:Error"
        "${VLESS_SECURITY_LOG}:Security"
        "${VLESS_AUDIT_LOG}:Audit"
    )

    local log_entry
    local file
    local name
    for log_entry in "${log_files[@]}"; do
        file="${log_entry%:*}"
        name="${log_entry#*:}"

        if [[ -f "$file" ]]; then
            local count
            count=$(grep -c "$today\|$yesterday" "$file" 2>/dev/null || echo "0")
            echo "$name logs: $count entries"
        else
            echo "$name logs: File not found"
        fi
    done
    echo ""

    # Disk usage
    echo "=== Log Directory Disk Usage ==="
    if [[ -d "$VLESS_LOG_DIR" ]]; then
        df -h "$VLESS_LOG_DIR" | tail -1 | awk '{print "Used: " $3 " / " $2 " (" $5 ")"}'
    fi
    echo ""

    # Recent errors
    echo "=== Recent Error Summary ==="
    if [[ -f "$VLESS_ERROR_LOG" ]]; then
        tail -20 "$VLESS_ERROR_LOG" 2>/dev/null | grep "$(date '+%Y-%m-%d')" | wc -l | xargs echo "Today's errors:"
    else
        echo "Error log not found"
    fi
    echo ""

    # Log rotation status
    echo "=== Log Rotation Status ==="
    if [[ -f "$LOGROTATE_VLESS_CONF" ]]; then
        echo "Log rotation configured: Yes"
        echo "Last rotation: $(stat -c %y "$LOGROTATE_VLESS_CONF" 2>/dev/null || echo "Unknown")"
    else
        echo "Log rotation configured: No"
    fi
}

# Tail multiple log files
tail_vless_logs() {
    local duration="${1:-60}"
    local log_type="${2:-all}"

    log_info "Tailing VLESS logs for ${duration}s (type: $log_type)"

    case "$log_type" in
        "main")
            controlled_tail "$VLESS_MAIN_LOG" "$duration" 50
            ;;
        "access")
            controlled_tail "$VLESS_ACCESS_LOG" "$duration" 50
            ;;
        "error")
            controlled_tail "$VLESS_ERROR_LOG" "$duration" 50
            ;;
        "security")
            controlled_tail "$VLESS_SECURITY_LOG" "$duration" 50
            ;;
        "audit")
            controlled_tail "$VLESS_AUDIT_LOG" "$duration" 50
            ;;
        "all"|*)
            # Use multitail if available, otherwise tail main log
            if command_exists multitail; then
                timeout "$duration" multitail \
                    -l "tail -f $VLESS_MAIN_LOG" \
                    -l "tail -f $VLESS_ACCESS_LOG" \
                    -l "tail -f $VLESS_ERROR_LOG" \
                    -l "tail -f $VLESS_SECURITY_LOG" 2>/dev/null || true
            else
                controlled_tail "$VLESS_MAIN_LOG" "$duration" 50
            fi
            ;;
    esac
}

# Complete logging setup
setup_logging_system() {
    local remote_host="${1:-}"
    local remote_port="${2:-514}"

    log_info "Setting up complete VLESS logging system"

    # Initialize
    init_logging_setup

    # Configure rsyslog
    configure_rsyslog

    # Configure log rotation
    configure_log_rotation

    # Create log helpers
    create_log_helpers

    # Setup monitoring
    setup_log_monitoring

    # Configure encryption
    configure_log_encryption

    # Configure remote logging if specified
    if [[ -n "$remote_host" ]]; then
        configure_remote_logging "$remote_host" "$remote_port"
    fi

    # Create initial log files
    local log_files=(
        "$VLESS_MAIN_LOG"
        "$VLESS_ACCESS_LOG"
        "$VLESS_ERROR_LOG"
        "$VLESS_SECURITY_LOG"
        "$VLESS_AUDIT_LOG"
        "$XRAY_LOG"
    )

    local log_file
    for log_file in "${log_files[@]}"; do
        touch "$log_file"
        chmod 640 "$log_file"
        chown vless:vless "$log_file"
    done

    # Test logging
    source "${VLESS_CONFIG_DIR}/log_helpers.sh"
    vless_log "info" "Logging system initialized successfully"
    vless_log_audit "system" "SETUP_COMPLETE" "logging_system" "SUCCESS"

    log_success "VLESS logging system setup completed successfully"
    echo ""
    log_info "Log files location: $VLESS_LOG_DIR"
    log_info "Log helpers: ${VLESS_CONFIG_DIR}/log_helpers.sh"
    log_info "Monitoring timer: vless-log-monitor.timer"
}

# Export functions
export -f init_logging_setup configure_rsyslog configure_log_rotation
export -f create_log_helpers setup_log_monitoring create_log_monitor_timer
export -f configure_log_encryption configure_remote_logging get_log_statistics
export -f tail_vless_logs setup_logging_system

log_debug "Logging setup module loaded successfully"